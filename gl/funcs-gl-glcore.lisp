;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2014 The Khronos Group Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a
;;; copy of this software and/or associated documentation files (the
;;; "Materials"), to deal in the Materials without restriction, including
;;; without limitation the rights to use, copy, modify, merge, publish,
;;; distribute, sublicense, and/or sell copies of the Materials, and to
;;; permit persons to whom the Materials are furnished to do so, subject to
;;; the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included
;;; in all copies or substantial portions of the Materials.
;;;
;;; THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;;; MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2014-09-28T21:05:19Z
;;; from gl.xml @ svn rev 28221, 2014-09-19T03:11:05.177262Z

(defglextfun ("glFramebufferTexture1D" framebuffer-texture-1d) :void
  (target enum)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int))

(defglextfun ("glFramebufferTexture3D" framebuffer-texture-3d) :void
  (target enum)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int)
  (zoffset int))

(defglextfun ("glGetActiveUniformName" get-active-uniform-name) :void
  (program uint)
  (uniformIndex uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (uniformName (:pointer char)))

(defglextfun ("glDrawElementsBaseVertex" draw-elements-base-vertex) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices offset-or-pointer)
  (basevertex int))

(defglextfun ("glDrawRangeElementsBaseVertex" draw-range-elements-base-vertex) :void
  (mode enum)
  (start uint)
  (end uint)
  (count sizei)
  (type enum)
  (indices offset-or-pointer)
  (basevertex int))

(defglextfun ("glDrawElementsInstancedBaseVertex" draw-elements-instanced-base-vertex) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices offset-or-pointer)
  (instancecount sizei)
  (basevertex int))

(defglextfun ("glMultiDrawElementsBaseVertex" multi-draw-elements-base-vertex) :void
  (mode enum)
  (count (:pointer sizei))
  (type enum)
  (indices (:pointer (:pointer :void)))
  (drawcount sizei)
  (basevertex (:pointer int)))

(defglextfun ("glProvokingVertex" provoking-vertex) :void
  (mode enum))

(defglextfun ("glTexImage2DMultisample" tex-image-2d-multisample) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (fixedsamplelocations boolean))

(defglextfun ("glTexImage3DMultisample" tex-image-3d-multisample) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedsamplelocations boolean))

(defglextfun ("glBindFragDataLocationIndexed" bind-frag-data-location-indexed) :void
  (program uint)
  (colorNumber uint)
  (index uint)
  (name (:pointer char)))

(defglextfun ("glGetFragDataIndex" get-frag-data-index) int
  (program uint)
  (name (:pointer char)))

(defglextfun ("glSamplerParameterIiv" sampler-parameter-iiv) :void
  (sampler uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glSamplerParameterIuiv" sampler-parameter-iuiv) :void
  (sampler uint)
  (pname enum)
  (param (:pointer uint)))

(defglextfun ("glGetSamplerParameterIiv" get-sampler-parameter-iiv) :void
  (sampler uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetSamplerParameterIuiv" get-sampler-parameter-iuiv) :void
  (sampler uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glQueryCounter" query-counter) :void
  (id uint)
  (target enum))

(defglextfun ("glGetQueryObjecti64v" get-query-object-i64v) :void
  (id uint)
  (pname enum)
  (params (:pointer int64)))

(defglextfun ("glGetQueryObjectui64v" get-query-object-ui64v) :void
  (id uint)
  (pname enum)
  (params (:pointer uint64)))

(defglextfun ("glVertexAttribP1ui" vertex-attrib-p1ui) :void
  (index uint)
  (type enum)
  (normalized boolean)
  (value uint))

(defglextfun ("glVertexAttribP1uiv" vertex-attrib-p1uiv) :void
  (index uint)
  (type enum)
  (normalized boolean)
  (value (:pointer uint)))

(defglextfun ("glVertexAttribP2ui" vertex-attrib-p2ui) :void
  (index uint)
  (type enum)
  (normalized boolean)
  (value uint))

(defglextfun ("glVertexAttribP2uiv" vertex-attrib-p2uiv) :void
  (index uint)
  (type enum)
  (normalized boolean)
  (value (:pointer uint)))

(defglextfun ("glVertexAttribP3ui" vertex-attrib-p3ui) :void
  (index uint)
  (type enum)
  (normalized boolean)
  (value uint))

(defglextfun ("glVertexAttribP3uiv" vertex-attrib-p3uiv) :void
  (index uint)
  (type enum)
  (normalized boolean)
  (value (:pointer uint)))

(defglextfun ("glVertexAttribP4ui" vertex-attrib-p4ui) :void
  (index uint)
  (type enum)
  (normalized boolean)
  (value uint))

(defglextfun ("glVertexAttribP4uiv" vertex-attrib-p4uiv) :void
  (index uint)
  (type enum)
  (normalized boolean)
  (value (:pointer uint)))

(defglextfun ("glVertexP2ui" vertex-p2ui) :void
  (type enum)
  (value uint))

(defglextfun ("glVertexP2uiv" vertex-p2uiv) :void
  (type enum)
  (value (:pointer uint)))

(defglextfun ("glVertexP3ui" vertex-p3ui) :void
  (type enum)
  (value uint))

(defglextfun ("glVertexP3uiv" vertex-p3uiv) :void
  (type enum)
  (value (:pointer uint)))

(defglextfun ("glVertexP4ui" vertex-p4ui) :void
  (type enum)
  (value uint))

(defglextfun ("glVertexP4uiv" vertex-p4uiv) :void
  (type enum)
  (value (:pointer uint)))

(defglextfun ("glTexCoordP1ui" tex-coord-p1ui) :void
  (type enum)
  (coords uint))

(defglextfun ("glTexCoordP1uiv" tex-coord-p1uiv) :void
  (type enum)
  (coords (:pointer uint)))

(defglextfun ("glTexCoordP2ui" tex-coord-p2ui) :void
  (type enum)
  (coords uint))

(defglextfun ("glTexCoordP2uiv" tex-coord-p2uiv) :void
  (type enum)
  (coords (:pointer uint)))

(defglextfun ("glTexCoordP3ui" tex-coord-p3ui) :void
  (type enum)
  (coords uint))

(defglextfun ("glTexCoordP3uiv" tex-coord-p3uiv) :void
  (type enum)
  (coords (:pointer uint)))

(defglextfun ("glTexCoordP4ui" tex-coord-p4ui) :void
  (type enum)
  (coords uint))

(defglextfun ("glTexCoordP4uiv" tex-coord-p4uiv) :void
  (type enum)
  (coords (:pointer uint)))

(defglextfun ("glMultiTexCoordP1ui" multi-tex-coord-p1ui) :void
  (texture enum)
  (type enum)
  (coords uint))

(defglextfun ("glMultiTexCoordP1uiv" multi-tex-coord-p1uiv) :void
  (texture enum)
  (type enum)
  (coords (:pointer uint)))

(defglextfun ("glMultiTexCoordP2ui" multi-tex-coord-p2ui) :void
  (texture enum)
  (type enum)
  (coords uint))

(defglextfun ("glMultiTexCoordP2uiv" multi-tex-coord-p2uiv) :void
  (texture enum)
  (type enum)
  (coords (:pointer uint)))

(defglextfun ("glMultiTexCoordP3ui" multi-tex-coord-p3ui) :void
  (texture enum)
  (type enum)
  (coords uint))

(defglextfun ("glMultiTexCoordP3uiv" multi-tex-coord-p3uiv) :void
  (texture enum)
  (type enum)
  (coords (:pointer uint)))

(defglextfun ("glMultiTexCoordP4ui" multi-tex-coord-p4ui) :void
  (texture enum)
  (type enum)
  (coords uint))

(defglextfun ("glMultiTexCoordP4uiv" multi-tex-coord-p4uiv) :void
  (texture enum)
  (type enum)
  (coords (:pointer uint)))

(defglextfun ("glNormalP3ui" normal-p3ui) :void
  (type enum)
  (coords uint))

(defglextfun ("glNormalP3uiv" normal-p3uiv) :void
  (type enum)
  (coords (:pointer uint)))

(defglextfun ("glColorP3ui" color-p3ui) :void
  (type enum)
  (color uint))

(defglextfun ("glColorP3uiv" color-p3uiv) :void
  (type enum)
  (color (:pointer uint)))

(defglextfun ("glColorP4ui" color-p4ui) :void
  (type enum)
  (color uint))

(defglextfun ("glColorP4uiv" color-p4uiv) :void
  (type enum)
  (color (:pointer uint)))

(defglextfun ("glSecondaryColorP3ui" secondary-color-p3ui) :void
  (type enum)
  (color uint))

(defglextfun ("glSecondaryColorP3uiv" secondary-color-p3uiv) :void
  (type enum)
  (color (:pointer uint)))

(defglextfun ("glUniform1d" uniform-1d) :void
  (location int)
  (x double))

(defglextfun ("glUniform2d" uniform-2d) :void
  (location int)
  (x double)
  (y double))

(defglextfun ("glUniform3d" uniform-3d) :void
  (location int)
  (x double)
  (y double)
  (z double))

(defglextfun ("glUniform4d" uniform-4d) :void
  (location int)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glUniform1dv" uniform-1dv) :void
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glUniform2dv" uniform-2dv) :void
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glUniform3dv" uniform-3dv) :void
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glUniform4dv" uniform-4dv) :void
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glUniformMatrix2dv" uniform-matrix-2dv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glUniformMatrix3dv" uniform-matrix-3dv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glUniformMatrix4dv" uniform-matrix-4dv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glUniformMatrix2x3dv" uniform-matrix-2x3-dv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glUniformMatrix2x4dv" uniform-matrix-2x4-dv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glUniformMatrix3x2dv" uniform-matrix-3x2-dv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glUniformMatrix3x4dv" uniform-matrix-3x4-dv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glUniformMatrix4x2dv" uniform-matrix-4x2-dv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glUniformMatrix4x3dv" uniform-matrix-4x3-dv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glGetUniformdv" get-uniform-dv) :void
  (program uint)
  (location int)
  (params (:pointer double)))

(defglextfun ("glGetSubroutineUniformLocation" get-subroutine-uniform-location) int
  (program uint)
  (shadertype enum)
  (name (:pointer char)))

(defglextfun ("glGetSubroutineIndex" get-subroutine-index) uint
  (program uint)
  (shadertype enum)
  (name (:pointer char)))

(defglextfun ("glGetActiveSubroutineUniformiv" get-active-subroutine-uniform-iv) :void
  (program uint)
  (shadertype enum)
  (index uint)
  (pname enum)
  (values (:pointer int)))

(defglextfun ("glGetActiveSubroutineUniformName" get-active-subroutine-uniform-name) :void
  (program uint)
  (shadertype enum)
  (index uint)
  (bufsize sizei)
  (length (:pointer sizei))
  (name (:pointer char)))

(defglextfun ("glGetActiveSubroutineName" get-active-subroutine-name) :void
  (program uint)
  (shadertype enum)
  (index uint)
  (bufsize sizei)
  (length (:pointer sizei))
  (name (:pointer char)))

(defglextfun ("glUniformSubroutinesuiv" uniform-subroutines-uiv) :void
  (shadertype enum)
  (count sizei)
  (indices (:pointer uint)))

(defglextfun ("glGetUniformSubroutineuiv" get-uniform-subroutine-uiv) :void
  (shadertype enum)
  (location int)
  (params (:pointer uint)))

(defglextfun ("glGetProgramStageiv" get-program-stage-iv) :void
  (program uint)
  (shadertype enum)
  (pname enum)
  (values (:pointer int)))

(defglextfun ("glPatchParameteri" patch-parameter-i) :void
  (pname enum)
  (value int))

(defglextfun ("glPatchParameterfv" patch-parameter-fv) :void
  (pname enum)
  (values (:pointer float)))

(defglextfun ("glDrawTransformFeedback" draw-transform-feedback) :void
  (mode enum)
  (id uint))

(defglextfun ("glDrawTransformFeedbackStream" draw-transform-feedback-stream) :void
  (mode enum)
  (id uint)
  (stream uint))

(defglextfun ("glBeginQueryIndexed" begin-query-indexed) :void
  (target enum)
  (index uint)
  (id uint))

(defglextfun ("glEndQueryIndexed" end-query-indexed) :void
  (target enum)
  (index uint))

(defglextfun ("glGetQueryIndexediv" get-query-indexed-iv) :void
  (target enum)
  (index uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glProgramUniform1d" program-uniform-1d) :void
  (program uint)
  (location int)
  (v0 double))

(defglextfun ("glProgramUniform1dv" program-uniform-1dv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glProgramUniform2d" program-uniform-2d) :void
  (program uint)
  (location int)
  (v0 double)
  (v1 double))

(defglextfun ("glProgramUniform2dv" program-uniform-2dv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glProgramUniform3d" program-uniform-3d) :void
  (program uint)
  (location int)
  (v0 double)
  (v1 double)
  (v2 double))

(defglextfun ("glProgramUniform3dv" program-uniform-3dv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glProgramUniform4d" program-uniform-4d) :void
  (program uint)
  (location int)
  (v0 double)
  (v1 double)
  (v2 double)
  (v3 double))

(defglextfun ("glProgramUniform4dv" program-uniform-4dv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix2dv" program-uniform-matrix-2dv) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix3dv" program-uniform-matrix-3dv) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix4dv" program-uniform-matrix-4dv) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix2x3dv" program-uniform-matrix-2x3-dv) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix3x2dv" program-uniform-matrix-3x2-dv) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix2x4dv" program-uniform-matrix-2x4-dv) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix4x2dv" program-uniform-matrix-4x2-dv) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix3x4dv" program-uniform-matrix-3x4-dv) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix4x3dv" program-uniform-matrix-4x3-dv) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glVertexAttribL1d" vertex-attrib-l1d) :void
  (index uint)
  (x double))

(defglextfun ("glVertexAttribL2d" vertex-attrib-l2d) :void
  (index uint)
  (x double)
  (y double))

(defglextfun ("glVertexAttribL3d" vertex-attrib-l3d) :void
  (index uint)
  (x double)
  (y double)
  (z double))

(defglextfun ("glVertexAttribL4d" vertex-attrib-l4d) :void
  (index uint)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glVertexAttribL1dv" vertex-attrib-l1dv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttribL2dv" vertex-attrib-l2dv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttribL3dv" vertex-attrib-l3dv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttribL4dv" vertex-attrib-l4dv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttribLPointer" vertex-attrib-lpointer) :void
  (index uint)
  (size int)
  (type enum)
  (stride sizei)
  (pointer offset-or-pointer))

(defglextfun ("glGetVertexAttribLdv" get-vertex-attrib-ldv) :void
  (index uint)
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glViewportArrayv" viewport-array-v) :void
  (first uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glViewportIndexedf" viewport-indexed-f) :void
  (index uint)
  (x float)
  (y float)
  (w float)
  (h float))

(defglextfun ("glViewportIndexedfv" viewport-indexed-fv) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glScissorArrayv" scissor-array-v) :void
  (first uint)
  (count sizei)
  (v (:pointer int)))

(defglextfun ("glScissorIndexed" scissor-indexed) :void
  (index uint)
  (left int)
  (bottom int)
  (width sizei)
  (height sizei))

(defglextfun ("glScissorIndexedv" scissor-indexed-v) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glDepthRangeArrayv" depth-range-array-v) :void
  (first uint)
  (count sizei)
  (v (:pointer double)))

(defglextfun ("glDepthRangeIndexed" depth-range-indexed) :void
  (index uint)
  (n double)
  (f double))

(defglextfun ("glGetFloati_v" get-float-i-v) :void
  (target enum)
  (index uint)
  (data (:pointer float)))

(defglextfun ("glGetDoublei_v" get-double-i-v) :void
  (target enum)
  (index uint)
  (data (:pointer double)))

(defglextfun ("glDrawArraysInstancedBaseInstance" draw-arrays-instanced-base-instance) :void
  (mode enum)
  (first int)
  (count sizei)
  (instancecount sizei)
  (baseinstance uint))

(defglextfun ("glDrawElementsInstancedBaseInstance" draw-elements-instanced-base-instance) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (instancecount sizei)
  (baseinstance uint))

(defglextfun ("glDrawElementsInstancedBaseVertexBaseInstance" draw-elements-instanced-base-vertex-base-instance) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (instancecount sizei)
  (basevertex int)
  (baseinstance uint))

(defglextfun ("glGetActiveAtomicCounterBufferiv" get-active-atomic-counter-buffer-iv) :void
  (program uint)
  (bufferIndex uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTexStorage1D" tex-storage-1d) :void
  (target enum)
  (levels sizei)
  (internalformat enum)
  (width sizei))

(defglextfun ("glDrawTransformFeedbackInstanced" draw-transform-feedback-instanced) :void
  (mode enum)
  (id uint)
  (instancecount sizei))

(defglextfun ("glDrawTransformFeedbackStreamInstanced" draw-transform-feedback-stream-instanced) :void
  (mode enum)
  (id uint)
  (stream uint)
  (instancecount sizei))

(defglextfun ("glClearBufferData" clear-buffer-data) :void
  (target enum)
  (internalformat enum)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glClearBufferSubData" clear-buffer-sub-data) :void
  (target enum)
  (internalformat enum)
  (offset intptr)
  (size sizeiptr)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glCopyImageSubData" copy-image-sub-data) :void
  (srcName uint)
  (srcTarget enum)
  (srcLevel int)
  (srcX int)
  (srcY int)
  (srcZ int)
  (dstName uint)
  (dstTarget enum)
  (dstLevel int)
  (dstX int)
  (dstY int)
  (dstZ int)
  (srcWidth sizei)
  (srcHeight sizei)
  (srcDepth sizei))

(defglextfun ("glGetInternalformati64v" get-internalformat-i64v) :void
  (target enum)
  (internalformat enum)
  (pname enum)
  (bufSize sizei)
  (params (:pointer int64)))

(defglextfun ("glInvalidateTexSubImage" invalidate-tex-sub-image) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei))

(defglextfun ("glInvalidateTexImage" invalidate-tex-image) :void
  (texture uint)
  (level int))

(defglextfun ("glInvalidateBufferSubData" invalidate-buffer-sub-data) :void
  (buffer uint)
  (offset intptr)
  (length sizeiptr))

(defglextfun ("glInvalidateBufferData" invalidate-buffer-data) :void
  (buffer uint))

(defglextfun ("glMultiDrawArraysIndirect" multi-draw-arrays-indirect) :void
  (mode enum)
  (indirect offset-or-pointer)
  (drawcount sizei)
  (stride sizei))

(defglextfun ("glMultiDrawElementsIndirect" multi-draw-elements-indirect) :void
  (mode enum)
  (type enum)
  (indirect offset-or-pointer)
  (drawcount sizei)
  (stride sizei))

(defglextfun ("glGetProgramResourceLocationIndex" get-program-resource-location-index) int
  (program uint)
  (programInterface enum)
  (name (:pointer char)))

(defglextfun ("glShaderStorageBlockBinding" shader-storage-block-binding) :void
  (program uint)
  (storageBlockIndex uint)
  (storageBlockBinding uint))

(defglextfun ("glTexBufferRange" tex-buffer-range) :void
  (target enum)
  (internalformat enum)
  (buffer uint)
  (offset intptr)
  (size sizeiptr))

(defglextfun ("glTexStorage3DMultisample" tex-storage-3d-multisample) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedsamplelocations boolean))

(defglextfun ("glTextureView" texture-view) :void
  (texture uint)
  (target enum)
  (origtexture uint)
  (internalformat enum)
  (minlevel uint)
  (numlevels uint)
  (minlayer uint)
  (numlayers uint))

(defglextfun ("glVertexAttribLFormat" vertex-attrib-l-format) :void
  (attribindex uint)
  (size int)
  (type enum)
  (relativeoffset uint))

(defglextfun ("glBufferStorage" buffer-storage) :void
  (target enum)
  (size sizeiptr)
  (data (:pointer :void))
  (flags bitfield))

(defglextfun ("glClearTexImage" clear-tex-image) :void
  (texture uint)
  (level int)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glClearTexSubImage" clear-tex-sub-image) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glBindBuffersBase" bind-buffers-base) :void
  (target enum)
  (first uint)
  (count sizei)
  (buffers (:pointer uint)))

(defglextfun ("glBindBuffersRange" bind-buffers-range) :void
  (target enum)
  (first uint)
  (count sizei)
  (buffers (:pointer uint))
  (offsets (:pointer intptr))
  (sizes (:pointer sizeiptr)))

(defglextfun ("glBindTextures" bind-textures) :void
  (first uint)
  (count sizei)
  (textures (:pointer uint)))

(defglextfun ("glBindSamplers" bind-samplers) :void
  (first uint)
  (count sizei)
  (samplers (:pointer uint)))

(defglextfun ("glBindImageTextures" bind-image-textures) :void
  (first uint)
  (count sizei)
  (textures (:pointer uint)))

(defglextfun ("glBindVertexBuffers" bind-vertex-buffers) :void
  (first uint)
  (count sizei)
  (buffers (:pointer uint))
  (offsets (:pointer intptr))
  (strides (:pointer sizei)))

(defglextfun ("glClipControl" clip-control) :void
  (origin enum)
  (depth enum))

(defglextfun ("glCreateTransformFeedbacks" create-transform-feedbacks) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glTransformFeedbackBufferBase" transform-feedback-buffer-base) :void
  (xfb uint)
  (index uint)
  (buffer uint))

(defglextfun ("glTransformFeedbackBufferRange" transform-feedback-buffer-range) :void
  (xfb uint)
  (index uint)
  (buffer uint)
  (offset intptr)
  (size sizei))

(defglextfun ("glGetTransformFeedbackiv" get-transform-feedback-iv) :void
  (xfb uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glGetTransformFeedbacki_v" get-transform-feedback-i-v) :void
  (xfb uint)
  (pname enum)
  (index uint)
  (param (:pointer int)))

(defglextfun ("glGetTransformFeedbacki64_v" get-transform-feedback-i64-v) :void
  (xfb uint)
  (pname enum)
  (index uint)
  (param (:pointer int64)))

(defglextfun ("glCreateBuffers" create-buffers) :void
  (n sizei)
  (buffers (:pointer uint)))

(defglextfun ("glNamedBufferStorage" named-buffer-storage) :void
  (buffer uint)
  (size sizei)
  (data (:pointer :void))
  (flags bitfield))

(defglextfun ("glNamedBufferData" named-buffer-data) :void
  (buffer uint)
  (size sizei)
  (data (:pointer :void))
  (usage enum))

(defglextfun ("glNamedBufferSubData" named-buffer-sub-data) :void
  (buffer uint)
  (offset intptr)
  (size sizei)
  (data (:pointer :void)))

(defglextfun ("glCopyNamedBufferSubData" copy-named-buffer-sub-data) :void
  (readBuffer uint)
  (writeBuffer uint)
  (readOffset intptr)
  (writeOffset intptr)
  (size sizei))

(defglextfun ("glClearNamedBufferData" clear-named-buffer-data) :void
  (buffer uint)
  (internalformat enum)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glClearNamedBufferSubData" clear-named-buffer-sub-data) :void
  (buffer uint)
  (internalformat enum)
  (offset intptr)
  (size sizei)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glMapNamedBuffer" map-named-buffer) (:pointer :void)
  (buffer uint)
  (access enum))

(defglextfun ("glMapNamedBufferRange" map-named-buffer-range) (:pointer :void)
  (buffer uint)
  (offset intptr)
  (length sizei)
  (access bitfield))

(defglextfun ("glUnmapNamedBuffer" unmap-named-buffer) boolean
  (buffer uint))

(defglextfun ("glFlushMappedNamedBufferRange" flush-mapped-named-buffer-range) :void
  (buffer uint)
  (offset intptr)
  (length sizei))

(defglextfun ("glGetNamedBufferParameteriv" get-named-buffer-parameter-iv) :void
  (buffer uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetNamedBufferParameteri64v" get-named-buffer-parameter-i64v) :void
  (buffer uint)
  (pname enum)
  (params (:pointer int64)))

(defglextfun ("glGetNamedBufferPointerv" get-named-buffer-pointer-v) :void
  (buffer uint)
  (pname enum)
  (params (:pointer (:pointer :void))))

(defglextfun ("glGetNamedBufferSubData" get-named-buffer-sub-data) :void
  (buffer uint)
  (offset intptr)
  (size sizei)
  (data (:pointer :void)))

(defglextfun ("glCreateFramebuffers" create-framebuffers) :void
  (n sizei)
  (framebuffers (:pointer uint)))

(defglextfun ("glNamedFramebufferRenderbuffer" named-framebuffer-renderbuffer) :void
  (framebuffer uint)
  (attachment enum)
  (renderbuffertarget enum)
  (renderbuffer uint))

(defglextfun ("glNamedFramebufferParameteri" named-framebuffer-parameter-i) :void
  (framebuffer uint)
  (pname enum)
  (param int))

(defglextfun ("glNamedFramebufferTexture" named-framebuffer-texture) :void
  (framebuffer uint)
  (attachment enum)
  (texture uint)
  (level int))

(defglextfun ("glNamedFramebufferTextureLayer" named-framebuffer-texture-layer) :void
  (framebuffer uint)
  (attachment enum)
  (texture uint)
  (level int)
  (layer int))

(defglextfun ("glNamedFramebufferDrawBuffer" named-framebuffer-draw-buffer) :void
  (framebuffer uint)
  (buf enum))

(defglextfun ("glNamedFramebufferDrawBuffers" named-framebuffer-draw-buffers) :void
  (framebuffer uint)
  (n sizei)
  (bufs (:pointer enum)))

(defglextfun ("glNamedFramebufferReadBuffer" named-framebuffer-read-buffer) :void
  (framebuffer uint)
  (src enum))

(defglextfun ("glInvalidateNamedFramebufferData" invalidate-named-framebuffer-data) :void
  (framebuffer uint)
  (numAttachments sizei)
  (attachments (:pointer enum)))

(defglextfun ("glInvalidateNamedFramebufferSubData" invalidate-named-framebuffer-sub-data) :void
  (framebuffer uint)
  (numAttachments sizei)
  (attachments (:pointer enum))
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glClearNamedFramebufferiv" clear-named-framebuffer-iv) :void
  (framebuffer uint)
  (buffer enum)
  (drawbuffer int)
  (value (:pointer int)))

(defglextfun ("glClearNamedFramebufferuiv" clear-named-framebuffer-uiv) :void
  (framebuffer uint)
  (buffer enum)
  (drawbuffer int)
  (value (:pointer uint)))

(defglextfun ("glClearNamedFramebufferfv" clear-named-framebuffer-fv) :void
  (framebuffer uint)
  (buffer enum)
  (drawbuffer int)
  (value (:pointer float)))

(defglextfun ("glClearNamedFramebufferfi" clear-named-framebuffer-fi) :void
  (framebuffer uint)
  (buffer enum)
  (depth float)
  (stencil int))

(defglextfun ("glBlitNamedFramebuffer" blit-named-framebuffer) :void
  (readFramebuffer uint)
  (drawFramebuffer uint)
  (srcX0 int)
  (srcY0 int)
  (srcX1 int)
  (srcY1 int)
  (dstX0 int)
  (dstY0 int)
  (dstX1 int)
  (dstY1 int)
  (mask bitfield)
  (filter enum))

(defglextfun ("glCheckNamedFramebufferStatus" check-named-framebuffer-status) enum
  (framebuffer uint)
  (target enum))

(defglextfun ("glGetNamedFramebufferParameteriv" get-named-framebuffer-parameter-iv) :void
  (framebuffer uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glGetNamedFramebufferAttachmentParameteriv" get-named-framebuffer-attachment-parameter-iv) :void
  (framebuffer uint)
  (attachment enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glCreateRenderbuffers" create-renderbuffers) :void
  (n sizei)
  (renderbuffers (:pointer uint)))

(defglextfun ("glNamedRenderbufferStorage" named-renderbuffer-storage) :void
  (renderbuffer uint)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glNamedRenderbufferStorageMultisample" named-renderbuffer-storage-multisample) :void
  (renderbuffer uint)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glGetNamedRenderbufferParameteriv" get-named-renderbuffer-parameter-iv) :void
  (renderbuffer uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glCreateTextures" create-textures) :void
  (target enum)
  (n sizei)
  (textures (:pointer uint)))

(defglextfun ("glTextureBuffer" texture-buffer) :void
  (texture uint)
  (internalformat enum)
  (buffer uint))

(defglextfun ("glTextureBufferRange" texture-buffer-range) :void
  (texture uint)
  (internalformat enum)
  (buffer uint)
  (offset intptr)
  (size sizei))

(defglextfun ("glTextureStorage1D" texture-storage-1d) :void
  (texture uint)
  (levels sizei)
  (internalformat enum)
  (width sizei))

(defglextfun ("glTextureStorage2D" texture-storage-2d) :void
  (texture uint)
  (levels sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glTextureStorage3D" texture-storage-3d) :void
  (texture uint)
  (levels sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei))

(defglextfun ("glTextureStorage2DMultisample" texture-storage-2d-multisample) :void
  (texture uint)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (fixedsamplelocations boolean))

(defglextfun ("glTextureStorage3DMultisample" texture-storage-3d-multisample) :void
  (texture uint)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedsamplelocations boolean))

(defglextfun ("glTextureSubImage1D" texture-sub-image-1d) :void
  (texture uint)
  (level int)
  (xoffset int)
  (width sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTextureSubImage2D" texture-sub-image-2d) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTextureSubImage3D" texture-sub-image-3d) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glCompressedTextureSubImage1D" compressed-texture-sub-image-1d) :void
  (texture uint)
  (level int)
  (xoffset int)
  (width sizei)
  (format enum)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glCompressedTextureSubImage2D" compressed-texture-sub-image-2d) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glCompressedTextureSubImage3D" compressed-texture-sub-image-3d) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glCopyTextureSubImage1D" copy-texture-sub-image-1d) :void
  (texture uint)
  (level int)
  (xoffset int)
  (x int)
  (y int)
  (width sizei))

(defglextfun ("glCopyTextureSubImage2D" copy-texture-sub-image-2d) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glCopyTextureSubImage3D" copy-texture-sub-image-3d) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glTextureParameterf" texture-parameter-f) :void
  (texture uint)
  (pname enum)
  (param float))

(defglextfun ("glTextureParameterfv" texture-parameter-fv) :void
  (texture uint)
  (pname enum)
  (param (:pointer float)))

(defglextfun ("glTextureParameteri" texture-parameter-i) :void
  (texture uint)
  (pname enum)
  (param int))

(defglextfun ("glTextureParameterIiv" texture-parameter-iiv) :void
  (texture uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTextureParameterIuiv" texture-parameter-iuiv) :void
  (texture uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glTextureParameteriv" texture-parameter-iv) :void
  (texture uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glGenerateTextureMipmap" generate-texture-mipmap) :void
  (texture uint))

(defglextfun ("glBindTextureUnit" bind-texture-unit) :void
  (unit uint)
  (texture uint))

(defglextfun ("glGetTextureImage" get-texture-image) :void
  (texture uint)
  (level int)
  (format enum)
  (type enum)
  (bufSize sizei)
  (pixels (:pointer :void)))

(defglextfun ("glGetCompressedTextureImage" get-compressed-texture-image) :void
  (texture uint)
  (level int)
  (bufSize sizei)
  (pixels (:pointer :void)))

(defglextfun ("glGetTextureLevelParameterfv" get-texture-level-parameter-fv) :void
  (texture uint)
  (level int)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetTextureLevelParameteriv" get-texture-level-parameter-iv) :void
  (texture uint)
  (level int)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetTextureParameterfv" get-texture-parameter-fv) :void
  (texture uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetTextureParameterIiv" get-texture-parameter-iiv) :void
  (texture uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetTextureParameterIuiv" get-texture-parameter-iuiv) :void
  (texture uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetTextureParameteriv" get-texture-parameter-iv) :void
  (texture uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glCreateVertexArrays" create-vertex-arrays) :void
  (n sizei)
  (arrays (:pointer uint)))

(defglextfun ("glDisableVertexArrayAttrib" disable-vertex-array-attrib) :void
  (vaobj uint)
  (index uint))

(defglextfun ("glEnableVertexArrayAttrib" enable-vertex-array-attrib) :void
  (vaobj uint)
  (index uint))

(defglextfun ("glVertexArrayElementBuffer" vertex-array-element-buffer) :void
  (vaobj uint)
  (buffer uint))

(defglextfun ("glVertexArrayVertexBuffer" vertex-array-vertex-buffer) :void
  (vaobj uint)
  (bindingindex uint)
  (buffer uint)
  (offset intptr)
  (stride sizei))

(defglextfun ("glVertexArrayVertexBuffers" vertex-array-vertex-buffers) :void
  (vaobj uint)
  (first uint)
  (count sizei)
  (buffers (:pointer uint))
  (offsets (:pointer intptr))
  (strides (:pointer sizei)))

(defglextfun ("glVertexArrayAttribBinding" vertex-array-attrib-binding) :void
  (vaobj uint)
  (attribindex uint)
  (bindingindex uint))

(defglextfun ("glVertexArrayAttribFormat" vertex-array-attrib-format) :void
  (vaobj uint)
  (attribindex uint)
  (size int)
  (type enum)
  (normalized boolean)
  (relativeoffset uint))

(defglextfun ("glVertexArrayAttribIFormat" vertex-array-attrib-i-format) :void
  (vaobj uint)
  (attribindex uint)
  (size int)
  (type enum)
  (relativeoffset uint))

(defglextfun ("glVertexArrayAttribLFormat" vertex-array-attrib-l-format) :void
  (vaobj uint)
  (attribindex uint)
  (size int)
  (type enum)
  (relativeoffset uint))

(defglextfun ("glVertexArrayBindingDivisor" vertex-array-binding-divisor) :void
  (vaobj uint)
  (bindingindex uint)
  (divisor uint))

(defglextfun ("glGetVertexArrayiv" get-vertex-array-iv) :void
  (vaobj uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glGetVertexArrayIndexediv" get-vertex-array-indexed-iv) :void
  (vaobj uint)
  (index uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glGetVertexArrayIndexed64iv" get-vertex-array-indexed-64iv) :void
  (vaobj uint)
  (index uint)
  (pname enum)
  (param (:pointer int64)))

(defglextfun ("glCreateSamplers" create-samplers) :void
  (n sizei)
  (samplers (:pointer uint)))

(defglextfun ("glCreateProgramPipelines" create-program-pipelines) :void
  (n sizei)
  (pipelines (:pointer uint)))

(defglextfun ("glCreateQueries" create-queries) :void
  (target enum)
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glGetTextureSubImage" get-texture-sub-image) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (bufSize sizei)
  (pixels (:pointer :void)))

(defglextfun ("glGetCompressedTextureSubImage" get-compressed-texture-sub-image) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (bufSize sizei)
  (pixels (:pointer :void)))

(defglextfun ("glTextureBarrier" texture-barrier) :void)

(defglextfun ("glGetTextureHandleARB" get-texture-handle-arb) uint64
  (texture uint))

(defglextfun ("glGetTextureSamplerHandleARB" get-texture-sampler-handle-arb) uint64
  (texture uint)
  (sampler uint))

(defglextfun ("glMakeTextureHandleResidentARB" make-texture-handle-resident-arb) :void
  (handle uint64))

(defglextfun ("glMakeTextureHandleNonResidentARB" make-texture-handle-non-resident-arb) :void
  (handle uint64))

(defglextfun ("glGetImageHandleARB" get-image-handle-arb) uint64
  (texture uint)
  (level int)
  (layered boolean)
  (layer int)
  (format enum))

(defglextfun ("glMakeImageHandleResidentARB" make-image-handle-resident-arb) :void
  (handle uint64)
  (access enum))

(defglextfun ("glMakeImageHandleNonResidentARB" make-image-handle-non-resident-arb) :void
  (handle uint64))

(defglextfun ("glUniformHandleui64ARB" uniform-handle-ui64-arb) :void
  (location int)
  (value uint64))

(defglextfun ("glUniformHandleui64vARB" uniform-handle-ui64v-arb) :void
  (location int)
  (count sizei)
  (value (:pointer uint64)))

(defglextfun ("glProgramUniformHandleui64ARB" program-uniform-handle-ui64-arb) :void
  (program uint)
  (location int)
  (value uint64))

(defglextfun ("glProgramUniformHandleui64vARB" program-uniform-handle-ui64v-arb) :void
  (program uint)
  (location int)
  (count sizei)
  (values (:pointer uint64)))

(defglextfun ("glIsTextureHandleResidentARB" is-texture-handle-resident-arb) boolean
  (handle uint64))

(defglextfun ("glIsImageHandleResidentARB" is-image-handle-resident-arb) boolean
  (handle uint64))

(defglextfun ("glVertexAttribL1ui64ARB" vertex-attrib-l1ui64-arb) :void
  (index uint)
  (x uint64-ext))

(defglextfun ("glVertexAttribL1ui64vARB" vertex-attrib-l1ui64v-arb) :void
  (index uint)
  (v (:pointer uint64-ext)))

(defglextfun ("glGetVertexAttribLui64vARB" get-vertex-attrib-lui64v-arb) :void
  (index uint)
  (pname enum)
  (params (:pointer uint64-ext)))

(defglextfun ("glCreateSyncFromCLeventARB" create-sync-from-cl-event-arb) sync
  (context (:pointer _cl_context))
  (event (:pointer _cl_event))
  (flags bitfield))

(defglextfun ("glDispatchComputeGroupSizeARB" dispatch-compute-group-size-arb) :void
  (num_groups_x uint)
  (num_groups_y uint)
  (num_groups_z uint)
  (group_size_x uint)
  (group_size_y uint)
  (group_size_z uint))

(defglextfun ("glDebugMessageControlARB" debug-message-control-arb) :void
  (source enum)
  (type enum)
  (severity enum)
  (count sizei)
  (ids (:pointer uint))
  (enabled boolean))

(defglextfun ("glDebugMessageInsertARB" debug-message-insert-arb) :void
  (source enum)
  (type enum)
  (id uint)
  (severity enum)
  (length sizei)
  (buf (:pointer char)))

(defglextfun ("glDebugMessageCallbackARB" debug-message-callback-arb) :void
  (callback debugproc-arb)
  (userParam (:pointer :void)))

(defglextfun ("glGetDebugMessageLogARB" get-debug-message-log-arb) uint
  (count uint)
  (bufSize sizei)
  (sources (:pointer enum))
  (types (:pointer enum))
  (ids (:pointer uint))
  (severities (:pointer enum))
  (lengths (:pointer sizei))
  (messageLog (:pointer char)))

(defglextfun ("glBlendEquationiARB" blend-equation-i-arb) :void
  (buf uint)
  (mode enum))

(defglextfun ("glBlendEquationSeparateiARB" blend-equation-separate-i-arb) :void
  (buf uint)
  (modeRGB enum)
  (modeAlpha enum))

(defglextfun ("glBlendFunciARB" blend-func-i-arb) :void
  (buf uint)
  (src enum)
  (dst enum))

(defglextfun ("glBlendFuncSeparateiARB" blend-func-separate-i-arb) :void
  (buf uint)
  (srcRGB enum)
  (dstRGB enum)
  (srcAlpha enum)
  (dstAlpha enum))

(defglextfun ("glColorTable" color-table) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (format enum)
  (type enum)
  (table offset-or-pointer))

(defglextfun ("glColorTableParameterfv" color-table-parameter-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glColorTableParameteriv" color-table-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glCopyColorTable" copy-color-table) :void
  (target enum)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei))

(defglextfun ("glGetColorTable" get-color-table) :void
  (target enum)
  (format enum)
  (type enum)
  (table offset-or-pointer))

(defglextfun ("glGetColorTableParameterfv" get-color-table-parameter-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetColorTableParameteriv" get-color-table-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glColorSubTable" color-sub-table) :void
  (target enum)
  (start sizei)
  (count sizei)
  (format enum)
  (type enum)
  (data offset-or-pointer))

(defglextfun ("glCopyColorSubTable" copy-color-sub-table) :void
  (target enum)
  (start sizei)
  (x int)
  (y int)
  (width sizei))

(defglextfun ("glConvolutionFilter1D" convolution-filter-1d) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (format enum)
  (type enum)
  (image offset-or-pointer))

(defglextfun ("glConvolutionFilter2D" convolution-filter-2d) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (image offset-or-pointer))

(defglextfun ("glConvolutionParameterf" convolution-parameter-f) :void
  (target enum)
  (pname enum)
  (params float))

(defglextfun ("glConvolutionParameterfv" convolution-parameter-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glConvolutionParameteri" convolution-parameter-i) :void
  (target enum)
  (pname enum)
  (params int))

(defglextfun ("glConvolutionParameteriv" convolution-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glCopyConvolutionFilter1D" copy-convolution-filter-1d) :void
  (target enum)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei))

(defglextfun ("glCopyConvolutionFilter2D" copy-convolution-filter-2d) :void
  (target enum)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glGetConvolutionFilter" get-convolution-filter) :void
  (target enum)
  (format enum)
  (type enum)
  (image offset-or-pointer))

(defglextfun ("glGetConvolutionParameterfv" get-convolution-parameter-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetConvolutionParameteriv" get-convolution-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetSeparableFilter" get-separable-filter) :void
  (target enum)
  (format enum)
  (type enum)
  (row offset-or-pointer)
  (column offset-or-pointer)
  (span offset-or-pointer))

(defglextfun ("glSeparableFilter2D" separable-filter-2d) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (row offset-or-pointer)
  (column offset-or-pointer))

(defglextfun ("glGetHistogram" get-histogram) :void
  (target enum)
  (reset boolean)
  (format enum)
  (type enum)
  (values offset-or-pointer))

(defglextfun ("glGetHistogramParameterfv" get-histogram-parameter-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetHistogramParameteriv" get-histogram-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetMinmax" get-minmax) :void
  (target enum)
  (reset boolean)
  (format enum)
  (type enum)
  (values offset-or-pointer))

(defglextfun ("glGetMinmaxParameterfv" get-minmax-parameter-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetMinmaxParameteriv" get-minmax-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glHistogram" histogram) :void
  (target enum)
  (width sizei)
  (internalformat enum)
  (sink boolean))

(defglextfun ("glMinmax" minmax) :void
  (target enum)
  (internalformat enum)
  (sink boolean))

(defglextfun ("glResetHistogram" reset-histogram) :void
  (target enum))

(defglextfun ("glResetMinmax" reset-minmax) :void
  (target enum))

(defglextfun ("glMultiDrawArraysIndirectCountARB" multi-draw-arrays-indirect-count-arb) :void
  (mode enum)
  (indirect intptr)
  (drawcount intptr)
  (maxdrawcount sizei)
  (stride sizei))

(defglextfun ("glMultiDrawElementsIndirectCountARB" multi-draw-elements-indirect-count-arb) :void
  (mode enum)
  (type enum)
  (indirect intptr)
  (drawcount intptr)
  (maxdrawcount sizei)
  (stride sizei))

(defglextfun ("glGetGraphicsResetStatusARB" get-graphics-reset-status-arb) enum)

(defglextfun ("glGetnTexImageARB" getn-tex-image-arb) :void
  (target enum)
  (level int)
  (format enum)
  (type enum)
  (bufSize sizei)
  (img (:pointer :void)))

(defglextfun ("glReadnPixelsARB" readn-pixels-arb) :void
  (x int)
  (y int)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (bufSize sizei)
  (data (:pointer :void)))

(defglextfun ("glGetnCompressedTexImageARB" getn-compressed-tex-image-arb) :void
  (target enum)
  (lod int)
  (bufSize sizei)
  (img (:pointer :void)))

(defglextfun ("glGetnUniformfvARB" getn-uniform-fv-arb) :void
  (program uint)
  (location int)
  (bufSize sizei)
  (params (:pointer float)))

(defglextfun ("glGetnUniformivARB" getn-uniform-iv-arb) :void
  (program uint)
  (location int)
  (bufSize sizei)
  (params (:pointer int)))

(defglextfun ("glGetnUniformuivARB" getn-uniform-uiv-arb) :void
  (program uint)
  (location int)
  (bufSize sizei)
  (params (:pointer uint)))

(defglextfun ("glGetnUniformdvARB" getn-uniform-dv-arb) :void
  (program uint)
  (location int)
  (bufSize sizei)
  (params (:pointer double)))

(defglextfun ("glGetnMapdvARB" getn-map-dv-arb) :void
  (target enum)
  (query enum)
  (bufSize sizei)
  (v (:pointer double)))

(defglextfun ("glGetnMapfvARB" getn-map-fv-arb) :void
  (target enum)
  (query enum)
  (bufSize sizei)
  (v (:pointer float)))

(defglextfun ("glGetnMapivARB" getn-map-iv-arb) :void
  (target enum)
  (query enum)
  (bufSize sizei)
  (v (:pointer int)))

(defglextfun ("glGetnPixelMapfvARB" getn-pixel-map-fv-arb) :void
  (map enum)
  (bufSize sizei)
  (values (:pointer float)))

(defglextfun ("glGetnPixelMapuivARB" getn-pixel-map-uiv-arb) :void
  (map enum)
  (bufSize sizei)
  (values (:pointer uint)))

(defglextfun ("glGetnPixelMapusvARB" getn-pixel-map-usv-arb) :void
  (map enum)
  (bufSize sizei)
  (values (:pointer ushort)))

(defglextfun ("glGetnPolygonStippleARB" getn-polygon-stipple-arb) :void
  (bufSize sizei)
  (pattern (:pointer ubyte)))

(defglextfun ("glGetnColorTableARB" getn-color-table-arb) :void
  (target enum)
  (format enum)
  (type enum)
  (bufSize sizei)
  (table (:pointer :void)))

(defglextfun ("glGetnConvolutionFilterARB" getn-convolution-filter-arb) :void
  (target enum)
  (format enum)
  (type enum)
  (bufSize sizei)
  (image (:pointer :void)))

(defglextfun ("glGetnSeparableFilterARB" getn-separable-filter-arb) :void
  (target enum)
  (format enum)
  (type enum)
  (rowBufSize sizei)
  (row (:pointer :void))
  (columnBufSize sizei)
  (column (:pointer :void))
  (span (:pointer :void)))

(defglextfun ("glGetnHistogramARB" getn-histogram-arb) :void
  (target enum)
  (reset boolean)
  (format enum)
  (type enum)
  (bufSize sizei)
  (values (:pointer :void)))

(defglextfun ("glGetnMinmaxARB" getn-minmax-arb) :void
  (target enum)
  (reset boolean)
  (format enum)
  (type enum)
  (bufSize sizei)
  (values (:pointer :void)))

(defglextfun ("glMinSampleShadingARB" min-sample-shading-arb) :void
  (value float))

(defglextfun ("glNamedStringARB" named-string-arb) :void
  (type enum)
  (namelen int)
  (name (:pointer char))
  (stringlen int)
  (string (:pointer char)))

(defglextfun ("glDeleteNamedStringARB" delete-named-string-arb) :void
  (namelen int)
  (name (:pointer char)))

(defglextfun ("glCompileShaderIncludeARB" compile-shader-include-arb) :void
  (shader uint)
  (count sizei)
  (path (:pointer (:pointer char)))
  (length (:pointer int)))

(defglextfun ("glIsNamedStringARB" is-named-string-arb) boolean
  (namelen int)
  (name (:pointer char)))

(defglextfun ("glGetNamedStringARB" get-named-string-arb) :void
  (namelen int)
  (name (:pointer char))
  (bufSize sizei)
  (stringlen (:pointer int))
  (string (:pointer char)))

(defglextfun ("glGetNamedStringivARB" get-named-string-iv-arb) :void
  (namelen int)
  (name (:pointer char))
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glBufferPageCommitmentARB" buffer-page-commitment-arb) :void
  (target enum)
  (offset intptr)
  (size sizeiptr)
  (commit boolean))

(defglextfun ("glNamedBufferPageCommitmentEXT" named-buffer-page-commitment-ext) :void
  (buffer uint)
  (offset intptr)
  (size sizeiptr)
  (commit boolean))

(defglextfun ("glNamedBufferPageCommitmentARB" named-buffer-page-commitment-arb) :void
  (buffer uint)
  (offset intptr)
  (size sizeiptr)
  (commit boolean))

(defglextfun ("glTexPageCommitmentARB" tex-page-commitment-arb) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (resident boolean))


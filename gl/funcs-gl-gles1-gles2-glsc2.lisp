;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2016 The Khronos Group Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a
;;; copy of this software and/or associated documentation files (the
;;; "Materials"), to deal in the Materials without restriction, including
;;; without limitation the rights to use, copy, modify, merge, publish,
;;; distribute, sublicense, and/or sell copies of the Materials, and to
;;; permit persons to whom the Materials are furnished to do so, subject to
;;; the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included
;;; in all copies or substantial portions of the Materials.
;;;
;;; THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;;; MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2016-11-02T03:17:18Z
;;; from gl.xml @ svn rev 33260, 2016-10-27T10:38:44.798295Z

(defglfun ("glCullFace" cull-face) :void
  (mode enum))

(defglfun ("glFrontFace" front-face) :void
  (mode enum))

(defglfun ("glHint" hint) :void
  (target enum)
  (mode enum))

(defglfun ("glLineWidth" line-width) :void
  (width float))

(defglfun ("glScissor" scissor) :void
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglfun ("glTexParameterf" tex-parameter-f) :void
  (target enum)
  (pname enum)
  (param float))

(defglfun ("glTexParameterfv" tex-parameter-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glTexParameteri" tex-parameter-i) :void
  (target enum)
  (pname enum)
  (param int))

(defglfun ("glTexParameteriv" tex-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glClear" clear) :void
  (mask ClearBufferMask))

(defglfun ("glClearColor" clear-color) :void
  (red float)
  (green float)
  (blue float)
  (alpha float))

(defglfun ("glClearStencil" clear-stencil) :void
  (s int))

(defglfun ("glStencilMask" stencil-mask) :void
  (mask uint))

(defglfun ("glColorMask" color-mask) :void
  (red boolean)
  (green boolean)
  (blue boolean)
  (alpha boolean))

(defglfun ("glDepthMask" depth-mask) :void
  (flag boolean))

(defglfun ("glDisable" disable) :void
  (cap enum))

(defglfun ("glEnable" enable) :void
  (cap enum))

(defglfun ("glFinish" finish) :void)

(defglfun ("glFlush" flush) :void)

(defglfun ("glBlendFunc" blend-func) :void
  (sfactor enum)
  (dfactor enum))

(defglfun ("glStencilFunc" stencil-func) :void
  (func enum)
  (ref int)
  (mask uint))

(defglfun ("glStencilOp" stencil-op) :void
  (fail enum)
  (zfail enum)
  (zpass enum))

(defglfun ("glDepthFunc" depth-func) :void
  (func enum))

(defglfun ("glPixelStorei" pixel-store-i) :void
  (pname enum)
  (param int))

(defglfun ("glGetBooleanv" get-boolean-v) :void
  (pname enum)
  (data (:pointer boolean)))

(defglfun ("glGetError" get-error) enum)

(defglfun ("glGetFloatv" get-float-v) :void
  (pname enum)
  (data (:pointer float)))

(defglfun ("glGetIntegerv" get-integer-v) :void
  (pname enum)
  (data (:pointer int)))

(defglfun ("glGetString" get-string) string
  (name enum))

(defglfun ("glGetTexParameterfv" get-tex-parameter-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glGetTexParameteriv" get-tex-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glIsEnabled" is-enabled) boolean
  (cap enum))

(defglfun ("glViewport" viewport) :void
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglfun ("glDrawArrays" draw-arrays) :void
  (mode enum)
  (first int)
  (count sizei))

(defglfun ("glPolygonOffset" polygon-offset) :void
  (factor float)
  (units float))

(defglfun ("glTexSubImage2D" tex-sub-image-2d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglfun ("glBindTexture" bind-texture) :void
  (target enum)
  (texture uint))

(defglfun ("glGenTextures" gen-textures) :void
  (n sizei)
  (textures (:pointer uint)))

(defglextfun ("glActiveTexture" active-texture) :void
  (texture enum))

(defglextfun ("glSampleCoverage" sample-coverage) :void
  (value float)
  (invert boolean))

(defglextfun ("glCompressedTexSubImage2D" compressed-tex-sub-image-2d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (imageSize sizei)
  (data offset-or-pointer))

(defglextfun ("glBindBuffer" bind-buffer) :void
  (target enum)
  (buffer uint))

(defglextfun ("glGenBuffers" gen-buffers) :void
  (n sizei)
  (buffers (:pointer uint)))

(defglextfun ("glBufferData" buffer-data) :void
  (target enum)
  (size sizeiptr)
  (data (:pointer :void))
  (usage enum))

(defglextfun ("glBufferSubData" buffer-sub-data) :void
  (target enum)
  (offset intptr)
  (size sizeiptr)
  (data (:pointer :void)))

(defglextfun ("glGetBufferParameteriv" get-buffer-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))


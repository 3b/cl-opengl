;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2017 The Khronos Group Inc.
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2017-10-04T20:14:06Z
;;; from gl.xml @ git sha 2c8fa02871abd4102bd03d09d42645cce20c468f, 2017-10-03T15:09:09Z

(defglfun ("glCullFace" cull-face) :void
  (mode enum))

(defglfun ("glFrontFace" front-face) :void
  (mode enum))

(defglfun ("glHint" hint) :void
  (target enum)
  (mode enum))

(defglfun ("glLineWidth" line-width) :void
  (width float))

(defglfun ("glScissor" scissor) :void
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglfun ("glTexParameterf" tex-parameter-f) :void
  (target enum)
  (pname enum)
  (param float))

(defglfun ("glTexParameterfv" tex-parameter-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glTexParameteri" tex-parameter-i) :void
  (target enum)
  (pname enum)
  (param int))

(defglfun ("glTexParameteriv" tex-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glClear" clear) :void
  (mask ClearBufferMask))

(defglfun ("glClearColor" clear-color) :void
  (red float)
  (green float)
  (blue float)
  (alpha float))

(defglfun ("glClearStencil" clear-stencil) :void
  (s int))

(defglfun ("glStencilMask" stencil-mask) :void
  (mask uint))

(defglfun ("glColorMask" color-mask) :void
  (red boolean)
  (green boolean)
  (blue boolean)
  (alpha boolean))

(defglfun ("glDepthMask" depth-mask) :void
  (flag boolean))

(defglfun ("glDisable" disable) :void
  (cap enum))

(defglfun ("glEnable" enable) :void
  (cap enum))

(defglfun ("glFinish" finish) :void)

(defglfun ("glFlush" flush) :void)

(defglfun ("glBlendFunc" blend-func) :void
  (sfactor enum)
  (dfactor enum))

(defglfun ("glStencilFunc" stencil-func) :void
  (func enum)
  (ref int)
  (mask uint))

(defglfun ("glStencilOp" stencil-op) :void
  (fail enum)
  (zfail enum)
  (zpass enum))

(defglfun ("glDepthFunc" depth-func) :void
  (func enum))

(defglfun ("glPixelStorei" pixel-store-i) :void
  (pname enum)
  (param int))

(defglfun ("glGetBooleanv" get-boolean-v) :void
  (pname enum)
  (data (:pointer boolean)))

(defglfun ("glGetError" get-error) enum)

(defglfun ("glGetFloatv" get-float-v) :void
  (pname enum)
  (data (:pointer float)))

(defglfun ("glGetIntegerv" get-integer-v) :void
  (pname enum)
  (data (:pointer int)))

(defglfun ("glGetString" get-string) string
  (name enum))

(defglfun ("glGetTexParameterfv" get-tex-parameter-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glGetTexParameteriv" get-tex-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glIsEnabled" is-enabled) boolean
  (cap enum))

(defglfun ("glViewport" viewport) :void
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglfun ("glDrawArrays" draw-arrays) :void
  (mode enum)
  (first int)
  (count sizei))

(defglfun ("glPolygonOffset" polygon-offset) :void
  (factor float)
  (units float))

(defglfun ("glTexSubImage2D" tex-sub-image-2d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglfun ("glBindTexture" bind-texture) :void
  (target enum)
  (texture uint))

(defglfun ("glGenTextures" gen-textures) :void
  (n sizei)
  (textures (:pointer uint)))

(defglextfun ("glActiveTexture" active-texture) :void
  (texture enum))

(defglextfun ("glSampleCoverage" sample-coverage) :void
  (value float)
  (invert boolean))

(defglextfun ("glCompressedTexSubImage2D" compressed-tex-sub-image-2d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (imageSize sizei)
  (data offset-or-pointer))

(defglextfun ("glBindBuffer" bind-buffer) :void
  (target enum)
  (buffer uint))

(defglextfun ("glGenBuffers" gen-buffers) :void
  (n sizei)
  (buffers (:pointer uint)))

(defglextfun ("glBufferData" buffer-data) :void
  (target enum)
  (size sizeiptr)
  (data (:pointer :void))
  (usage enum))

(defglextfun ("glBufferSubData" buffer-sub-data) :void
  (target enum)
  (offset intptr)
  (size sizeiptr)
  (data (:pointer :void)))

(defglextfun ("glGetBufferParameteriv" get-buffer-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))


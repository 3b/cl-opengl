;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013 The Khronos Group Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a
;;; copy of this software and/or associated documentation files (the
;;; "Materials"), to deal in the Materials without restriction, including
;;; without limitation the rights to use, copy, modify, merge, publish,
;;; distribute, sublicense, and/or sell copies of the Materials, and to
;;; permit persons to whom the Materials are furnished to do so, subject to
;;; the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included
;;; in all copies or substantial portions of the Materials.
;;;
;;; THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;;; MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2013-08-25T10:55:36Z
;;; from gl.xml @ svn rev 22836, 2013-08-23T22:13:48.757953Z

(defglextfun ("glBlendColor" blend-color) :void
  (red float)
  (green float)
  (blue float)
  (alpha float))

(defglextfun ("glBlendEquation" blend-equation) :void
  (mode enum))

(defglextfun ("glIsRenderbuffer" is-renderbuffer) boolean
  (renderbuffer uint))

(defglextfun ("glBindRenderbuffer" bind-renderbuffer) :void
  (target enum)
  (renderbuffer uint))

(defglextfun ("glDeleteRenderbuffers" delete-renderbuffers) :void
  (n sizei)
  (renderbuffers (:pointer uint)))

(defglextfun ("glGenRenderbuffers" gen-renderbuffers) :void
  (n sizei)
  (renderbuffers (:pointer uint)))

(defglextfun ("glRenderbufferStorage" renderbuffer-storage) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glGetRenderbufferParameteriv" get-renderbuffer-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glIsFramebuffer" is-framebuffer) boolean
  (framebuffer uint))

(defglextfun ("glBindFramebuffer" bind-framebuffer) :void
  (target enum)
  (framebuffer uint))

(defglextfun ("glDeleteFramebuffers" delete-framebuffers) :void
  (n sizei)
  (framebuffers (:pointer uint)))

(defglextfun ("glGenFramebuffers" gen-framebuffers) :void
  (n sizei)
  (framebuffers (:pointer uint)))

(defglextfun ("glCheckFramebufferStatus" check-framebuffer-status) enum
  (target enum))

(defglextfun ("glFramebufferTexture2D" framebuffer-texture-2d) :void
  (target enum)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int))

(defglextfun ("glFramebufferRenderbuffer" framebuffer-renderbuffer) :void
  (target enum)
  (attachment enum)
  (renderbuffertarget enum)
  (renderbuffer uint))

(defglextfun ("glGetFramebufferAttachmentParameteriv" get-framebuffer-attachment-parameter-iv) :void
  (target enum)
  (attachment enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGenerateMipmap" generate-mipmap) :void
  (target enum))

(defglextfun ("glBlitFramebuffer" blit-framebuffer) :void
  (srcX0 int)
  (srcY0 int)
  (srcX1 int)
  (srcY1 int)
  (dstX0 int)
  (dstY0 int)
  (dstX1 int)
  (dstY1 int)
  (mask ClearBufferMask)
  (filter enum))

(defglextfun ("glRenderbufferStorageMultisample" renderbuffer-storage-multisample) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glFramebufferTextureLayer" framebuffer-texture-layer) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int)
  (layer int))

(defglextfun ("glMapBufferRange" map-buffer-range) (:pointer :void)
  (target enum)
  (offset intptr)
  (length sizeiptr)
  (access bitfield))

(defglextfun ("glFlushMappedBufferRange" flush-mapped-buffer-range) :void
  (target enum)
  (offset intptr)
  (length sizeiptr))

(defglextfun ("glBindVertexArray" bind-vertex-array) :void
  (array uint))

(defglextfun ("glDeleteVertexArrays" delete-vertex-arrays) :void
  (n sizei)
  (arrays (:pointer uint)))

(defglextfun ("glGenVertexArrays" gen-vertex-arrays) :void
  (n sizei)
  (arrays (:pointer uint)))

(defglextfun ("glIsVertexArray" is-vertex-array) boolean
  (array uint))

(defglextfun ("glCopyBufferSubData" copy-buffer-sub-data) :void
  (readTarget enum)
  (writeTarget enum)
  (readOffset intptr)
  (writeOffset intptr)
  (size sizeiptr))

(defglextfun ("glGetUniformIndices" get-uniform-indices) :void
  (program uint)
  (uniformCount sizei)
  (uniformNames (:pointer (:pointer char)))
  (uniformIndices (:pointer uint)))

(defglextfun ("glGetActiveUniformsiv" get-active-uniforms-iv) :void
  (program uint)
  (uniformCount sizei)
  (uniformIndices (:pointer uint))
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetUniformBlockIndex" get-uniform-block-index) uint
  (program uint)
  (uniformBlockName (:pointer char)))

(defglextfun ("glGetActiveUniformBlockiv" get-active-uniform-block-iv) :void
  (program uint)
  (uniformBlockIndex uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetActiveUniformBlockName" get-active-uniform-block-name) :void
  (program uint)
  (uniformBlockIndex uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (uniformBlockName (:pointer char)))

(defglextfun ("glUniformBlockBinding" uniform-block-binding) :void
  (program uint)
  (uniformBlockIndex uint)
  (uniformBlockBinding uint))

(defglextfun ("glFenceSync" fence-sync) sync
  (condition enum)
  (flags bitfield))

(defglextfun ("glIsSync" is-sync) boolean
  (sync sync))

(defglextfun ("glDeleteSync" delete-sync) :void
  (sync sync))

(defglextfun ("glClientWaitSync" client-wait-sync) enum
  (sync sync)
  (flags bitfield)
  (timeout uint64))

(defglextfun ("glWaitSync" wait-sync) :void
  (sync sync)
  (flags bitfield)
  (timeout uint64))

(defglextfun ("glGetInteger64v" get-integer-64-v) :void
  (pname enum)
  (params (:pointer int64)))

(defglextfun ("glGetSynciv" get-sync-iv) :void
  (sync sync)
  (pname enum)
  (bufSize sizei)
  (length (:pointer sizei))
  (values (:pointer int)))

(defglextfun ("glGenSamplers" gen-samplers) :void
  (count sizei)
  (samplers (:pointer uint)))

(defglextfun ("glDeleteSamplers" delete-samplers) :void
  (count sizei)
  (samplers (:pointer uint)))

(defglextfun ("glIsSampler" is-sampler) boolean
  (sampler uint))

(defglextfun ("glBindSampler" bind-sampler) :void
  (unit uint)
  (sampler uint))

(defglextfun ("glSamplerParameteri" sampler-parameter-i) :void
  (sampler uint)
  (pname enum)
  (param int))

(defglextfun ("glSamplerParameteriv" sampler-parameter-iv) :void
  (sampler uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glSamplerParameterf" sampler-parameter-f) :void
  (sampler uint)
  (pname enum)
  (param float))

(defglextfun ("glSamplerParameterfv" sampler-parameter-fv) :void
  (sampler uint)
  (pname enum)
  (param (:pointer float)))

(defglextfun ("glGetSamplerParameteriv" get-sampler-parameter-iv) :void
  (sampler uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetSamplerParameterfv" get-sampler-parameter-fv) :void
  (sampler uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glBindTransformFeedback" bind-transform-feedback) :void
  (target enum)
  (id uint))

(defglextfun ("glDeleteTransformFeedbacks" delete-transform-feedbacks) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glGenTransformFeedbacks" gen-transform-feedbacks) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glIsTransformFeedback" is-transform-feedback) boolean
  (id uint))

(defglextfun ("glPauseTransformFeedback" pause-transform-feedback) :void)

(defglextfun ("glResumeTransformFeedback" resume-transform-feedback) :void)

(defglextfun ("glReleaseShaderCompiler" release-shader-compiler) :void)

(defglextfun ("glShaderBinary" shader-binary) :void
  (count sizei)
  (shaders (:pointer uint))
  (binaryformat enum)
  (binary (:pointer void))
  (length sizei))

(defglextfun ("glGetShaderPrecisionFormat" get-shader-precision-format) :void
  (shadertype enum)
  (precisiontype enum)
  (range (:pointer int))
  (precision (:pointer int)))

(defglextfun ("glGetProgramBinary" get-program-binary) :void
  (program uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (binaryFormat (:pointer enum))
  (binary (:pointer void)))

(defglextfun ("glProgramBinary" program-binary) :void
  (program uint)
  (binaryFormat enum)
  (binary (:pointer void))
  (length sizei))

(defglextfun ("glProgramParameteri" program-parameter-i) :void
  (program uint)
  (pname enum)
  (value int))

(defglextfun ("glGetInternalformativ" get-internal-format-iv) :void
  (target enum)
  (internalformat enum)
  (pname enum)
  (bufSize sizei)
  (params (:pointer int)))

(defglextfun ("glTexStorage2D" tex-storage-2d) :void
  (target enum)
  (levels sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glTexStorage3D" tex-storage-3d) :void
  (target enum)
  (levels sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei))

(defglextfun ("glInvalidateFramebuffer" invalidate-framebuffer) :void
  (target enum)
  (numAttachments sizei)
  (attachments (:pointer enum)))

(defglextfun ("glInvalidateSubFramebuffer" invalidate-sub-framebuffer) :void
  (target enum)
  (numAttachments sizei)
  (attachments (:pointer enum))
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glDebugMessageControl" debug-message-control) :void
  (source enum)
  (type enum)
  (severity enum)
  (count sizei)
  (ids (:pointer uint))
  (enabled boolean))

(defglextfun ("glDebugMessageInsert" debug-message-insert) :void
  (source enum)
  (type enum)
  (id uint)
  (severity enum)
  (length sizei)
  (buf (:pointer char)))

(defglextfun ("glDebugMessageCallback" debug-message-callback) :void
  (callback debugproc)
  (userParam (:pointer :void)))

(defglextfun ("glGetDebugMessageLog" get-debug-message-log) uint
  (count uint)
  (bufsize sizei)
  (sources (:pointer enum))
  (types (:pointer enum))
  (ids (:pointer uint))
  (severities (:pointer enum))
  (lengths (:pointer sizei))
  (messageLog (:pointer char)))

(defglextfun ("glPushDebugGroup" push-debug-group) :void
  (source enum)
  (id uint)
  (length sizei)
  (message (:pointer char)))

(defglextfun ("glPopDebugGroup" pop-debug-group) :void)

(defglextfun ("glObjectLabel" object-label) :void
  (identifier enum)
  (name uint)
  (length sizei)
  (label (:pointer char)))

(defglextfun ("glGetObjectLabel" get-object-label) :void
  (identifier enum)
  (name uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (label (:pointer char)))

(defglextfun ("glObjectPtrLabel" object-ptr-label) :void
  (ptr (:pointer :void))
  (length sizei)
  (label (:pointer char)))

(defglextfun ("glGetObjectPtrLabel" get-object-ptr-label) :void
  (ptr (:pointer :void))
  (bufSize sizei)
  (length (:pointer sizei))
  (label (:pointer char)))

(defglextfun ("glDebugMessageControlKHR" debug-message-control-khr) :void
  (source enum)
  (type enum)
  (severity enum)
  (count sizei)
  (ids (:pointer uint))
  (enabled boolean))

(defglextfun ("glDebugMessageInsertKHR" debug-message-insert-khr) :void
  (source enum)
  (type enum)
  (id uint)
  (severity enum)
  (length sizei)
  (buf (:pointer char)))

(defglextfun ("glDebugMessageCallbackKHR" debug-message-callback-khr) :void
  (callback debugprockhr)
  (userParam (:pointer :void)))

(defglextfun ("glGetDebugMessageLogKHR" get-debug-message-log-khr) uint
  (count uint)
  (bufsize sizei)
  (sources (:pointer enum))
  (types (:pointer enum))
  (ids (:pointer uint))
  (severities (:pointer enum))
  (lengths (:pointer sizei))
  (messageLog (:pointer char)))

(defglextfun ("glPushDebugGroupKHR" push-debug-group-khr) :void
  (source enum)
  (id uint)
  (length sizei)
  (message (:pointer char)))

(defglextfun ("glPopDebugGroupKHR" pop-debug-group-khr) :void)

(defglextfun ("glObjectLabelKHR" object-label-khr) :void
  (identifier enum)
  (name uint)
  (length sizei)
  (label (:pointer char)))

(defglextfun ("glGetObjectLabelKHR" get-object-label-khr) :void
  (identifier enum)
  (name uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (label (:pointer char)))

(defglextfun ("glObjectPtrLabelKHR" object-ptr-label-khr) :void
  (ptr (:pointer :void))
  (length sizei)
  (label (:pointer char)))

(defglextfun ("glGetObjectPtrLabelKHR" get-object-ptr-label-khr) :void
  (ptr (:pointer :void))
  (bufSize sizei)
  (length (:pointer sizei))
  (label (:pointer char)))

(defglextfun ("glGetPointervKHR" get-pointer-v-khr) :void
  (pname enum)
  (params (:pointer (:pointer void))))


;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2017 The Khronos Group Inc.
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2017-10-04T20:14:06Z
;;; from gl.xml @ git sha 2c8fa02871abd4102bd03d09d42645cce20c468f, 2017-10-03T15:09:09Z

(defglextfun ("glBlendColor" blend-color) :void
  (red float)
  (green float)
  (blue float)
  (alpha float))

(defglextfun ("glBlendEquation" blend-equation) :void
  (mode enum))

(defglextfun ("glBindRenderbuffer" bind-renderbuffer) :void
  (target enum)
  (renderbuffer uint))

(defglextfun ("glGenRenderbuffers" gen-renderbuffers) :void
  (n sizei)
  (renderbuffers (:pointer uint)))

(defglextfun ("glRenderbufferStorage" renderbuffer-storage) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glGetRenderbufferParameteriv" get-renderbuffer-parameter-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glBindFramebuffer" bind-framebuffer) :void
  (target enum)
  (framebuffer uint))

(defglextfun ("glGenFramebuffers" gen-framebuffers) :void
  (n sizei)
  (framebuffers (:pointer uint)))

(defglextfun ("glCheckFramebufferStatus" check-framebuffer-status) enum
  (target enum))

(defglextfun ("glFramebufferTexture2D" framebuffer-texture-2d) :void
  (target enum)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int))

(defglextfun ("glFramebufferRenderbuffer" framebuffer-renderbuffer) :void
  (target enum)
  (attachment enum)
  (renderbuffertarget enum)
  (renderbuffer uint))

(defglextfun ("glGetFramebufferAttachmentParameteriv" get-framebuffer-attachment-parameter-iv) :void
  (target enum)
  (attachment enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGenerateMipmap" generate-mipmap) :void
  (target enum))

(defglextfun ("glProgramBinary" program-binary) :void
  (program uint)
  (binaryFormat enum)
  (binary (:pointer :void))
  (length sizei))

(defglextfun ("glTexStorage2D" tex-storage-2d) :void
  (target enum)
  (levels sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glGetGraphicsResetStatus" get-graphics-reset-status) enum)

(defglextfun ("glGetnUniformfv" getn-uniform-fv) :void
  (program uint)
  (location int)
  (bufSize sizei)
  (params (:pointer float)))

(defglextfun ("glGetnUniformiv" getn-uniform-iv) :void
  (program uint)
  (location int)
  (bufSize sizei)
  (params (:pointer int)))

(defglextfun ("glReadnPixels" readn-pixels) :void
  (x int)
  (y int)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (bufSize sizei)
  (data (:pointer :void)))


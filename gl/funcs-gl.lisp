;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2014 The Khronos Group Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a
;;; copy of this software and/or associated documentation files (the
;;; "Materials"), to deal in the Materials without restriction, including
;;; without limitation the rights to use, copy, modify, merge, publish,
;;; distribute, sublicense, and/or sell copies of the Materials, and to
;;; permit persons to whom the Materials are furnished to do so, subject to
;;; the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included
;;; in all copies or substantial portions of the Materials.
;;;
;;; THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;;; MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2014-09-28T21:05:19Z
;;; from gl.xml @ svn rev 28221, 2014-09-19T03:11:05.177262Z

(defglfun ("glPolygonMode" polygon-mode) :void
  (face enum)
  (mode enum))

(defglfun ("glTexImage1D" tex-image-1d) :void
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglfun ("glDrawBuffer" draw-buffer) :void
  (buf enum))

(defglfun ("glClearDepth" clear-depth) :void
  (depth double))

(defglfun ("glPixelStoref" pixel-store-f) :void
  (pname enum)
  (param float))

(defglfun ("glGetDoublev" get-double-v) :void
  (pname enum)
  (data (:pointer double)))

(defglfun ("glGetTexImage" get-tex-image) :void
  (target enum)
  (level int)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglfun ("glDepthRange" depth-range) :void
  (near double)
  (far double))

(defglfun ("glNewList" new-list) :void
  (list uint)
  (mode enum))

(defglfun ("glEndList" end-list) :void)

(defglfun ("glCallList" call-list) :void
  (list uint))

(defglfun ("glCallLists" call-lists) :void
  (n sizei)
  (type enum)
  (lists (:pointer :void)))

(defglfun ("glDeleteLists" delete-lists) :void
  (list uint)
  (range sizei))

(defglfun ("glGenLists" gen-lists) uint
  (range sizei))

(defglfun ("glListBase" list-base) :void
  (base uint))

(defglfun ("glBegin" begin) :void
  (mode enum))

(defglfun ("glBitmap" bitmap) :void
  (width sizei)
  (height sizei)
  (xorig float)
  (yorig float)
  (xmove float)
  (ymove float)
  (bitmap offset-or-pointer))

(defglfun ("glColor3b" color-3b) :void
  (red byte)
  (green byte)
  (blue byte))

(defglfun ("glColor3bv" color-3bv) :void
  (v (:pointer byte)))

(defglfun ("glColor3d" color-3d) :void
  (red double)
  (green double)
  (blue double))

(defglfun ("glColor3dv" color-3dv) :void
  (v (:pointer double)))

(defglfun ("glColor3f" color-3f) :void
  (red float)
  (green float)
  (blue float))

(defglfun ("glColor3fv" color-3fv) :void
  (v (:pointer float)))

(defglfun ("glColor3i" color-3i) :void
  (red int)
  (green int)
  (blue int))

(defglfun ("glColor3iv" color-3iv) :void
  (v (:pointer int)))

(defglfun ("glColor3s" color-3s) :void
  (red short)
  (green short)
  (blue short))

(defglfun ("glColor3sv" color-3sv) :void
  (v (:pointer short)))

(defglfun ("glColor3ub" color-3ub) :void
  (red ubyte)
  (green ubyte)
  (blue ubyte))

(defglfun ("glColor3ubv" color-3ubv) :void
  (v (:pointer ubyte)))

(defglfun ("glColor3ui" color-3ui) :void
  (red uint)
  (green uint)
  (blue uint))

(defglfun ("glColor3uiv" color-3uiv) :void
  (v (:pointer uint)))

(defglfun ("glColor3us" color-3us) :void
  (red ushort)
  (green ushort)
  (blue ushort))

(defglfun ("glColor3usv" color-3usv) :void
  (v (:pointer ushort)))

(defglfun ("glColor4b" color-4b) :void
  (red byte)
  (green byte)
  (blue byte)
  (alpha byte))

(defglfun ("glColor4bv" color-4bv) :void
  (v (:pointer byte)))

(defglfun ("glColor4d" color-4d) :void
  (red double)
  (green double)
  (blue double)
  (alpha double))

(defglfun ("glColor4dv" color-4dv) :void
  (v (:pointer double)))

(defglfun ("glColor4fv" color-4fv) :void
  (v (:pointer float)))

(defglfun ("glColor4i" color-4i) :void
  (red int)
  (green int)
  (blue int)
  (alpha int))

(defglfun ("glColor4iv" color-4iv) :void
  (v (:pointer int)))

(defglfun ("glColor4s" color-4s) :void
  (red short)
  (green short)
  (blue short)
  (alpha short))

(defglfun ("glColor4sv" color-4sv) :void
  (v (:pointer short)))

(defglfun ("glColor4ubv" color-4ubv) :void
  (v (:pointer ubyte)))

(defglfun ("glColor4ui" color-4ui) :void
  (red uint)
  (green uint)
  (blue uint)
  (alpha uint))

(defglfun ("glColor4uiv" color-4uiv) :void
  (v (:pointer uint)))

(defglfun ("glColor4us" color-4us) :void
  (red ushort)
  (green ushort)
  (blue ushort)
  (alpha ushort))

(defglfun ("glColor4usv" color-4usv) :void
  (v (:pointer ushort)))

(defglfun ("glEdgeFlag" edge-flag) :void
  (flag boolean))

(defglfun ("glEdgeFlagv" edge-flag-v) :void
  (flag (:pointer boolean)))

(defglfun ("glEnd" end) :void)

(defglfun ("glIndexd" index-d) :void
  (c double))

(defglfun ("glIndexdv" index-dv) :void
  (c (:pointer double)))

(defglfun ("glIndexf" index-f) :void
  (c float))

(defglfun ("glIndexfv" index-fv) :void
  (c (:pointer float)))

(defglfun ("glIndexi" index-i) :void
  (c int))

(defglfun ("glIndexiv" index-iv) :void
  (c (:pointer int)))

(defglfun ("glIndexs" index-s) :void
  (c short))

(defglfun ("glIndexsv" index-sv) :void
  (c (:pointer short)))

(defglfun ("glNormal3b" normal-3b) :void
  (nx byte)
  (ny byte)
  (nz byte))

(defglfun ("glNormal3bv" normal-3bv) :void
  (v (:pointer byte)))

(defglfun ("glNormal3d" normal-3d) :void
  (nx double)
  (ny double)
  (nz double))

(defglfun ("glNormal3dv" normal-3dv) :void
  (v (:pointer double)))

(defglfun ("glNormal3fv" normal-3fv) :void
  (v (:pointer float)))

(defglfun ("glNormal3i" normal-3i) :void
  (nx int)
  (ny int)
  (nz int))

(defglfun ("glNormal3iv" normal-3iv) :void
  (v (:pointer int)))

(defglfun ("glNormal3s" normal-3s) :void
  (nx short)
  (ny short)
  (nz short))

(defglfun ("glNormal3sv" normal-3sv) :void
  (v (:pointer short)))

(defglfun ("glRasterPos2d" raster-pos-2d) :void
  (x double)
  (y double))

(defglfun ("glRasterPos2dv" raster-pos-2dv) :void
  (v (:pointer double)))

(defglfun ("glRasterPos2f" raster-pos-2f) :void
  (x float)
  (y float))

(defglfun ("glRasterPos2fv" raster-pos-2fv) :void
  (v (:pointer float)))

(defglfun ("glRasterPos2i" raster-pos-2i) :void
  (x int)
  (y int))

(defglfun ("glRasterPos2iv" raster-pos-2iv) :void
  (v (:pointer int)))

(defglfun ("glRasterPos2s" raster-pos-2s) :void
  (x short)
  (y short))

(defglfun ("glRasterPos2sv" raster-pos-2sv) :void
  (v (:pointer short)))

(defglfun ("glRasterPos3d" raster-pos-3d) :void
  (x double)
  (y double)
  (z double))

(defglfun ("glRasterPos3dv" raster-pos-3dv) :void
  (v (:pointer double)))

(defglfun ("glRasterPos3f" raster-pos-3f) :void
  (x float)
  (y float)
  (z float))

(defglfun ("glRasterPos3fv" raster-pos-3fv) :void
  (v (:pointer float)))

(defglfun ("glRasterPos3i" raster-pos-3i) :void
  (x int)
  (y int)
  (z int))

(defglfun ("glRasterPos3iv" raster-pos-3iv) :void
  (v (:pointer int)))

(defglfun ("glRasterPos3s" raster-pos-3s) :void
  (x short)
  (y short)
  (z short))

(defglfun ("glRasterPos3sv" raster-pos-3sv) :void
  (v (:pointer short)))

(defglfun ("glRasterPos4d" raster-pos-4d) :void
  (x double)
  (y double)
  (z double)
  (w double))

(defglfun ("glRasterPos4dv" raster-pos-4dv) :void
  (v (:pointer double)))

(defglfun ("glRasterPos4f" raster-pos-4f) :void
  (x float)
  (y float)
  (z float)
  (w float))

(defglfun ("glRasterPos4fv" raster-pos-4fv) :void
  (v (:pointer float)))

(defglfun ("glRasterPos4i" raster-pos-4i) :void
  (x int)
  (y int)
  (z int)
  (w int))

(defglfun ("glRasterPos4iv" raster-pos-4iv) :void
  (v (:pointer int)))

(defglfun ("glRasterPos4s" raster-pos-4s) :void
  (x short)
  (y short)
  (z short)
  (w short))

(defglfun ("glRasterPos4sv" raster-pos-4sv) :void
  (v (:pointer short)))

(defglfun ("glRectd" rect-d) :void
  (x1 double)
  (y1 double)
  (x2 double)
  (y2 double))

(defglfun ("glRectdv" rect-dv) :void
  (v1 (:pointer double))
  (v2 (:pointer double)))

(defglfun ("glRectf" rect-f) :void
  (x1 float)
  (y1 float)
  (x2 float)
  (y2 float))

(defglfun ("glRectfv" rect-fv) :void
  (v1 (:pointer float))
  (v2 (:pointer float)))

(defglfun ("glRecti" rect-i) :void
  (x1 int)
  (y1 int)
  (x2 int)
  (y2 int))

(defglfun ("glRectiv" rect-iv) :void
  (v1 (:pointer int))
  (v2 (:pointer int)))

(defglfun ("glRects" rect-s) :void
  (x1 short)
  (y1 short)
  (x2 short)
  (y2 short))

(defglfun ("glRectsv" rect-sv) :void
  (v1 (:pointer short))
  (v2 (:pointer short)))

(defglfun ("glTexCoord1d" tex-coord-1d) :void
  (s double))

(defglfun ("glTexCoord1dv" tex-coord-1dv) :void
  (v (:pointer double)))

(defglfun ("glTexCoord1f" tex-coord-1f) :void
  (s float))

(defglfun ("glTexCoord1fv" tex-coord-1fv) :void
  (v (:pointer float)))

(defglfun ("glTexCoord1i" tex-coord-1i) :void
  (s int))

(defglfun ("glTexCoord1iv" tex-coord-1iv) :void
  (v (:pointer int)))

(defglfun ("glTexCoord1s" tex-coord-1s) :void
  (s short))

(defglfun ("glTexCoord1sv" tex-coord-1sv) :void
  (v (:pointer short)))

(defglfun ("glTexCoord2d" tex-coord-2d) :void
  (s double)
  (tee double))

(defglfun ("glTexCoord2dv" tex-coord-2dv) :void
  (v (:pointer double)))

(defglfun ("glTexCoord2f" tex-coord-2f) :void
  (s float)
  (tee float))

(defglfun ("glTexCoord2fv" tex-coord-2fv) :void
  (v (:pointer float)))

(defglfun ("glTexCoord2i" tex-coord-2i) :void
  (s int)
  (tee int))

(defglfun ("glTexCoord2iv" tex-coord-2iv) :void
  (v (:pointer int)))

(defglfun ("glTexCoord2s" tex-coord-2s) :void
  (s short)
  (tee short))

(defglfun ("glTexCoord2sv" tex-coord-2sv) :void
  (v (:pointer short)))

(defglfun ("glTexCoord3d" tex-coord-3d) :void
  (s double)
  (tee double)
  (r double))

(defglfun ("glTexCoord3dv" tex-coord-3dv) :void
  (v (:pointer double)))

(defglfun ("glTexCoord3f" tex-coord-3f) :void
  (s float)
  (tee float)
  (r float))

(defglfun ("glTexCoord3fv" tex-coord-3fv) :void
  (v (:pointer float)))

(defglfun ("glTexCoord3i" tex-coord-3i) :void
  (s int)
  (tee int)
  (r int))

(defglfun ("glTexCoord3iv" tex-coord-3iv) :void
  (v (:pointer int)))

(defglfun ("glTexCoord3s" tex-coord-3s) :void
  (s short)
  (tee short)
  (r short))

(defglfun ("glTexCoord3sv" tex-coord-3sv) :void
  (v (:pointer short)))

(defglfun ("glTexCoord4d" tex-coord-4d) :void
  (s double)
  (tee double)
  (r double)
  (q double))

(defglfun ("glTexCoord4dv" tex-coord-4dv) :void
  (v (:pointer double)))

(defglfun ("glTexCoord4f" tex-coord-4f) :void
  (s float)
  (tee float)
  (r float)
  (q float))

(defglfun ("glTexCoord4fv" tex-coord-4fv) :void
  (v (:pointer float)))

(defglfun ("glTexCoord4i" tex-coord-4i) :void
  (s int)
  (tee int)
  (r int)
  (q int))

(defglfun ("glTexCoord4iv" tex-coord-4iv) :void
  (v (:pointer int)))

(defglfun ("glTexCoord4s" tex-coord-4s) :void
  (s short)
  (tee short)
  (r short)
  (q short))

(defglfun ("glTexCoord4sv" tex-coord-4sv) :void
  (v (:pointer short)))

(defglfun ("glVertex2d" vertex-2d) :void
  (x double)
  (y double))

(defglfun ("glVertex2dv" vertex-2dv) :void
  (v (:pointer double)))

(defglfun ("glVertex2f" vertex-2f) :void
  (x float)
  (y float))

(defglfun ("glVertex2fv" vertex-2fv) :void
  (v (:pointer float)))

(defglfun ("glVertex2i" vertex-2i) :void
  (x int)
  (y int))

(defglfun ("glVertex2iv" vertex-2iv) :void
  (v (:pointer int)))

(defglfun ("glVertex2s" vertex-2s) :void
  (x short)
  (y short))

(defglfun ("glVertex2sv" vertex-2sv) :void
  (v (:pointer short)))

(defglfun ("glVertex3d" vertex-3d) :void
  (x double)
  (y double)
  (z double))

(defglfun ("glVertex3dv" vertex-3dv) :void
  (v (:pointer double)))

(defglfun ("glVertex3f" vertex-3f) :void
  (x float)
  (y float)
  (z float))

(defglfun ("glVertex3fv" vertex-3fv) :void
  (v (:pointer float)))

(defglfun ("glVertex3i" vertex-3i) :void
  (x int)
  (y int)
  (z int))

(defglfun ("glVertex3iv" vertex-3iv) :void
  (v (:pointer int)))

(defglfun ("glVertex3s" vertex-3s) :void
  (x short)
  (y short)
  (z short))

(defglfun ("glVertex3sv" vertex-3sv) :void
  (v (:pointer short)))

(defglfun ("glVertex4d" vertex-4d) :void
  (x double)
  (y double)
  (z double)
  (w double))

(defglfun ("glVertex4dv" vertex-4dv) :void
  (v (:pointer double)))

(defglfun ("glVertex4f" vertex-4f) :void
  (x float)
  (y float)
  (z float)
  (w float))

(defglfun ("glVertex4fv" vertex-4fv) :void
  (v (:pointer float)))

(defglfun ("glVertex4i" vertex-4i) :void
  (x int)
  (y int)
  (z int)
  (w int))

(defglfun ("glVertex4iv" vertex-4iv) :void
  (v (:pointer int)))

(defglfun ("glVertex4s" vertex-4s) :void
  (x short)
  (y short)
  (z short)
  (w short))

(defglfun ("glVertex4sv" vertex-4sv) :void
  (v (:pointer short)))

(defglfun ("glClipPlane" clip-plane) :void
  (plane enum)
  (equation (:pointer double)))

(defglfun ("glColorMaterial" color-material) :void
  (face enum)
  (mode enum))

(defglfun ("glFogi" fog-i) :void
  (pname enum)
  (param int))

(defglfun ("glFogiv" fog-iv) :void
  (pname enum)
  (params (:pointer int)))

(defglfun ("glLighti" light-i) :void
  (light enum)
  (pname enum)
  (param int))

(defglfun ("glLightiv" light-iv) :void
  (light enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glLightModeli" light-model-i) :void
  (pname enum)
  (param int))

(defglfun ("glLightModeliv" light-model-iv) :void
  (pname enum)
  (params (:pointer int)))

(defglfun ("glLineStipple" line-stipple) :void
  (factor int)
  (pattern ushort))

(defglfun ("glMateriali" material-i) :void
  (face enum)
  (pname enum)
  (param int))

(defglfun ("glMaterialiv" material-iv) :void
  (face enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glPolygonStipple" polygon-stipple) :void
  (mask offset-or-pointer))

(defglfun ("glTexGend" tex-gen-d) :void
  (coord enum)
  (pname enum)
  (param double))

(defglfun ("glTexGendv" tex-gen-dv) :void
  (coord enum)
  (pname enum)
  (params (:pointer double)))

(defglfun ("glTexGenf" tex-gen-f) :void
  (coord enum)
  (pname enum)
  (param float))

(defglfun ("glTexGenfv" tex-gen-fv) :void
  (coord enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glTexGeni" tex-gen-i) :void
  (coord enum)
  (pname enum)
  (param int))

(defglfun ("glTexGeniv" tex-gen-iv) :void
  (coord enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glFeedbackBuffer" feedback-buffer) :void
  (size sizei)
  (type enum)
  (buffer (:pointer float)))

(defglfun ("glSelectBuffer" select-buffer) :void
  (size sizei)
  (buffer (:pointer uint)))

(defglfun ("glRenderMode" render-mode) int
  (mode enum))

(defglfun ("glInitNames" init-names) :void)

(defglfun ("glLoadName" load-name) :void
  (name uint))

(defglfun ("glPassThrough" pass-through) :void
  (token float))

(defglfun ("glPopName" pop-name) :void)

(defglfun ("glPushName" push-name) :void
  (name uint))

(defglfun ("glClearAccum" clear-accum) :void
  (red float)
  (green float)
  (blue float)
  (alpha float))

(defglfun ("glClearIndex" clear-index) :void
  (c float))

(defglfun ("glIndexMask" index-mask) :void
  (mask uint))

(defglfun ("glAccum" accum) :void
  (op enum)
  (value float))

(defglfun ("glPopAttrib" pop-attrib) :void)

(defglfun ("glPushAttrib" push-attrib) :void
  (mask AttribMask))

(defglfun ("glMap1d" map-1d) :void
  (target enum)
  (u1 double)
  (u2 double)
  (stride int)
  (order int)
  (points (:pointer double)))

(defglfun ("glMap1f" map-1f) :void
  (target enum)
  (u1 float)
  (u2 float)
  (stride int)
  (order int)
  (points (:pointer float)))

(defglfun ("glMap2d" map-2d) :void
  (target enum)
  (u1 double)
  (u2 double)
  (ustride int)
  (uorder int)
  (v1 double)
  (v2 double)
  (vstride int)
  (vorder int)
  (points (:pointer double)))

(defglfun ("glMap2f" map-2f) :void
  (target enum)
  (u1 float)
  (u2 float)
  (ustride int)
  (uorder int)
  (v1 float)
  (v2 float)
  (vstride int)
  (vorder int)
  (points (:pointer float)))

(defglfun ("glMapGrid1d" map-grid-1d) :void
  (un int)
  (u1 double)
  (u2 double))

(defglfun ("glMapGrid1f" map-grid-1f) :void
  (un int)
  (u1 float)
  (u2 float))

(defglfun ("glMapGrid2d" map-grid-2d) :void
  (un int)
  (u1 double)
  (u2 double)
  (vn int)
  (v1 double)
  (v2 double))

(defglfun ("glMapGrid2f" map-grid-2f) :void
  (un int)
  (u1 float)
  (u2 float)
  (vn int)
  (v1 float)
  (v2 float))

(defglfun ("glEvalCoord1d" eval-coord-1d) :void
  (u double))

(defglfun ("glEvalCoord1dv" eval-coord-1dv) :void
  (u (:pointer double)))

(defglfun ("glEvalCoord1f" eval-coord-1f) :void
  (u float))

(defglfun ("glEvalCoord1fv" eval-coord-1fv) :void
  (u (:pointer float)))

(defglfun ("glEvalCoord2d" eval-coord-2d) :void
  (u double)
  (v double))

(defglfun ("glEvalCoord2dv" eval-coord-2dv) :void
  (u (:pointer double)))

(defglfun ("glEvalCoord2f" eval-coord-2f) :void
  (u float)
  (v float))

(defglfun ("glEvalCoord2fv" eval-coord-2fv) :void
  (u (:pointer float)))

(defglfun ("glEvalMesh1" eval-mesh-1) :void
  (mode enum)
  (i1 int)
  (i2 int))

(defglfun ("glEvalPoint1" eval-point-1) :void
  (i int))

(defglfun ("glEvalMesh2" eval-mesh-2) :void
  (mode enum)
  (i1 int)
  (i2 int)
  (j1 int)
  (j2 int))

(defglfun ("glEvalPoint2" eval-point-2) :void
  (i int)
  (j int))

(defglfun ("glPixelZoom" pixel-zoom) :void
  (xfactor float)
  (yfactor float))

(defglfun ("glPixelTransferf" pixel-transfer-f) :void
  (pname enum)
  (param float))

(defglfun ("glPixelTransferi" pixel-transfer-i) :void
  (pname enum)
  (param int))

(defglfun ("glPixelMapfv" pixel-map-fv) :void
  (map enum)
  (mapsize sizei)
  (values offset-or-pointer))

(defglfun ("glPixelMapuiv" pixel-map-uiv) :void
  (map enum)
  (mapsize sizei)
  (values offset-or-pointer))

(defglfun ("glPixelMapusv" pixel-map-usv) :void
  (map enum)
  (mapsize sizei)
  (values offset-or-pointer))

(defglfun ("glCopyPixels" copy-pixels) :void
  (x int)
  (y int)
  (width sizei)
  (height sizei)
  (type enum))

(defglfun ("glDrawPixels" draw-pixels) :void
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglfun ("glGetClipPlane" get-clip-plane) :void
  (plane enum)
  (equation (:pointer double)))

(defglfun ("glGetLightiv" get-light-iv) :void
  (light enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glGetMapdv" get-map-dv) :void
  (target enum)
  (query enum)
  (v (:pointer double)))

(defglfun ("glGetMapfv" get-map-fv) :void
  (target enum)
  (query enum)
  (v (:pointer float)))

(defglfun ("glGetMapiv" get-map-iv) :void
  (target enum)
  (query enum)
  (v (:pointer int)))

(defglfun ("glGetMaterialiv" get-material-iv) :void
  (face enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glGetPixelMapfv" get-pixel-map-fv) :void
  (map enum)
  (values offset-or-pointer))

(defglfun ("glGetPixelMapuiv" get-pixel-map-uiv) :void
  (map enum)
  (values offset-or-pointer))

(defglfun ("glGetPixelMapusv" get-pixel-map-usv) :void
  (map enum)
  (values offset-or-pointer))

(defglfun ("glGetPolygonStipple" get-polygon-stipple) :void
  (mask offset-or-pointer))

(defglfun ("glGetTexGendv" get-tex-gen-dv) :void
  (coord enum)
  (pname enum)
  (params (:pointer double)))

(defglfun ("glGetTexGenfv" get-tex-gen-fv) :void
  (coord enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glGetTexGeniv" get-tex-gen-iv) :void
  (coord enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glIsList" is-list) boolean
  (list uint))

(defglfun ("glFrustum" frustum) :void
  (left double)
  (right double)
  (bottom double)
  (top double)
  (zNear double)
  (zFar double))

(defglfun ("glLoadMatrixd" load-matrix-d) :void
  (m (:pointer double)))

(defglfun ("glMultMatrixd" mult-matrix-d) :void
  (m (:pointer double)))

(defglfun ("glOrtho" ortho) :void
  (left double)
  (right double)
  (bottom double)
  (top double)
  (zNear double)
  (zFar double))

(defglfun ("glRotated" rotate-d) :void
  (angle double)
  (x double)
  (y double)
  (z double))

(defglfun ("glScaled" scale-d) :void
  (x double)
  (y double)
  (z double))

(defglfun ("glTranslated" translate-d) :void
  (x double)
  (y double)
  (z double))

(defglfun ("glCopyTexImage1D" copy-tex-image-1d) :void
  (target enum)
  (level int)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (border int))

(defglfun ("glCopyTexSubImage1D" copy-tex-sub-image-1d) :void
  (target enum)
  (level int)
  (xoffset int)
  (x int)
  (y int)
  (width sizei))

(defglfun ("glTexSubImage1D" tex-sub-image-1d) :void
  (target enum)
  (level int)
  (xoffset int)
  (width sizei)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglfun ("glArrayElement" array-element) :void
  (i int))

(defglfun ("glEdgeFlagPointer" edge-flag-pointer) :void
  (stride sizei)
  (pointer offset-or-pointer))

(defglfun ("glIndexPointer" index-pointer) :void
  (type enum)
  (stride sizei)
  (pointer offset-or-pointer))

(defglfun ("glInterleavedArrays" interleaved-arrays) :void
  (format enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglfun ("glAreTexturesResident" are-textures-resident) boolean
  (n sizei)
  (textures (:pointer uint))
  (residences (:pointer boolean)))

(defglfun ("glPrioritizeTextures" prioritize-textures) :void
  (n sizei)
  (textures (:pointer uint))
  (priorities (:pointer float)))

(defglfun ("glIndexub" index-ub) :void
  (c ubyte))

(defglfun ("glIndexubv" index-ubv) :void
  (c (:pointer ubyte)))

(defglfun ("glPopClientAttrib" pop-client-attrib) :void)

(defglfun ("glPushClientAttrib" push-client-attrib) :void
  (mask ClientAttribMask))

(defglextfun ("glCompressedTexImage1D" compressed-tex-image-1d) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (border int)
  (imageSize sizei)
  (data offset-or-pointer))

(defglextfun ("glCompressedTexSubImage1D" compressed-tex-sub-image-1d) :void
  (target enum)
  (level int)
  (xoffset int)
  (width sizei)
  (format enum)
  (imageSize sizei)
  (data offset-or-pointer))

(defglextfun ("glGetCompressedTexImage" get-compressed-tex-image) :void
  (target enum)
  (level int)
  (img offset-or-pointer))

(defglextfun ("glMultiTexCoord1d" multi-tex-coord-1d) :void
  (target enum)
  (s double))

(defglextfun ("glMultiTexCoord1dv" multi-tex-coord-1dv) :void
  (target enum)
  (v (:pointer double)))

(defglextfun ("glMultiTexCoord1f" multi-tex-coord-1f) :void
  (target enum)
  (s float))

(defglextfun ("glMultiTexCoord1fv" multi-tex-coord-1fv) :void
  (target enum)
  (v (:pointer float)))

(defglextfun ("glMultiTexCoord1i" multi-tex-coord-1i) :void
  (target enum)
  (s int))

(defglextfun ("glMultiTexCoord1iv" multi-tex-coord-1iv) :void
  (target enum)
  (v (:pointer int)))

(defglextfun ("glMultiTexCoord1s" multi-tex-coord-1s) :void
  (target enum)
  (s short))

(defglextfun ("glMultiTexCoord1sv" multi-tex-coord-1sv) :void
  (target enum)
  (v (:pointer short)))

(defglextfun ("glMultiTexCoord2d" multi-tex-coord-2d) :void
  (target enum)
  (s double)
  (tee double))

(defglextfun ("glMultiTexCoord2dv" multi-tex-coord-2dv) :void
  (target enum)
  (v (:pointer double)))

(defglextfun ("glMultiTexCoord2f" multi-tex-coord-2f) :void
  (target enum)
  (s float)
  (tee float))

(defglextfun ("glMultiTexCoord2fv" multi-tex-coord-2fv) :void
  (target enum)
  (v (:pointer float)))

(defglextfun ("glMultiTexCoord2i" multi-tex-coord-2i) :void
  (target enum)
  (s int)
  (tee int))

(defglextfun ("glMultiTexCoord2iv" multi-tex-coord-2iv) :void
  (target enum)
  (v (:pointer int)))

(defglextfun ("glMultiTexCoord2s" multi-tex-coord-2s) :void
  (target enum)
  (s short)
  (tee short))

(defglextfun ("glMultiTexCoord2sv" multi-tex-coord-2sv) :void
  (target enum)
  (v (:pointer short)))

(defglextfun ("glMultiTexCoord3d" multi-tex-coord-3d) :void
  (target enum)
  (s double)
  (tee double)
  (r double))

(defglextfun ("glMultiTexCoord3dv" multi-tex-coord-3dv) :void
  (target enum)
  (v (:pointer double)))

(defglextfun ("glMultiTexCoord3f" multi-tex-coord-3f) :void
  (target enum)
  (s float)
  (tee float)
  (r float))

(defglextfun ("glMultiTexCoord3fv" multi-tex-coord-3fv) :void
  (target enum)
  (v (:pointer float)))

(defglextfun ("glMultiTexCoord3i" multi-tex-coord-3i) :void
  (target enum)
  (s int)
  (tee int)
  (r int))

(defglextfun ("glMultiTexCoord3iv" multi-tex-coord-3iv) :void
  (target enum)
  (v (:pointer int)))

(defglextfun ("glMultiTexCoord3s" multi-tex-coord-3s) :void
  (target enum)
  (s short)
  (tee short)
  (r short))

(defglextfun ("glMultiTexCoord3sv" multi-tex-coord-3sv) :void
  (target enum)
  (v (:pointer short)))

(defglextfun ("glMultiTexCoord4d" multi-tex-coord-4d) :void
  (target enum)
  (s double)
  (tee double)
  (r double)
  (q double))

(defglextfun ("glMultiTexCoord4dv" multi-tex-coord-4dv) :void
  (target enum)
  (v (:pointer double)))

(defglextfun ("glMultiTexCoord4fv" multi-tex-coord-4fv) :void
  (target enum)
  (v (:pointer float)))

(defglextfun ("glMultiTexCoord4i" multi-tex-coord-4i) :void
  (target enum)
  (s int)
  (tee int)
  (r int)
  (q int))

(defglextfun ("glMultiTexCoord4iv" multi-tex-coord-4iv) :void
  (target enum)
  (v (:pointer int)))

(defglextfun ("glMultiTexCoord4s" multi-tex-coord-4s) :void
  (target enum)
  (s short)
  (tee short)
  (r short)
  (q short))

(defglextfun ("glMultiTexCoord4sv" multi-tex-coord-4sv) :void
  (target enum)
  (v (:pointer short)))

(defglextfun ("glLoadTransposeMatrixf" load-transpose-matrix-f) :void
  (m (:pointer float)))

(defglextfun ("glLoadTransposeMatrixd" load-transpose-matrix-d) :void
  (m (:pointer double)))

(defglextfun ("glMultTransposeMatrixf" mult-transpose-matrix-f) :void
  (m (:pointer float)))

(defglextfun ("glMultTransposeMatrixd" mult-transpose-matrix-d) :void
  (m (:pointer double)))

(defglextfun ("glMultiDrawArrays" multi-draw-arrays) :void
  (mode enum)
  (first (:pointer int))
  (count (:pointer sizei))
  (drawcount sizei))

(defglextfun ("glMultiDrawElements" multi-draw-elements) :void
  (mode enum)
  (count (:pointer sizei))
  (type enum)
  (indices (:pointer (:pointer :void)))
  (drawcount sizei))

(defglextfun ("glPointParameteri" point-parameter-i) :void
  (pname enum)
  (param int))

(defglextfun ("glPointParameteriv" point-parameter-iv) :void
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glFogCoordf" fog-coord-f) :void
  (coord float))

(defglextfun ("glFogCoordfv" fog-coord-fv) :void
  (coord (:pointer float)))

(defglextfun ("glFogCoordd" fog-coord-d) :void
  (coord double))

(defglextfun ("glFogCoorddv" fog-coord-dv) :void
  (coord (:pointer double)))

(defglextfun ("glFogCoordPointer" fog-coord-pointer) :void
  (type enum)
  (stride sizei)
  (pointer offset-or-pointer))

(defglextfun ("glSecondaryColor3b" secondary-color-3b) :void
  (red byte)
  (green byte)
  (blue byte))

(defglextfun ("glSecondaryColor3bv" secondary-color-3bv) :void
  (v (:pointer byte)))

(defglextfun ("glSecondaryColor3d" secondary-color-3d) :void
  (red double)
  (green double)
  (blue double))

(defglextfun ("glSecondaryColor3dv" secondary-color-3dv) :void
  (v (:pointer double)))

(defglextfun ("glSecondaryColor3f" secondary-color-3f) :void
  (red float)
  (green float)
  (blue float))

(defglextfun ("glSecondaryColor3fv" secondary-color-3fv) :void
  (v (:pointer float)))

(defglextfun ("glSecondaryColor3i" secondary-color-3i) :void
  (red int)
  (green int)
  (blue int))

(defglextfun ("glSecondaryColor3iv" secondary-color-3iv) :void
  (v (:pointer int)))

(defglextfun ("glSecondaryColor3s" secondary-color-3s) :void
  (red short)
  (green short)
  (blue short))

(defglextfun ("glSecondaryColor3sv" secondary-color-3sv) :void
  (v (:pointer short)))

(defglextfun ("glSecondaryColor3ub" secondary-color-3ub) :void
  (red ubyte)
  (green ubyte)
  (blue ubyte))

(defglextfun ("glSecondaryColor3ubv" secondary-color-3ubv) :void
  (v (:pointer ubyte)))

(defglextfun ("glSecondaryColor3ui" secondary-color-3ui) :void
  (red uint)
  (green uint)
  (blue uint))

(defglextfun ("glSecondaryColor3uiv" secondary-color-3uiv) :void
  (v (:pointer uint)))

(defglextfun ("glSecondaryColor3us" secondary-color-3us) :void
  (red ushort)
  (green ushort)
  (blue ushort))

(defglextfun ("glSecondaryColor3usv" secondary-color-3usv) :void
  (v (:pointer ushort)))

(defglextfun ("glSecondaryColorPointer" secondary-color-pointer) :void
  (size int)
  (type enum)
  (stride sizei)
  (pointer offset-or-pointer))

(defglextfun ("glWindowPos2d" window-pos-2d) :void
  (x double)
  (y double))

(defglextfun ("glWindowPos2dv" window-pos-2dv) :void
  (v (:pointer double)))

(defglextfun ("glWindowPos2f" window-pos-2f) :void
  (x float)
  (y float))

(defglextfun ("glWindowPos2fv" window-pos-2fv) :void
  (v (:pointer float)))

(defglextfun ("glWindowPos2i" window-pos-2i) :void
  (x int)
  (y int))

(defglextfun ("glWindowPos2iv" window-pos-2iv) :void
  (v (:pointer int)))

(defglextfun ("glWindowPos2s" window-pos-2s) :void
  (x short)
  (y short))

(defglextfun ("glWindowPos2sv" window-pos-2sv) :void
  (v (:pointer short)))

(defglextfun ("glWindowPos3d" window-pos-3d) :void
  (x double)
  (y double)
  (z double))

(defglextfun ("glWindowPos3dv" window-pos-3dv) :void
  (v (:pointer double)))

(defglextfun ("glWindowPos3f" window-pos-3f) :void
  (x float)
  (y float)
  (z float))

(defglextfun ("glWindowPos3fv" window-pos-3fv) :void
  (v (:pointer float)))

(defglextfun ("glWindowPos3i" window-pos-3i) :void
  (x int)
  (y int)
  (z int))

(defglextfun ("glWindowPos3iv" window-pos-3iv) :void
  (v (:pointer int)))

(defglextfun ("glWindowPos3s" window-pos-3s) :void
  (x short)
  (y short)
  (z short))

(defglextfun ("glWindowPos3sv" window-pos-3sv) :void
  (v (:pointer short)))

(defglextfun ("glGetQueryObjectiv" get-query-object-iv) :void
  (id uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetBufferSubData" get-buffer-sub-data) :void
  (target enum)
  (offset intptr)
  (size sizeiptr)
  (data (:pointer :void)))

(defglextfun ("glMapBuffer" map-buffer) (:pointer :void)
  (target enum)
  (access enum))

(defglextfun ("glGetVertexAttribdv" get-vertex-attrib-dv) :void
  (index uint)
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glVertexAttrib1d" vertex-attrib-1d) :void
  (index uint)
  (x double))

(defglextfun ("glVertexAttrib1dv" vertex-attrib-1dv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib1s" vertex-attrib-1s) :void
  (index uint)
  (x short))

(defglextfun ("glVertexAttrib1sv" vertex-attrib-1sv) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib2d" vertex-attrib-2d) :void
  (index uint)
  (x double)
  (y double))

(defglextfun ("glVertexAttrib2dv" vertex-attrib-2dv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib2s" vertex-attrib-2s) :void
  (index uint)
  (x short)
  (y short))

(defglextfun ("glVertexAttrib2sv" vertex-attrib-2sv) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib3d" vertex-attrib-3d) :void
  (index uint)
  (x double)
  (y double)
  (z double))

(defglextfun ("glVertexAttrib3dv" vertex-attrib-3dv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib3s" vertex-attrib-3s) :void
  (index uint)
  (x short)
  (y short)
  (z short))

(defglextfun ("glVertexAttrib3sv" vertex-attrib-3sv) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib4Nbv" vertex-attrib-4nbv) :void
  (index uint)
  (v (:pointer byte)))

(defglextfun ("glVertexAttrib4Niv" vertex-attrib-4niv) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttrib4Nsv" vertex-attrib-4nsv) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib4Nub" vertex-attrib-4nub) :void
  (index uint)
  (x ubyte)
  (y ubyte)
  (z ubyte)
  (w ubyte))

(defglextfun ("glVertexAttrib4Nubv" vertex-attrib-4nubv) :void
  (index uint)
  (v (:pointer ubyte)))

(defglextfun ("glVertexAttrib4Nuiv" vertex-attrib-4nuiv) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttrib4Nusv" vertex-attrib-4nusv) :void
  (index uint)
  (v (:pointer ushort)))

(defglextfun ("glVertexAttrib4bv" vertex-attrib-4bv) :void
  (index uint)
  (v (:pointer byte)))

(defglextfun ("glVertexAttrib4d" vertex-attrib-4d) :void
  (index uint)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glVertexAttrib4dv" vertex-attrib-4dv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib4iv" vertex-attrib-4iv) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttrib4s" vertex-attrib-4s) :void
  (index uint)
  (x short)
  (y short)
  (z short)
  (w short))

(defglextfun ("glVertexAttrib4sv" vertex-attrib-4sv) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib4ubv" vertex-attrib-4ubv) :void
  (index uint)
  (v (:pointer ubyte)))

(defglextfun ("glVertexAttrib4uiv" vertex-attrib-4uiv) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttrib4usv" vertex-attrib-4usv) :void
  (index uint)
  (v (:pointer ushort)))

(defglextfun ("glColorMaski" color-mask-i) :void
  (index uint)
  (r boolean)
  (g boolean)
  (b boolean)
  (a boolean))

(defglextfun ("glEnablei" enable-i) :void
  (target enum)
  (index uint))

(defglextfun ("glDisablei" disable-i) :void
  (target enum)
  (index uint))

(defglextfun ("glIsEnabledi" is-enabled-i) boolean
  (target enum)
  (index uint))

(defglextfun ("glClampColor" clamp-color) :void
  (target enum)
  (clamp enum))

(defglextfun ("glBeginConditionalRender" begin-conditional-render) :void
  (id uint)
  (mode enum))

(defglextfun ("glEndConditionalRender" end-conditional-render) :void)

(defglextfun ("glVertexAttribI1i" vertex-attrib-i1i) :void
  (index uint)
  (x int))

(defglextfun ("glVertexAttribI2i" vertex-attrib-i2i) :void
  (index uint)
  (x int)
  (y int))

(defglextfun ("glVertexAttribI3i" vertex-attrib-i3i) :void
  (index uint)
  (x int)
  (y int)
  (z int))

(defglextfun ("glVertexAttribI1ui" vertex-attrib-i1ui) :void
  (index uint)
  (x uint))

(defglextfun ("glVertexAttribI2ui" vertex-attrib-i2ui) :void
  (index uint)
  (x uint)
  (y uint))

(defglextfun ("glVertexAttribI3ui" vertex-attrib-i3ui) :void
  (index uint)
  (x uint)
  (y uint)
  (z uint))

(defglextfun ("glVertexAttribI1iv" vertex-attrib-i1iv) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttribI2iv" vertex-attrib-i2iv) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttribI3iv" vertex-attrib-i3iv) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttribI1uiv" vertex-attrib-i1uiv) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttribI2uiv" vertex-attrib-i2uiv) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttribI3uiv" vertex-attrib-i3uiv) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttribI4bv" vertex-attrib-i4bv) :void
  (index uint)
  (v (:pointer byte)))

(defglextfun ("glVertexAttribI4sv" vertex-attrib-i4sv) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttribI4ubv" vertex-attrib-i4ubv) :void
  (index uint)
  (v (:pointer ubyte)))

(defglextfun ("glVertexAttribI4usv" vertex-attrib-i4usv) :void
  (index uint)
  (v (:pointer ushort)))

(defglextfun ("glBindFragDataLocation" bind-frag-data-location) :void
  (program uint)
  (color uint)
  (name (:pointer char)))

(defglextfun ("glTexParameterIiv" tex-parameter-iiv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTexParameterIuiv" tex-parameter-iuiv) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetTexParameterIiv" get-tex-parameter-iiv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetTexParameterIuiv" get-tex-parameter-iuiv) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glTexBuffer" tex-buffer) :void
  (target enum)
  (internalformat enum)
  (buffer uint))

(defglextfun ("glPrimitiveRestartIndex" primitive-restart-index) :void
  (index uint))

(defglextfun ("glFramebufferTexture" framebuffer-texture) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int))

(defglextfun ("glMinSampleShading" min-sample-shading) :void
  (value float))

(defglextfun ("glBlendEquationi" blend-equation-i) :void
  (buf uint)
  (mode enum))

(defglextfun ("glBlendEquationSeparatei" blend-equation-separate-i) :void
  (buf uint)
  (modeRGB enum)
  (modeAlpha enum))

(defglextfun ("glBlendFunci" blend-func-i) :void
  (buf uint)
  (src enum)
  (dst enum))

(defglextfun ("glBlendFuncSeparatei" blend-func-separate-i) :void
  (buf uint)
  (srcRGB enum)
  (dstRGB enum)
  (srcAlpha enum)
  (dstAlpha enum))

(defglextfun ("glGetnCompressedTexImage" getn-compressed-tex-image) :void
  (target enum)
  (lod int)
  (bufSize sizei)
  (pixels (:pointer :void)))

(defglextfun ("glGetnTexImage" getn-tex-image) :void
  (target enum)
  (level int)
  (format enum)
  (type enum)
  (bufSize sizei)
  (pixels (:pointer :void)))

(defglextfun ("glGetnUniformdv" getn-uniform-dv) :void
  (program uint)
  (location int)
  (bufSize sizei)
  (params (:pointer double)))

(defglextfun ("glGetnMapdv" getn-map-dv) :void
  (target enum)
  (query enum)
  (bufSize sizei)
  (v (:pointer double)))

(defglextfun ("glGetnMapfv" getn-map-fv) :void
  (target enum)
  (query enum)
  (bufSize sizei)
  (v (:pointer float)))

(defglextfun ("glGetnMapiv" getn-map-iv) :void
  (target enum)
  (query enum)
  (bufSize sizei)
  (v (:pointer int)))

(defglextfun ("glGetnPixelMapfv" getn-pixel-map-fv) :void
  (map enum)
  (bufSize sizei)
  (values (:pointer float)))

(defglextfun ("glGetnPixelMapuiv" getn-pixel-map-uiv) :void
  (map enum)
  (bufSize sizei)
  (values (:pointer uint)))

(defglextfun ("glGetnPixelMapusv" getn-pixel-map-usv) :void
  (map enum)
  (bufSize sizei)
  (values (:pointer ushort)))

(defglextfun ("glGetnPolygonStipple" getn-polygon-stipple) :void
  (bufSize sizei)
  (pattern (:pointer ubyte)))

(defglextfun ("glGetnColorTable" getn-color-table) :void
  (target enum)
  (format enum)
  (type enum)
  (bufSize sizei)
  (table (:pointer :void)))

(defglextfun ("glGetnConvolutionFilter" getn-convolution-filter) :void
  (target enum)
  (format enum)
  (type enum)
  (bufSize sizei)
  (image (:pointer :void)))

(defglextfun ("glGetnSeparableFilter" getn-separable-filter) :void
  (target enum)
  (format enum)
  (type enum)
  (rowBufSize sizei)
  (row (:pointer :void))
  (columnBufSize sizei)
  (column (:pointer :void))
  (span (:pointer :void)))

(defglextfun ("glGetnHistogram" getn-histogram) :void
  (target enum)
  (reset boolean)
  (format enum)
  (type enum)
  (bufSize sizei)
  (values (:pointer :void)))

(defglextfun ("glGetnMinmax" getn-minmax) :void
  (target enum)
  (reset boolean)
  (format enum)
  (type enum)
  (bufSize sizei)
  (values (:pointer :void)))

(defglextfun ("glTbufferMask3DFX" tbuffer-mask-3dfx) :void
  (mask uint))

(defglextfun ("glDebugMessageEnableAMD" debug-message-enable-amd) :void
  (category enum)
  (severity enum)
  (count sizei)
  (ids (:pointer uint))
  (enabled boolean))

(defglextfun ("glDebugMessageInsertAMD" debug-message-insert-amd) :void
  (category enum)
  (severity enum)
  (id uint)
  (length sizei)
  (buf (:pointer char)))

(defglextfun ("glDebugMessageCallbackAMD" debug-message-callback-amd) :void
  (callback debugproc-amd)
  (userParam (:pointer :void)))

(defglextfun ("glGetDebugMessageLogAMD" get-debug-message-log-amd) uint
  (count uint)
  (bufsize sizei)
  (categories (:pointer enum))
  (severities (:pointer uint))
  (ids (:pointer uint))
  (lengths (:pointer sizei))
  (message (:pointer char)))

(defglextfun ("glBlendFuncIndexedAMD" blend-func-indexed-amd) :void
  (buf uint)
  (src enum)
  (dst enum))

(defglextfun ("glBlendFuncSeparateIndexedAMD" blend-func-separate-indexed-amd) :void
  (buf uint)
  (srcRGB enum)
  (dstRGB enum)
  (srcAlpha enum)
  (dstAlpha enum))

(defglextfun ("glBlendEquationIndexedAMD" blend-equation-indexed-amd) :void
  (buf uint)
  (mode enum))

(defglextfun ("glBlendEquationSeparateIndexedAMD" blend-equation-separate-indexed-amd) :void
  (buf uint)
  (modeRGB enum)
  (modeAlpha enum))

(defglextfun ("glUniform1i64NV" uniform-1i64-nv) :void
  (location int)
  (x int64-ext))

(defglextfun ("glUniform2i64NV" uniform-2i64-nv) :void
  (location int)
  (x int64-ext)
  (y int64-ext))

(defglextfun ("glUniform3i64NV" uniform-3i64-nv) :void
  (location int)
  (x int64-ext)
  (y int64-ext)
  (z int64-ext))

(defglextfun ("glUniform4i64NV" uniform-4i64-nv) :void
  (location int)
  (x int64-ext)
  (y int64-ext)
  (z int64-ext)
  (w int64-ext))

(defglextfun ("glUniform1i64vNV" uniform-1i64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glUniform2i64vNV" uniform-2i64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glUniform3i64vNV" uniform-3i64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glUniform4i64vNV" uniform-4i64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glUniform1ui64NV" uniform-1ui64-nv) :void
  (location int)
  (x uint64-ext))

(defglextfun ("glUniform2ui64NV" uniform-2ui64-nv) :void
  (location int)
  (x uint64-ext)
  (y uint64-ext))

(defglextfun ("glUniform3ui64NV" uniform-3ui64-nv) :void
  (location int)
  (x uint64-ext)
  (y uint64-ext)
  (z uint64-ext))

(defglextfun ("glUniform4ui64NV" uniform-4ui64-nv) :void
  (location int)
  (x uint64-ext)
  (y uint64-ext)
  (z uint64-ext)
  (w uint64-ext))

(defglextfun ("glUniform1ui64vNV" uniform-1ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glUniform2ui64vNV" uniform-2ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glUniform3ui64vNV" uniform-3ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glUniform4ui64vNV" uniform-4ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glGetUniformi64vNV" get-uniform-i64v-nv) :void
  (program uint)
  (location int)
  (params (:pointer int64-ext)))

(defglextfun ("glGetUniformui64vNV" get-uniform-ui64v-nv) :void
  (program uint)
  (location int)
  (params (:pointer uint64-ext)))

(defglextfun ("glProgramUniform1i64NV" program-uniform-1i64-nv) :void
  (program uint)
  (location int)
  (x int64-ext))

(defglextfun ("glProgramUniform2i64NV" program-uniform-2i64-nv) :void
  (program uint)
  (location int)
  (x int64-ext)
  (y int64-ext))

(defglextfun ("glProgramUniform3i64NV" program-uniform-3i64-nv) :void
  (program uint)
  (location int)
  (x int64-ext)
  (y int64-ext)
  (z int64-ext))

(defglextfun ("glProgramUniform4i64NV" program-uniform-4i64-nv) :void
  (program uint)
  (location int)
  (x int64-ext)
  (y int64-ext)
  (z int64-ext)
  (w int64-ext))

(defglextfun ("glProgramUniform1i64vNV" program-uniform-1i64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glProgramUniform2i64vNV" program-uniform-2i64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glProgramUniform3i64vNV" program-uniform-3i64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glProgramUniform4i64vNV" program-uniform-4i64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glProgramUniform1ui64NV" program-uniform-1ui64-nv) :void
  (program uint)
  (location int)
  (x uint64-ext))

(defglextfun ("glProgramUniform2ui64NV" program-uniform-2ui64-nv) :void
  (program uint)
  (location int)
  (x uint64-ext)
  (y uint64-ext))

(defglextfun ("glProgramUniform3ui64NV" program-uniform-3ui64-nv) :void
  (program uint)
  (location int)
  (x uint64-ext)
  (y uint64-ext)
  (z uint64-ext))

(defglextfun ("glProgramUniform4ui64NV" program-uniform-4ui64-nv) :void
  (program uint)
  (location int)
  (x uint64-ext)
  (y uint64-ext)
  (z uint64-ext)
  (w uint64-ext))

(defglextfun ("glProgramUniform1ui64vNV" program-uniform-1ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glProgramUniform2ui64vNV" program-uniform-2ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glProgramUniform3ui64vNV" program-uniform-3ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glProgramUniform4ui64vNV" program-uniform-4ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glVertexAttribParameteriAMD" vertex-attrib-parameter-i-amd) :void
  (index uint)
  (pname enum)
  (param int))

(defglextfun ("glMultiDrawArraysIndirectAMD" multi-draw-arrays-indirect-amd) :void
  (mode enum)
  (indirect (:pointer :void))
  (primcount sizei)
  (stride sizei))

(defglextfun ("glMultiDrawElementsIndirectAMD" multi-draw-elements-indirect-amd) :void
  (mode enum)
  (type enum)
  (indirect (:pointer :void))
  (primcount sizei)
  (stride sizei))

(defglextfun ("glGenNamesAMD" gen-names-amd) :void
  (identifier enum)
  (num uint)
  (names (:pointer uint)))

(defglextfun ("glDeleteNamesAMD" delete-names-amd) :void
  (identifier enum)
  (num uint)
  (names (:pointer uint)))

(defglextfun ("glIsNameAMD" is-name-amd) boolean
  (identifier enum)
  (name uint))

(defglextfun ("glQueryObjectParameteruiAMD" query-object-parameter-ui-amd) :void
  (target enum)
  (id uint)
  (pname enum)
  (param uint))

(defglextfun ("glSetMultisamplefvAMD" set-multisample-fv-amd) :void
  (pname enum)
  (index uint)
  (val (:pointer float)))

(defglextfun ("glTexStorageSparseAMD" tex-storage-sparse-amd) :void
  (target enum)
  (internalFormat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (layers sizei)
  (flags bitfield))

(defglextfun ("glTextureStorageSparseAMD" texture-storage-sparse-amd) :void
  (texture uint)
  (target enum)
  (internalFormat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (layers sizei)
  (flags bitfield))

(defglextfun ("glStencilOpValueAMD" stencil-op-value-amd) :void
  (face enum)
  (value uint))

(defglextfun ("glTessellationFactorAMD" tessellation-factor-amd) :void
  (factor float))

(defglextfun ("glTessellationModeAMD" tessellation-mode-amd) :void
  (mode enum))

(defglextfun ("glElementPointerAPPLE" element-pointer-apple) :void
  (type enum)
  (pointer (:pointer :void)))

(defglextfun ("glDrawElementArrayAPPLE" draw-element-array-apple) :void
  (mode enum)
  (first int)
  (count sizei))

(defglextfun ("glDrawRangeElementArrayAPPLE" draw-range-element-array-apple) :void
  (mode enum)
  (start uint)
  (end uint)
  (first int)
  (count sizei))

(defglextfun ("glMultiDrawElementArrayAPPLE" multi-draw-element-array-apple) :void
  (mode enum)
  (first (:pointer int))
  (count (:pointer sizei))
  (primcount sizei))

(defglextfun ("glMultiDrawRangeElementArrayAPPLE" multi-draw-range-element-array-apple) :void
  (mode enum)
  (start uint)
  (end uint)
  (first (:pointer int))
  (count (:pointer sizei))
  (primcount sizei))

(defglextfun ("glGenFencesAPPLE" gen-fences-apple) :void
  (n sizei)
  (fences (:pointer uint)))

(defglextfun ("glDeleteFencesAPPLE" delete-fences-apple) :void
  (n sizei)
  (fences (:pointer uint)))

(defglextfun ("glSetFenceAPPLE" set-fence-apple) :void
  (fence uint))

(defglextfun ("glIsFenceAPPLE" is-fence-apple) boolean
  (fence uint))

(defglextfun ("glTestFenceAPPLE" test-fence-apple) boolean
  (fence uint))

(defglextfun ("glFinishFenceAPPLE" finish-fence-apple) :void
  (fence uint))

(defglextfun ("glTestObjectAPPLE" test-object-apple) boolean
  (object enum)
  (name uint))

(defglextfun ("glFinishObjectAPPLE" finish-object-apple) :void
  (object enum)
  (name int))

(defglextfun ("glBufferParameteriAPPLE" buffer-parameter-i-apple) :void
  (target enum)
  (pname enum)
  (param int))

(defglextfun ("glFlushMappedBufferRangeAPPLE" flush-mapped-buffer-range-apple) :void
  (target enum)
  (offset intptr)
  (size sizeiptr))

(defglextfun ("glObjectPurgeableAPPLE" object-purgeable-apple) enum
  (objectType enum)
  (name uint)
  (option enum))

(defglextfun ("glObjectUnpurgeableAPPLE" object-unpurgeable-apple) enum
  (objectType enum)
  (name uint)
  (option enum))

(defglextfun ("glGetObjectParameterivAPPLE" get-object-parameter-iv-apple) :void
  (objectType enum)
  (name uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTextureRangeAPPLE" texture-range-apple) :void
  (target enum)
  (length sizei)
  (pointer (:pointer :void)))

(defglextfun ("glGetTexParameterPointervAPPLE" get-tex-parameter-pointer-v-apple) :void
  (target enum)
  (pname enum)
  (params (:pointer (:pointer :void))))

(defglextfun ("glBindVertexArrayAPPLE" bind-vertex-array-apple) :void
  (array uint))

(defglextfun ("glDeleteVertexArraysAPPLE" delete-vertex-arrays-apple) :void
  (n sizei)
  (arrays (:pointer uint)))

(defglextfun ("glGenVertexArraysAPPLE" gen-vertex-arrays-apple) :void
  (n sizei)
  (arrays (:pointer uint)))

(defglextfun ("glIsVertexArrayAPPLE" is-vertex-array-apple) boolean
  (array uint))

(defglextfun ("glVertexArrayRangeAPPLE" vertex-array-range-apple) :void
  (length sizei)
  (pointer (:pointer :void)))

(defglextfun ("glFlushVertexArrayRangeAPPLE" flush-vertex-array-range-apple) :void
  (length sizei)
  (pointer (:pointer :void)))

(defglextfun ("glVertexArrayParameteriAPPLE" vertex-array-parameter-i-apple) :void
  (pname enum)
  (param int))

(defglextfun ("glEnableVertexAttribAPPLE" enable-vertex-attrib-apple) :void
  (index uint)
  (pname enum))

(defglextfun ("glDisableVertexAttribAPPLE" disable-vertex-attrib-apple) :void
  (index uint)
  (pname enum))

(defglextfun ("glIsVertexAttribEnabledAPPLE" is-vertex-attrib-enabled-apple) boolean
  (index uint)
  (pname enum))

(defglextfun ("glMapVertexAttrib1dAPPLE" map-vertex-attrib-1d-apple) :void
  (index uint)
  (size uint)
  (u1 double)
  (u2 double)
  (stride int)
  (order int)
  (points (:pointer double)))

(defglextfun ("glMapVertexAttrib1fAPPLE" map-vertex-attrib-1f-apple) :void
  (index uint)
  (size uint)
  (u1 float)
  (u2 float)
  (stride int)
  (order int)
  (points (:pointer float)))

(defglextfun ("glMapVertexAttrib2dAPPLE" map-vertex-attrib-2d-apple) :void
  (index uint)
  (size uint)
  (u1 double)
  (u2 double)
  (ustride int)
  (uorder int)
  (v1 double)
  (v2 double)
  (vstride int)
  (vorder int)
  (points (:pointer double)))

(defglextfun ("glMapVertexAttrib2fAPPLE" map-vertex-attrib-2f-apple) :void
  (index uint)
  (size uint)
  (u1 float)
  (u2 float)
  (ustride int)
  (uorder int)
  (v1 float)
  (v2 float)
  (vstride int)
  (vorder int)
  (points (:pointer float)))

(defglextfun ("glClampColorARB" clamp-color-arb) :void
  (target enum)
  (clamp enum))

(defglextfun ("glDrawBuffersARB" draw-buffers-arb) :void
  (n sizei)
  (bufs (:pointer enum)))

(defglextfun ("glDrawArraysInstancedARB" draw-arrays-instanced-arb) :void
  (mode enum)
  (first int)
  (count sizei)
  (primcount sizei))

(defglextfun ("glDrawElementsInstancedARB" draw-elements-instanced-arb) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (primcount sizei))

(defglextfun ("glProgramStringARB" program-string-arb) :void
  (target enum)
  (format enum)
  (len sizei)
  (string (:pointer :void)))

(defglextfun ("glBindProgramARB" bind-program-arb) :void
  (target enum)
  (program uint))

(defglextfun ("glDeleteProgramsARB" delete-programs-arb) :void
  (n sizei)
  (programs (:pointer uint)))

(defglextfun ("glGenProgramsARB" gen-programs-arb) :void
  (n sizei)
  (programs (:pointer uint)))

(defglextfun ("glProgramEnvParameter4dARB" program-env-parameter-4d-arb) :void
  (target enum)
  (index uint)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glProgramEnvParameter4dvARB" program-env-parameter-4dv-arb) :void
  (target enum)
  (index uint)
  (params (:pointer double)))

(defglextfun ("glProgramEnvParameter4fARB" program-env-parameter-4f-arb) :void
  (target enum)
  (index uint)
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glProgramEnvParameter4fvARB" program-env-parameter-4fv-arb) :void
  (target enum)
  (index uint)
  (params (:pointer float)))

(defglextfun ("glProgramLocalParameter4dARB" program-local-parameter-4d-arb) :void
  (target enum)
  (index uint)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glProgramLocalParameter4dvARB" program-local-parameter-4dv-arb) :void
  (target enum)
  (index uint)
  (params (:pointer double)))

(defglextfun ("glProgramLocalParameter4fARB" program-local-parameter-4f-arb) :void
  (target enum)
  (index uint)
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glProgramLocalParameter4fvARB" program-local-parameter-4fv-arb) :void
  (target enum)
  (index uint)
  (params (:pointer float)))

(defglextfun ("glGetProgramEnvParameterdvARB" get-program-env-parameter-dv-arb) :void
  (target enum)
  (index uint)
  (params (:pointer double)))

(defglextfun ("glGetProgramEnvParameterfvARB" get-program-env-parameter-fv-arb) :void
  (target enum)
  (index uint)
  (params (:pointer float)))

(defglextfun ("glGetProgramLocalParameterdvARB" get-program-local-parameter-dv-arb) :void
  (target enum)
  (index uint)
  (params (:pointer double)))

(defglextfun ("glGetProgramLocalParameterfvARB" get-program-local-parameter-fv-arb) :void
  (target enum)
  (index uint)
  (params (:pointer float)))

(defglextfun ("glGetProgramivARB" get-program-iv-arb) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetProgramStringARB" get-program-string-arb) :void
  (target enum)
  (pname enum)
  (string (:pointer :void)))

(defglextfun ("glIsProgramARB" is-program-arb) boolean
  (program uint))

(defglextfun ("glProgramParameteriARB" program-parameter-i-arb) :void
  (program uint)
  (pname enum)
  (value int))

(defglextfun ("glFramebufferTextureARB" framebuffer-texture-arb) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int))

(defglextfun ("glFramebufferTextureLayerARB" framebuffer-texture-layer-arb) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int)
  (layer int))

(defglextfun ("glFramebufferTextureFaceARB" framebuffer-texture-face-arb) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int)
  (face enum))

(defglextfun ("glVertexAttribDivisorARB" vertex-attrib-divisor-arb) :void
  (index uint)
  (divisor uint))

(defglextfun ("glCurrentPaletteMatrixARB" current-palette-matrix-arb) :void
  (index int))

(defglextfun ("glMatrixIndexubvARB" matrix-index-ubv-arb) :void
  (size int)
  (indices (:pointer ubyte)))

(defglextfun ("glMatrixIndexusvARB" matrix-index-usv-arb) :void
  (size int)
  (indices (:pointer ushort)))

(defglextfun ("glMatrixIndexuivARB" matrix-index-uiv-arb) :void
  (size int)
  (indices (:pointer uint)))

(defglextfun ("glMatrixIndexPointerARB" matrix-index-pointer-arb) :void
  (size int)
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glSampleCoverageARB" sample-coverage-arb) :void
  (value float)
  (invert boolean))

(defglextfun ("glActiveTextureARB" active-texture-arb) :void
  (texture enum))

(defglextfun ("glClientActiveTextureARB" client-active-texture-arb) :void
  (texture enum))

(defglextfun ("glMultiTexCoord1dARB" multi-tex-coord-1d-arb) :void
  (target enum)
  (s double))

(defglextfun ("glMultiTexCoord1dvARB" multi-tex-coord-1dv-arb) :void
  (target enum)
  (v (:pointer double)))

(defglextfun ("glMultiTexCoord1fARB" multi-tex-coord-1f-arb) :void
  (target enum)
  (s float))

(defglextfun ("glMultiTexCoord1fvARB" multi-tex-coord-1fv-arb) :void
  (target enum)
  (v (:pointer float)))

(defglextfun ("glMultiTexCoord1iARB" multi-tex-coord-1i-arb) :void
  (target enum)
  (s int))

(defglextfun ("glMultiTexCoord1ivARB" multi-tex-coord-1iv-arb) :void
  (target enum)
  (v (:pointer int)))

(defglextfun ("glMultiTexCoord1sARB" multi-tex-coord-1s-arb) :void
  (target enum)
  (s short))

(defglextfun ("glMultiTexCoord1svARB" multi-tex-coord-1sv-arb) :void
  (target enum)
  (v (:pointer short)))

(defglextfun ("glMultiTexCoord2dARB" multi-tex-coord-2d-arb) :void
  (target enum)
  (s double)
  (tee double))

(defglextfun ("glMultiTexCoord2dvARB" multi-tex-coord-2dv-arb) :void
  (target enum)
  (v (:pointer double)))

(defglextfun ("glMultiTexCoord2fARB" multi-tex-coord-2f-arb) :void
  (target enum)
  (s float)
  (tee float))

(defglextfun ("glMultiTexCoord2fvARB" multi-tex-coord-2fv-arb) :void
  (target enum)
  (v (:pointer float)))

(defglextfun ("glMultiTexCoord2iARB" multi-tex-coord-2i-arb) :void
  (target enum)
  (s int)
  (tee int))

(defglextfun ("glMultiTexCoord2ivARB" multi-tex-coord-2iv-arb) :void
  (target enum)
  (v (:pointer int)))

(defglextfun ("glMultiTexCoord2sARB" multi-tex-coord-2s-arb) :void
  (target enum)
  (s short)
  (tee short))

(defglextfun ("glMultiTexCoord2svARB" multi-tex-coord-2sv-arb) :void
  (target enum)
  (v (:pointer short)))

(defglextfun ("glMultiTexCoord3dARB" multi-tex-coord-3d-arb) :void
  (target enum)
  (s double)
  (tee double)
  (r double))

(defglextfun ("glMultiTexCoord3dvARB" multi-tex-coord-3dv-arb) :void
  (target enum)
  (v (:pointer double)))

(defglextfun ("glMultiTexCoord3fARB" multi-tex-coord-3f-arb) :void
  (target enum)
  (s float)
  (tee float)
  (r float))

(defglextfun ("glMultiTexCoord3fvARB" multi-tex-coord-3fv-arb) :void
  (target enum)
  (v (:pointer float)))

(defglextfun ("glMultiTexCoord3iARB" multi-tex-coord-3i-arb) :void
  (target enum)
  (s int)
  (tee int)
  (r int))

(defglextfun ("glMultiTexCoord3ivARB" multi-tex-coord-3iv-arb) :void
  (target enum)
  (v (:pointer int)))

(defglextfun ("glMultiTexCoord3sARB" multi-tex-coord-3s-arb) :void
  (target enum)
  (s short)
  (tee short)
  (r short))

(defglextfun ("glMultiTexCoord3svARB" multi-tex-coord-3sv-arb) :void
  (target enum)
  (v (:pointer short)))

(defglextfun ("glMultiTexCoord4dARB" multi-tex-coord-4d-arb) :void
  (target enum)
  (s double)
  (tee double)
  (r double)
  (q double))

(defglextfun ("glMultiTexCoord4dvARB" multi-tex-coord-4dv-arb) :void
  (target enum)
  (v (:pointer double)))

(defglextfun ("glMultiTexCoord4fARB" multi-tex-coord-4f-arb) :void
  (target enum)
  (s float)
  (tee float)
  (r float)
  (q float))

(defglextfun ("glMultiTexCoord4fvARB" multi-tex-coord-4fv-arb) :void
  (target enum)
  (v (:pointer float)))

(defglextfun ("glMultiTexCoord4iARB" multi-tex-coord-4i-arb) :void
  (target enum)
  (s int)
  (tee int)
  (r int)
  (q int))

(defglextfun ("glMultiTexCoord4ivARB" multi-tex-coord-4iv-arb) :void
  (target enum)
  (v (:pointer int)))

(defglextfun ("glMultiTexCoord4sARB" multi-tex-coord-4s-arb) :void
  (target enum)
  (s short)
  (tee short)
  (r short)
  (q short))

(defglextfun ("glMultiTexCoord4svARB" multi-tex-coord-4sv-arb) :void
  (target enum)
  (v (:pointer short)))

(defglextfun ("glGenQueriesARB" gen-queries-arb) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glDeleteQueriesARB" delete-queries-arb) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glIsQueryARB" is-query-arb) boolean
  (id uint))

(defglextfun ("glBeginQueryARB" begin-query-arb) :void
  (target enum)
  (id uint))

(defglextfun ("glEndQueryARB" end-query-arb) :void
  (target enum))

(defglextfun ("glGetQueryivARB" get-query-iv-arb) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetQueryObjectivARB" get-query-object-iv-arb) :void
  (id uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetQueryObjectuivARB" get-query-object-uiv-arb) :void
  (id uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glPointParameterfARB" point-parameter-f-arb) :void
  (pname enum)
  (param float))

(defglextfun ("glPointParameterfvARB" point-parameter-fv-arb) :void
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glDeleteObjectARB" delete-object-arb) :void
  (obj handle-arb))

(defglextfun ("glGetHandleARB" get-handle-arb) handle-arb
  (pname enum))

(defglextfun ("glDetachObjectARB" detach-object-arb) :void
  (containerObj handle-arb)
  (attachedObj handle-arb))

(defglextfun ("glCreateShaderObjectARB" create-shader-object-arb) handle-arb
  (shaderType enum))

(defglextfun ("glShaderSourceARB" shader-source-arb) :void
  (shaderObj handle-arb)
  (count sizei)
  (string (:pointer (:pointer char-arb)))
  (length (:pointer int)))

(defglextfun ("glCompileShaderARB" compile-shader-arb) :void
  (shaderObj handle-arb))

(defglextfun ("glCreateProgramObjectARB" create-program-object-arb) handle-arb)

(defglextfun ("glAttachObjectARB" attach-object-arb) :void
  (containerObj handle-arb)
  (obj handle-arb))

(defglextfun ("glLinkProgramARB" link-program-arb) :void
  (programObj handle-arb))

(defglextfun ("glUseProgramObjectARB" use-program-object-arb) :void
  (programObj handle-arb))

(defglextfun ("glValidateProgramARB" validate-program-arb) :void
  (programObj handle-arb))

(defglextfun ("glUniform1fARB" uniform-1f-arb) :void
  (location int)
  (v0 float))

(defglextfun ("glUniform2fARB" uniform-2f-arb) :void
  (location int)
  (v0 float)
  (v1 float))

(defglextfun ("glUniform3fARB" uniform-3f-arb) :void
  (location int)
  (v0 float)
  (v1 float)
  (v2 float))

(defglextfun ("glUniform4fARB" uniform-4f-arb) :void
  (location int)
  (v0 float)
  (v1 float)
  (v2 float)
  (v3 float))

(defglextfun ("glUniform1iARB" uniform-1i-arb) :void
  (location int)
  (v0 int))

(defglextfun ("glUniform2iARB" uniform-2i-arb) :void
  (location int)
  (v0 int)
  (v1 int))

(defglextfun ("glUniform3iARB" uniform-3i-arb) :void
  (location int)
  (v0 int)
  (v1 int)
  (v2 int))

(defglextfun ("glUniform4iARB" uniform-4i-arb) :void
  (location int)
  (v0 int)
  (v1 int)
  (v2 int)
  (v3 int))

(defglextfun ("glUniform1fvARB" uniform-1fv-arb) :void
  (location int)
  (count sizei)
  (value (:pointer float)))

(defglextfun ("glUniform2fvARB" uniform-2fv-arb) :void
  (location int)
  (count sizei)
  (value (:pointer float)))

(defglextfun ("glUniform3fvARB" uniform-3fv-arb) :void
  (location int)
  (count sizei)
  (value (:pointer float)))

(defglextfun ("glUniform4fvARB" uniform-4fv-arb) :void
  (location int)
  (count sizei)
  (value (:pointer float)))

(defglextfun ("glUniform1ivARB" uniform-1iv-arb) :void
  (location int)
  (count sizei)
  (value (:pointer int)))

(defglextfun ("glUniform2ivARB" uniform-2iv-arb) :void
  (location int)
  (count sizei)
  (value (:pointer int)))

(defglextfun ("glUniform3ivARB" uniform-3iv-arb) :void
  (location int)
  (count sizei)
  (value (:pointer int)))

(defglextfun ("glUniform4ivARB" uniform-4iv-arb) :void
  (location int)
  (count sizei)
  (value (:pointer int)))

(defglextfun ("glUniformMatrix2fvARB" uniform-matrix-2fv-arb) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix3fvARB" uniform-matrix-3fv-arb) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix4fvARB" uniform-matrix-4fv-arb) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glGetObjectParameterfvARB" get-object-parameter-fv-arb) :void
  (obj handle-arb)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetObjectParameterivARB" get-object-parameter-iv-arb) :void
  (obj handle-arb)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetInfoLogARB" get-info-log-arb) :void
  (obj handle-arb)
  (maxLength sizei)
  (length (:pointer sizei))
  (infoLog (:pointer char-arb)))

(defglextfun ("glGetAttachedObjectsARB" get-attached-objects-arb) :void
  (containerObj handle-arb)
  (maxCount sizei)
  (count (:pointer sizei))
  (obj (:pointer handle-arb)))

(defglextfun ("glGetUniformLocationARB" get-uniform-location-arb) int
  (programObj handle-arb)
  (name (:pointer char-arb)))

(defglextfun ("glGetActiveUniformARB" get-active-uniform-arb) :void
  (programObj handle-arb)
  (index uint)
  (maxLength sizei)
  (length (:pointer sizei))
  (size (:pointer int))
  (type (:pointer enum))
  (name (:pointer char-arb)))

(defglextfun ("glGetUniformfvARB" get-uniform-fv-arb) :void
  (programObj handle-arb)
  (location int)
  (params (:pointer float)))

(defglextfun ("glGetUniformivARB" get-uniform-iv-arb) :void
  (programObj handle-arb)
  (location int)
  (params (:pointer int)))

(defglextfun ("glGetShaderSourceARB" get-shader-source-arb) :void
  (obj handle-arb)
  (maxLength sizei)
  (length (:pointer sizei))
  (source (:pointer char-arb)))

(defglextfun ("glTexBufferARB" tex-buffer-arb) :void
  (target enum)
  (internalformat enum)
  (buffer uint))

(defglextfun ("glCompressedTexImage3DARB" compressed-tex-image-3d-arb) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glCompressedTexImage2DARB" compressed-tex-image-2d-arb) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (border int)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glCompressedTexImage1DARB" compressed-tex-image-1d-arb) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (border int)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glCompressedTexSubImage3DARB" compressed-tex-sub-image-3d-arb) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glCompressedTexSubImage2DARB" compressed-tex-sub-image-2d-arb) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glCompressedTexSubImage1DARB" compressed-tex-sub-image-1d-arb) :void
  (target enum)
  (level int)
  (xoffset int)
  (width sizei)
  (format enum)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glGetCompressedTexImageARB" get-compressed-tex-image-arb) :void
  (target enum)
  (level int)
  (img (:pointer :void)))

(defglextfun ("glLoadTransposeMatrixfARB" load-transpose-matrix-f-arb) :void
  (m (:pointer float)))

(defglextfun ("glLoadTransposeMatrixdARB" load-transpose-matrix-d-arb) :void
  (m (:pointer double)))

(defglextfun ("glMultTransposeMatrixfARB" mult-transpose-matrix-f-arb) :void
  (m (:pointer float)))

(defglextfun ("glMultTransposeMatrixdARB" mult-transpose-matrix-d-arb) :void
  (m (:pointer double)))

(defglextfun ("glWeightbvARB" weight-bv-arb) :void
  (size int)
  (weights (:pointer byte)))

(defglextfun ("glWeightsvARB" weight-sv-arb) :void
  (size int)
  (weights (:pointer short)))

(defglextfun ("glWeightivARB" weight-iv-arb) :void
  (size int)
  (weights (:pointer int)))

(defglextfun ("glWeightfvARB" weight-fv-arb) :void
  (size int)
  (weights (:pointer float)))

(defglextfun ("glWeightdvARB" weight-dv-arb) :void
  (size int)
  (weights (:pointer double)))

(defglextfun ("glWeightubvARB" weight-ubv-arb) :void
  (size int)
  (weights (:pointer ubyte)))

(defglextfun ("glWeightusvARB" weight-usv-arb) :void
  (size int)
  (weights (:pointer ushort)))

(defglextfun ("glWeightuivARB" weight-uiv-arb) :void
  (size int)
  (weights (:pointer uint)))

(defglextfun ("glWeightPointerARB" weight-pointer-arb) :void
  (size int)
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glVertexBlendARB" vertex-blend-arb) :void
  (count int))

(defglextfun ("glBindBufferARB" bind-buffer-arb) :void
  (target enum)
  (buffer uint))

(defglextfun ("glDeleteBuffersARB" delete-buffers-arb) :void
  (n sizei)
  (buffers (:pointer uint)))

(defglextfun ("glGenBuffersARB" gen-buffers-arb) :void
  (n sizei)
  (buffers (:pointer uint)))

(defglextfun ("glIsBufferARB" is-buffer-arb) boolean
  (buffer uint))

(defglextfun ("glBufferDataARB" buffer-data-arb) :void
  (target enum)
  (size sizeiptr-arb)
  (data (:pointer :void))
  (usage enum))

(defglextfun ("glBufferSubDataARB" buffer-sub-data-arb) :void
  (target enum)
  (offset intptr-arb)
  (size sizeiptr-arb)
  (data (:pointer :void)))

(defglextfun ("glGetBufferSubDataARB" get-buffer-sub-data-arb) :void
  (target enum)
  (offset intptr-arb)
  (size sizeiptr-arb)
  (data (:pointer :void)))

(defglextfun ("glMapBufferARB" map-buffer-arb) (:pointer :void)
  (target enum)
  (access enum))

(defglextfun ("glUnmapBufferARB" unmap-buffer-arb) boolean
  (target enum))

(defglextfun ("glGetBufferParameterivARB" get-buffer-parameter-iv-arb) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetBufferPointervARB" get-buffer-pointer-v-arb) :void
  (target enum)
  (pname enum)
  (params (:pointer (:pointer :void))))

(defglextfun ("glVertexAttrib1dARB" vertex-attrib-1d-arb) :void
  (index uint)
  (x double))

(defglextfun ("glVertexAttrib1dvARB" vertex-attrib-1dv-arb) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib1fARB" vertex-attrib-1f-arb) :void
  (index uint)
  (x float))

(defglextfun ("glVertexAttrib1fvARB" vertex-attrib-1fv-arb) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glVertexAttrib1sARB" vertex-attrib-1s-arb) :void
  (index uint)
  (x short))

(defglextfun ("glVertexAttrib1svARB" vertex-attrib-1sv-arb) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib2dARB" vertex-attrib-2d-arb) :void
  (index uint)
  (x double)
  (y double))

(defglextfun ("glVertexAttrib2dvARB" vertex-attrib-2dv-arb) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib2fARB" vertex-attrib-2f-arb) :void
  (index uint)
  (x float)
  (y float))

(defglextfun ("glVertexAttrib2fvARB" vertex-attrib-2fv-arb) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glVertexAttrib2sARB" vertex-attrib-2s-arb) :void
  (index uint)
  (x short)
  (y short))

(defglextfun ("glVertexAttrib2svARB" vertex-attrib-2sv-arb) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib3dARB" vertex-attrib-3d-arb) :void
  (index uint)
  (x double)
  (y double)
  (z double))

(defglextfun ("glVertexAttrib3dvARB" vertex-attrib-3dv-arb) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib3fARB" vertex-attrib-3f-arb) :void
  (index uint)
  (x float)
  (y float)
  (z float))

(defglextfun ("glVertexAttrib3fvARB" vertex-attrib-3fv-arb) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glVertexAttrib3sARB" vertex-attrib-3s-arb) :void
  (index uint)
  (x short)
  (y short)
  (z short))

(defglextfun ("glVertexAttrib3svARB" vertex-attrib-3sv-arb) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib4NbvARB" vertex-attrib-4nbv-arb) :void
  (index uint)
  (v (:pointer byte)))

(defglextfun ("glVertexAttrib4NivARB" vertex-attrib-4niv-arb) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttrib4NsvARB" vertex-attrib-4nsv-arb) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib4NubARB" vertex-attrib-4nub-arb) :void
  (index uint)
  (x ubyte)
  (y ubyte)
  (z ubyte)
  (w ubyte))

(defglextfun ("glVertexAttrib4NubvARB" vertex-attrib-4nubv-arb) :void
  (index uint)
  (v (:pointer ubyte)))

(defglextfun ("glVertexAttrib4NuivARB" vertex-attrib-4nuiv-arb) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttrib4NusvARB" vertex-attrib-4nusv-arb) :void
  (index uint)
  (v (:pointer ushort)))

(defglextfun ("glVertexAttrib4bvARB" vertex-attrib-4bv-arb) :void
  (index uint)
  (v (:pointer byte)))

(defglextfun ("glVertexAttrib4dARB" vertex-attrib-4d-arb) :void
  (index uint)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glVertexAttrib4dvARB" vertex-attrib-4dv-arb) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib4fARB" vertex-attrib-4f-arb) :void
  (index uint)
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glVertexAttrib4fvARB" vertex-attrib-4fv-arb) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glVertexAttrib4ivARB" vertex-attrib-4iv-arb) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttrib4sARB" vertex-attrib-4s-arb) :void
  (index uint)
  (x short)
  (y short)
  (z short)
  (w short))

(defglextfun ("glVertexAttrib4svARB" vertex-attrib-4sv-arb) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib4ubvARB" vertex-attrib-4ubv-arb) :void
  (index uint)
  (v (:pointer ubyte)))

(defglextfun ("glVertexAttrib4uivARB" vertex-attrib-4uiv-arb) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttrib4usvARB" vertex-attrib-4usv-arb) :void
  (index uint)
  (v (:pointer ushort)))

(defglextfun ("glVertexAttribPointerARB" vertex-attrib-pointer-arb) :void
  (index uint)
  (size int)
  (type enum)
  (normalized boolean)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glEnableVertexAttribArrayARB" enable-vertex-attrib-array-arb) :void
  (index uint))

(defglextfun ("glDisableVertexAttribArrayARB" disable-vertex-attrib-array-arb) :void
  (index uint))

(defglextfun ("glGetVertexAttribdvARB" get-vertex-attrib-dv-arb) :void
  (index uint)
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glGetVertexAttribfvARB" get-vertex-attrib-fv-arb) :void
  (index uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetVertexAttribivARB" get-vertex-attrib-iv-arb) :void
  (index uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetVertexAttribPointervARB" get-vertex-attrib-pointer-v-arb) :void
  (index uint)
  (pname enum)
  (pointer (:pointer (:pointer :void))))

(defglextfun ("glBindAttribLocationARB" bind-attrib-location-arb) :void
  (programObj handle-arb)
  (index uint)
  (name (:pointer char-arb)))

(defglextfun ("glGetActiveAttribARB" get-active-attrib-arb) :void
  (programObj handle-arb)
  (index uint)
  (maxLength sizei)
  (length (:pointer sizei))
  (size (:pointer int))
  (type (:pointer enum))
  (name (:pointer char-arb)))

(defglextfun ("glGetAttribLocationARB" get-attrib-location-arb) int
  (programObj handle-arb)
  (name (:pointer char-arb)))

(defglextfun ("glWindowPos2dARB" window-pos-2d-arb) :void
  (x double)
  (y double))

(defglextfun ("glWindowPos2dvARB" window-pos-2dv-arb) :void
  (v (:pointer double)))

(defglextfun ("glWindowPos2fARB" window-pos-2f-arb) :void
  (x float)
  (y float))

(defglextfun ("glWindowPos2fvARB" window-pos-2fv-arb) :void
  (v (:pointer float)))

(defglextfun ("glWindowPos2iARB" window-pos-2i-arb) :void
  (x int)
  (y int))

(defglextfun ("glWindowPos2ivARB" window-pos-2iv-arb) :void
  (v (:pointer int)))

(defglextfun ("glWindowPos2sARB" window-pos-2s-arb) :void
  (x short)
  (y short))

(defglextfun ("glWindowPos2svARB" window-pos-2sv-arb) :void
  (v (:pointer short)))

(defglextfun ("glWindowPos3dARB" window-pos-3d-arb) :void
  (x double)
  (y double)
  (z double))

(defglextfun ("glWindowPos3dvARB" window-pos-3dv-arb) :void
  (v (:pointer double)))

(defglextfun ("glWindowPos3fARB" window-pos-3f-arb) :void
  (x float)
  (y float)
  (z float))

(defglextfun ("glWindowPos3fvARB" window-pos-3fv-arb) :void
  (v (:pointer float)))

(defglextfun ("glWindowPos3iARB" window-pos-3i-arb) :void
  (x int)
  (y int)
  (z int))

(defglextfun ("glWindowPos3ivARB" window-pos-3iv-arb) :void
  (v (:pointer int)))

(defglextfun ("glWindowPos3sARB" window-pos-3s-arb) :void
  (x short)
  (y short)
  (z short))

(defglextfun ("glWindowPos3svARB" window-pos-3sv-arb) :void
  (v (:pointer short)))

(defglextfun ("glDrawBuffersATI" draw-buffers-ati) :void
  (n sizei)
  (bufs (:pointer enum)))

(defglextfun ("glElementPointerATI" element-pointer-ati) :void
  (type enum)
  (pointer (:pointer :void)))

(defglextfun ("glDrawElementArrayATI" draw-element-array-ati) :void
  (mode enum)
  (count sizei))

(defglextfun ("glDrawRangeElementArrayATI" draw-range-element-array-ati) :void
  (mode enum)
  (start uint)
  (end uint)
  (count sizei))

(defglextfun ("glTexBumpParameterivATI" tex-bump-parameter-iv-ati) :void
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glTexBumpParameterfvATI" tex-bump-parameter-fv-ati) :void
  (pname enum)
  (param (:pointer float)))

(defglextfun ("glGetTexBumpParameterivATI" get-tex-bump-parameter-iv-ati) :void
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glGetTexBumpParameterfvATI" get-tex-bump-parameter-fv-ati) :void
  (pname enum)
  (param (:pointer float)))

(defglextfun ("glGenFragmentShadersATI" gen-fragment-shaders-ati) uint
  (range uint))

(defglextfun ("glBindFragmentShaderATI" bind-fragment-shader-ati) :void
  (id uint))

(defglextfun ("glDeleteFragmentShaderATI" delete-fragment-shader-ati) :void
  (id uint))

(defglextfun ("glBeginFragmentShaderATI" begin-fragment-shader-ati) :void)

(defglextfun ("glEndFragmentShaderATI" end-fragment-shader-ati) :void)

(defglextfun ("glPassTexCoordATI" pass-tex-coord-ati) :void
  (dst uint)
  (coord uint)
  (swizzle enum))

(defglextfun ("glSampleMapATI" sample-map-ati) :void
  (dst uint)
  (interp uint)
  (swizzle enum))

(defglextfun ("glColorFragmentOp1ATI" color-fragment-op-1-ati) :void
  (op enum)
  (dst uint)
  (dstMask uint)
  (dstMod uint)
  (arg1 uint)
  (arg1Rep uint)
  (arg1Mod uint))

(defglextfun ("glColorFragmentOp2ATI" color-fragment-op-2-ati) :void
  (op enum)
  (dst uint)
  (dstMask uint)
  (dstMod uint)
  (arg1 uint)
  (arg1Rep uint)
  (arg1Mod uint)
  (arg2 uint)
  (arg2Rep uint)
  (arg2Mod uint))

(defglextfun ("glColorFragmentOp3ATI" color-fragment-op-3-ati) :void
  (op enum)
  (dst uint)
  (dstMask uint)
  (dstMod uint)
  (arg1 uint)
  (arg1Rep uint)
  (arg1Mod uint)
  (arg2 uint)
  (arg2Rep uint)
  (arg2Mod uint)
  (arg3 uint)
  (arg3Rep uint)
  (arg3Mod uint))

(defglextfun ("glAlphaFragmentOp1ATI" alpha-fragment-op-1-ati) :void
  (op enum)
  (dst uint)
  (dstMod uint)
  (arg1 uint)
  (arg1Rep uint)
  (arg1Mod uint))

(defglextfun ("glAlphaFragmentOp2ATI" alpha-fragment-op-2-ati) :void
  (op enum)
  (dst uint)
  (dstMod uint)
  (arg1 uint)
  (arg1Rep uint)
  (arg1Mod uint)
  (arg2 uint)
  (arg2Rep uint)
  (arg2Mod uint))

(defglextfun ("glAlphaFragmentOp3ATI" alpha-fragment-op-3-ati) :void
  (op enum)
  (dst uint)
  (dstMod uint)
  (arg1 uint)
  (arg1Rep uint)
  (arg1Mod uint)
  (arg2 uint)
  (arg2Rep uint)
  (arg2Mod uint)
  (arg3 uint)
  (arg3Rep uint)
  (arg3Mod uint))

(defglextfun ("glSetFragmentShaderConstantATI" set-fragment-shader-constant-ati) :void
  (dst uint)
  (value (:pointer float)))

(defglextfun ("glMapObjectBufferATI" map-object-buffer-ati) (:pointer :void)
  (buffer uint))

(defglextfun ("glUnmapObjectBufferATI" unmap-object-buffer-ati) :void
  (buffer uint))

(defglextfun ("glPNTrianglesiATI" pntriangles-i-ati) :void
  (pname enum)
  (param int))

(defglextfun ("glPNTrianglesfATI" pntriangles-f-ati) :void
  (pname enum)
  (param float))

(defglextfun ("glStencilOpSeparateATI" stencil-op-separate-ati) :void
  (face enum)
  (sfail enum)
  (dpfail enum)
  (dppass enum))

(defglextfun ("glStencilFuncSeparateATI" stencil-func-separate-ati) :void
  (frontfunc enum)
  (backfunc enum)
  (ref int)
  (mask uint))

(defglextfun ("glNewObjectBufferATI" new-object-buffer-ati) uint
  (size sizei)
  (pointer (:pointer :void))
  (usage enum))

(defglextfun ("glIsObjectBufferATI" is-object-buffer-ati) boolean
  (buffer uint))

(defglextfun ("glUpdateObjectBufferATI" update-object-buffer-ati) :void
  (buffer uint)
  (offset uint)
  (size sizei)
  (pointer (:pointer :void))
  (preserve enum))

(defglextfun ("glGetObjectBufferfvATI" get-object-buffer-fv-ati) :void
  (buffer uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetObjectBufferivATI" get-object-buffer-iv-ati) :void
  (buffer uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glFreeObjectBufferATI" free-object-buffer-ati) :void
  (buffer uint))

(defglextfun ("glArrayObjectATI" array-object-ati) :void
  (array enum)
  (size int)
  (type enum)
  (stride sizei)
  (buffer uint)
  (offset uint))

(defglextfun ("glGetArrayObjectfvATI" get-array-object-fv-ati) :void
  (array enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetArrayObjectivATI" get-array-object-iv-ati) :void
  (array enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glVariantArrayObjectATI" variant-array-object-ati) :void
  (id uint)
  (type enum)
  (stride sizei)
  (buffer uint)
  (offset uint))

(defglextfun ("glGetVariantArrayObjectfvATI" get-variant-array-object-fv-ati) :void
  (id uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetVariantArrayObjectivATI" get-variant-array-object-iv-ati) :void
  (id uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glVertexAttribArrayObjectATI" vertex-attrib-array-object-ati) :void
  (index uint)
  (size int)
  (type enum)
  (normalized boolean)
  (stride sizei)
  (buffer uint)
  (offset uint))

(defglextfun ("glGetVertexAttribArrayObjectfvATI" get-vertex-attrib-array-object-fv-ati) :void
  (index uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetVertexAttribArrayObjectivATI" get-vertex-attrib-array-object-iv-ati) :void
  (index uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glVertexStream1sATI" vertex-stream-1s-ati) :void
  (stream enum)
  (x short))

(defglextfun ("glVertexStream1svATI" vertex-stream-1sv-ati) :void
  (stream enum)
  (coords (:pointer short)))

(defglextfun ("glVertexStream1iATI" vertex-stream-1i-ati) :void
  (stream enum)
  (x int))

(defglextfun ("glVertexStream1ivATI" vertex-stream-1iv-ati) :void
  (stream enum)
  (coords (:pointer int)))

(defglextfun ("glVertexStream1fATI" vertex-stream-1f-ati) :void
  (stream enum)
  (x float))

(defglextfun ("glVertexStream1fvATI" vertex-stream-1fv-ati) :void
  (stream enum)
  (coords (:pointer float)))

(defglextfun ("glVertexStream1dATI" vertex-stream-1d-ati) :void
  (stream enum)
  (x double))

(defglextfun ("glVertexStream1dvATI" vertex-stream-1dv-ati) :void
  (stream enum)
  (coords (:pointer double)))

(defglextfun ("glVertexStream2sATI" vertex-stream-2s-ati) :void
  (stream enum)
  (x short)
  (y short))

(defglextfun ("glVertexStream2svATI" vertex-stream-2sv-ati) :void
  (stream enum)
  (coords (:pointer short)))

(defglextfun ("glVertexStream2iATI" vertex-stream-2i-ati) :void
  (stream enum)
  (x int)
  (y int))

(defglextfun ("glVertexStream2ivATI" vertex-stream-2iv-ati) :void
  (stream enum)
  (coords (:pointer int)))

(defglextfun ("glVertexStream2fATI" vertex-stream-2f-ati) :void
  (stream enum)
  (x float)
  (y float))

(defglextfun ("glVertexStream2fvATI" vertex-stream-2fv-ati) :void
  (stream enum)
  (coords (:pointer float)))

(defglextfun ("glVertexStream2dATI" vertex-stream-2d-ati) :void
  (stream enum)
  (x double)
  (y double))

(defglextfun ("glVertexStream2dvATI" vertex-stream-2dv-ati) :void
  (stream enum)
  (coords (:pointer double)))

(defglextfun ("glVertexStream3sATI" vertex-stream-3s-ati) :void
  (stream enum)
  (x short)
  (y short)
  (z short))

(defglextfun ("glVertexStream3svATI" vertex-stream-3sv-ati) :void
  (stream enum)
  (coords (:pointer short)))

(defglextfun ("glVertexStream3iATI" vertex-stream-3i-ati) :void
  (stream enum)
  (x int)
  (y int)
  (z int))

(defglextfun ("glVertexStream3ivATI" vertex-stream-3iv-ati) :void
  (stream enum)
  (coords (:pointer int)))

(defglextfun ("glVertexStream3fATI" vertex-stream-3f-ati) :void
  (stream enum)
  (x float)
  (y float)
  (z float))

(defglextfun ("glVertexStream3fvATI" vertex-stream-3fv-ati) :void
  (stream enum)
  (coords (:pointer float)))

(defglextfun ("glVertexStream3dATI" vertex-stream-3d-ati) :void
  (stream enum)
  (x double)
  (y double)
  (z double))

(defglextfun ("glVertexStream3dvATI" vertex-stream-3dv-ati) :void
  (stream enum)
  (coords (:pointer double)))

(defglextfun ("glVertexStream4sATI" vertex-stream-4s-ati) :void
  (stream enum)
  (x short)
  (y short)
  (z short)
  (w short))

(defglextfun ("glVertexStream4svATI" vertex-stream-4sv-ati) :void
  (stream enum)
  (coords (:pointer short)))

(defglextfun ("glVertexStream4iATI" vertex-stream-4i-ati) :void
  (stream enum)
  (x int)
  (y int)
  (z int)
  (w int))

(defglextfun ("glVertexStream4ivATI" vertex-stream-4iv-ati) :void
  (stream enum)
  (coords (:pointer int)))

(defglextfun ("glVertexStream4fATI" vertex-stream-4f-ati) :void
  (stream enum)
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glVertexStream4fvATI" vertex-stream-4fv-ati) :void
  (stream enum)
  (coords (:pointer float)))

(defglextfun ("glVertexStream4dATI" vertex-stream-4d-ati) :void
  (stream enum)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glVertexStream4dvATI" vertex-stream-4dv-ati) :void
  (stream enum)
  (coords (:pointer double)))

(defglextfun ("glNormalStream3bATI" normal-stream-3b-ati) :void
  (stream enum)
  (nx byte)
  (ny byte)
  (nz byte))

(defglextfun ("glNormalStream3bvATI" normal-stream-3bv-ati) :void
  (stream enum)
  (coords (:pointer byte)))

(defglextfun ("glNormalStream3sATI" normal-stream-3s-ati) :void
  (stream enum)
  (nx short)
  (ny short)
  (nz short))

(defglextfun ("glNormalStream3svATI" normal-stream-3sv-ati) :void
  (stream enum)
  (coords (:pointer short)))

(defglextfun ("glNormalStream3iATI" normal-stream-3i-ati) :void
  (stream enum)
  (nx int)
  (ny int)
  (nz int))

(defglextfun ("glNormalStream3ivATI" normal-stream-3iv-ati) :void
  (stream enum)
  (coords (:pointer int)))

(defglextfun ("glNormalStream3fATI" normal-stream-3f-ati) :void
  (stream enum)
  (nx float)
  (ny float)
  (nz float))

(defglextfun ("glNormalStream3fvATI" normal-stream-3fv-ati) :void
  (stream enum)
  (coords (:pointer float)))

(defglextfun ("glNormalStream3dATI" normal-stream-3d-ati) :void
  (stream enum)
  (nx double)
  (ny double)
  (nz double))

(defglextfun ("glNormalStream3dvATI" normal-stream-3dv-ati) :void
  (stream enum)
  (coords (:pointer double)))

(defglextfun ("glClientActiveVertexStreamATI" client-active-vertex-stream-ati) :void
  (stream enum))

(defglextfun ("glVertexBlendEnviATI" vertex-blend-env-i-ati) :void
  (pname enum)
  (param int))

(defglextfun ("glVertexBlendEnvfATI" vertex-blend-env-f-ati) :void
  (pname enum)
  (param float))

(defglextfun ("glUniformBufferEXT" uniform-buffer-ext) :void
  (program uint)
  (location int)
  (buffer uint))

(defglextfun ("glGetUniformBufferSizeEXT" get-uniform-buffer-size-ext) int
  (program uint)
  (location int))

(defglextfun ("glGetUniformOffsetEXT" get-uniform-offset-ext) intptr
  (program uint)
  (location int))

(defglextfun ("glBlendColorEXT" blend-color-ext) :void
  (red float)
  (green float)
  (blue float)
  (alpha float))

(defglextfun ("glBlendEquationSeparateEXT" blend-equation-separate-ext) :void
  (modeRGB enum)
  (modeAlpha enum))

(defglextfun ("glBlendFuncSeparateEXT" blend-func-separate-ext) :void
  (sfactorRGB enum)
  (dfactorRGB enum)
  (sfactorAlpha enum)
  (dfactorAlpha enum))

(defglextfun ("glColorSubTableEXT" color-sub-table-ext) :void
  (target enum)
  (start sizei)
  (count sizei)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glCopyColorSubTableEXT" copy-color-sub-table-ext) :void
  (target enum)
  (start sizei)
  (x int)
  (y int)
  (width sizei))

(defglextfun ("glLockArraysEXT" lock-arrays-ext) :void
  (first int)
  (count sizei))

(defglextfun ("glUnlockArraysEXT" unlock-arrays-ext) :void)

(defglextfun ("glConvolutionFilter1DEXT" convolution-filter-1d-ext) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (format enum)
  (type enum)
  (image (:pointer :void)))

(defglextfun ("glConvolutionFilter2DEXT" convolution-filter-2d-ext) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (image (:pointer :void)))

(defglextfun ("glConvolutionParameterfEXT" convolution-parameter-f-ext) :void
  (target enum)
  (pname enum)
  (params float))

(defglextfun ("glConvolutionParameterfvEXT" convolution-parameter-fv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glConvolutionParameteriEXT" convolution-parameter-i-ext) :void
  (target enum)
  (pname enum)
  (params int))

(defglextfun ("glConvolutionParameterivEXT" convolution-parameter-iv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glCopyConvolutionFilter1DEXT" copy-convolution-filter-1d-ext) :void
  (target enum)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei))

(defglextfun ("glCopyConvolutionFilter2DEXT" copy-convolution-filter-2d-ext) :void
  (target enum)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glGetConvolutionFilterEXT" get-convolution-filter-ext) :void
  (target enum)
  (format enum)
  (type enum)
  (image (:pointer :void)))

(defglextfun ("glGetConvolutionParameterfvEXT" get-convolution-parameter-fv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetConvolutionParameterivEXT" get-convolution-parameter-iv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetSeparableFilterEXT" get-separable-filter-ext) :void
  (target enum)
  (format enum)
  (type enum)
  (row (:pointer :void))
  (column (:pointer :void))
  (span (:pointer :void)))

(defglextfun ("glSeparableFilter2DEXT" separable-filter-2d-ext) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (row (:pointer :void))
  (column (:pointer :void)))

(defglextfun ("glTangent3bEXT" tangent-3b-ext) :void
  (tx byte)
  (ty byte)
  (tz byte))

(defglextfun ("glTangent3bvEXT" tangent-3bv-ext) :void
  (v (:pointer byte)))

(defglextfun ("glTangent3dEXT" tangent-3d-ext) :void
  (tx double)
  (ty double)
  (tz double))

(defglextfun ("glTangent3dvEXT" tangent-3dv-ext) :void
  (v (:pointer double)))

(defglextfun ("glTangent3fEXT" tangent-3f-ext) :void
  (tx float)
  (ty float)
  (tz float))

(defglextfun ("glTangent3fvEXT" tangent-3fv-ext) :void
  (v (:pointer float)))

(defglextfun ("glTangent3iEXT" tangent-3i-ext) :void
  (tx int)
  (ty int)
  (tz int))

(defglextfun ("glTangent3ivEXT" tangent-3iv-ext) :void
  (v (:pointer int)))

(defglextfun ("glTangent3sEXT" tangent-3s-ext) :void
  (tx short)
  (ty short)
  (tz short))

(defglextfun ("glTangent3svEXT" tangent-3sv-ext) :void
  (v (:pointer short)))

(defglextfun ("glBinormal3bEXT" binormal-3b-ext) :void
  (bx byte)
  (by byte)
  (bz byte))

(defglextfun ("glBinormal3bvEXT" binormal-3bv-ext) :void
  (v (:pointer byte)))

(defglextfun ("glBinormal3dEXT" binormal-3d-ext) :void
  (bx double)
  (by double)
  (bz double))

(defglextfun ("glBinormal3dvEXT" binormal-3dv-ext) :void
  (v (:pointer double)))

(defglextfun ("glBinormal3fEXT" binormal-3f-ext) :void
  (bx float)
  (by float)
  (bz float))

(defglextfun ("glBinormal3fvEXT" binormal-3fv-ext) :void
  (v (:pointer float)))

(defglextfun ("glBinormal3iEXT" binormal-3i-ext) :void
  (bx int)
  (by int)
  (bz int))

(defglextfun ("glBinormal3ivEXT" binormal-3iv-ext) :void
  (v (:pointer int)))

(defglextfun ("glBinormal3sEXT" binormal-3s-ext) :void
  (bx short)
  (by short)
  (bz short))

(defglextfun ("glBinormal3svEXT" binormal-3sv-ext) :void
  (v (:pointer short)))

(defglextfun ("glTangentPointerEXT" tangent-pointer-ext) :void
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glBinormalPointerEXT" binormal-pointer-ext) :void
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glCopyTexImage1DEXT" copy-tex-image-1d-ext) :void
  (target enum)
  (level int)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (border int))

(defglextfun ("glCopyTexImage2DEXT" copy-tex-image-2d-ext) :void
  (target enum)
  (level int)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (height sizei)
  (border int))

(defglextfun ("glCopyTexSubImage1DEXT" copy-tex-sub-image-1d-ext) :void
  (target enum)
  (level int)
  (xoffset int)
  (x int)
  (y int)
  (width sizei))

(defglextfun ("glCopyTexSubImage2DEXT" copy-tex-sub-image-2d-ext) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glCopyTexSubImage3DEXT" copy-tex-sub-image-3d-ext) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glCullParameterdvEXT" cull-parameter-dv-ext) :void
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glCullParameterfvEXT" cull-parameter-fv-ext) :void
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glDepthBoundsEXT" depth-bounds-ext) :void
  (zmin clampd)
  (zmax clampd))

(defglextfun ("glMatrixLoadfEXT" matrix-load-f-ext) :void
  (mode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixLoaddEXT" matrix-load-d-ext) :void
  (mode enum)
  (m (:pointer double)))

(defglextfun ("glMatrixMultfEXT" matrix-mult-f-ext) :void
  (mode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixMultdEXT" matrix-mult-d-ext) :void
  (mode enum)
  (m (:pointer double)))

(defglextfun ("glMatrixLoadIdentityEXT" matrix-load-identity-ext) :void
  (mode enum))

(defglextfun ("glMatrixRotatefEXT" matrix-rotate-f-ext) :void
  (mode enum)
  (angle float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glMatrixRotatedEXT" matrix-rotate-d-ext) :void
  (mode enum)
  (angle double)
  (x double)
  (y double)
  (z double))

(defglextfun ("glMatrixScalefEXT" matrix-scale-f-ext) :void
  (mode enum)
  (x float)
  (y float)
  (z float))

(defglextfun ("glMatrixScaledEXT" matrix-scale-d-ext) :void
  (mode enum)
  (x double)
  (y double)
  (z double))

(defglextfun ("glMatrixTranslatefEXT" matrix-translate-f-ext) :void
  (mode enum)
  (x float)
  (y float)
  (z float))

(defglextfun ("glMatrixTranslatedEXT" matrix-translate-d-ext) :void
  (mode enum)
  (x double)
  (y double)
  (z double))

(defglextfun ("glMatrixFrustumEXT" matrix-frustum-ext) :void
  (mode enum)
  (left double)
  (right double)
  (bottom double)
  (top double)
  (zNear double)
  (zFar double))

(defglextfun ("glMatrixOrthoEXT" matrix-ortho-ext) :void
  (mode enum)
  (left double)
  (right double)
  (bottom double)
  (top double)
  (zNear double)
  (zFar double))

(defglextfun ("glMatrixPopEXT" matrix-pop-ext) :void
  (mode enum))

(defglextfun ("glMatrixPushEXT" matrix-push-ext) :void
  (mode enum))

(defglextfun ("glClientAttribDefaultEXT" client-attrib-default-ext) :void
  (mask ClientAttribMask))

(defglextfun ("glPushClientAttribDefaultEXT" push-client-attrib-default-ext) :void
  (mask ClientAttribMask))

(defglextfun ("glTextureParameterfEXT" texture-parameter-f-ext) :void
  (texture uint)
  (target enum)
  (pname enum)
  (param float))

(defglextfun ("glTextureParameterfvEXT" texture-parameter-fv-ext) :void
  (texture uint)
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glTextureParameteriEXT" texture-parameter-i-ext) :void
  (texture uint)
  (target enum)
  (pname enum)
  (param int))

(defglextfun ("glTextureParameterivEXT" texture-parameter-iv-ext) :void
  (texture uint)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTextureImage1DEXT" texture-image-1d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTextureImage2DEXT" texture-image-2d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (height sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTextureSubImage1DEXT" texture-sub-image-1d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (xoffset int)
  (width sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTextureSubImage2DEXT" texture-sub-image-2d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glCopyTextureImage1DEXT" copy-texture-image-1d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (border int))

(defglextfun ("glCopyTextureImage2DEXT" copy-texture-image-2d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (height sizei)
  (border int))

(defglextfun ("glCopyTextureSubImage1DEXT" copy-texture-sub-image-1d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (xoffset int)
  (x int)
  (y int)
  (width sizei))

(defglextfun ("glCopyTextureSubImage2DEXT" copy-texture-sub-image-2d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glGetTextureImageEXT" get-texture-image-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glGetTextureParameterfvEXT" get-texture-parameter-fv-ext) :void
  (texture uint)
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetTextureParameterivEXT" get-texture-parameter-iv-ext) :void
  (texture uint)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetTextureLevelParameterfvEXT" get-texture-level-parameter-fv-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetTextureLevelParameterivEXT" get-texture-level-parameter-iv-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTextureImage3DEXT" texture-image-3d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTextureSubImage3DEXT" texture-sub-image-3d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glCopyTextureSubImage3DEXT" copy-texture-sub-image-3d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glBindMultiTextureEXT" bind-multi-texture-ext) :void
  (texunit enum)
  (target enum)
  (texture uint))

(defglextfun ("glMultiTexCoordPointerEXT" multi-tex-coord-pointer-ext) :void
  (texunit enum)
  (size int)
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glMultiTexEnvfEXT" multi-tex-env-f-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (param float))

(defglextfun ("glMultiTexEnvfvEXT" multi-tex-env-fv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glMultiTexEnviEXT" multi-tex-env-i-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (param int))

(defglextfun ("glMultiTexEnvivEXT" multi-tex-env-iv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glMultiTexGendEXT" multi-tex-gen-d-ext) :void
  (texunit enum)
  (coord enum)
  (pname enum)
  (param double))

(defglextfun ("glMultiTexGendvEXT" multi-tex-gen-dv-ext) :void
  (texunit enum)
  (coord enum)
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glMultiTexGenfEXT" multi-tex-gen-f-ext) :void
  (texunit enum)
  (coord enum)
  (pname enum)
  (param float))

(defglextfun ("glMultiTexGenfvEXT" multi-tex-gen-fv-ext) :void
  (texunit enum)
  (coord enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glMultiTexGeniEXT" multi-tex-gen-i-ext) :void
  (texunit enum)
  (coord enum)
  (pname enum)
  (param int))

(defglextfun ("glMultiTexGenivEXT" multi-tex-gen-iv-ext) :void
  (texunit enum)
  (coord enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetMultiTexEnvfvEXT" get-multi-tex-env-fv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetMultiTexEnvivEXT" get-multi-tex-env-iv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetMultiTexGendvEXT" get-multi-tex-gen-dv-ext) :void
  (texunit enum)
  (coord enum)
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glGetMultiTexGenfvEXT" get-multi-tex-gen-fv-ext) :void
  (texunit enum)
  (coord enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetMultiTexGenivEXT" get-multi-tex-gen-iv-ext) :void
  (texunit enum)
  (coord enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glMultiTexParameteriEXT" multi-tex-parameter-i-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (param int))

(defglextfun ("glMultiTexParameterivEXT" multi-tex-parameter-iv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glMultiTexParameterfEXT" multi-tex-parameter-f-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (param float))

(defglextfun ("glMultiTexParameterfvEXT" multi-tex-parameter-fv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glMultiTexImage1DEXT" multi-tex-image-1d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glMultiTexImage2DEXT" multi-tex-image-2d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (height sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glMultiTexSubImage1DEXT" multi-tex-sub-image-1d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (xoffset int)
  (width sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glMultiTexSubImage2DEXT" multi-tex-sub-image-2d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glCopyMultiTexImage1DEXT" copy-multi-tex-image-1d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (border int))

(defglextfun ("glCopyMultiTexImage2DEXT" copy-multi-tex-image-2d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (height sizei)
  (border int))

(defglextfun ("glCopyMultiTexSubImage1DEXT" copy-multi-tex-sub-image-1d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (xoffset int)
  (x int)
  (y int)
  (width sizei))

(defglextfun ("glCopyMultiTexSubImage2DEXT" copy-multi-tex-sub-image-2d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glGetMultiTexImageEXT" get-multi-tex-image-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glGetMultiTexParameterfvEXT" get-multi-tex-parameter-fv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetMultiTexParameterivEXT" get-multi-tex-parameter-iv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetMultiTexLevelParameterfvEXT" get-multi-tex-level-parameter-fv-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetMultiTexLevelParameterivEXT" get-multi-tex-level-parameter-iv-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glMultiTexImage3DEXT" multi-tex-image-3d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glMultiTexSubImage3DEXT" multi-tex-sub-image-3d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glCopyMultiTexSubImage3DEXT" copy-multi-tex-sub-image-3d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glEnableClientStateIndexedEXT" enable-client-state-indexed-ext) :void
  (array enum)
  (index uint))

(defglextfun ("glDisableClientStateIndexedEXT" disable-client-state-indexed-ext) :void
  (array enum)
  (index uint))

(defglextfun ("glGetFloatIndexedvEXT" get-float-indexed-v-ext) :void
  (target enum)
  (index uint)
  (data (:pointer float)))

(defglextfun ("glGetDoubleIndexedvEXT" get-double-indexed-v-ext) :void
  (target enum)
  (index uint)
  (data (:pointer double)))

(defglextfun ("glGetPointerIndexedvEXT" get-pointer-indexed-v-ext) :void
  (target enum)
  (index uint)
  (data (:pointer (:pointer :void))))

(defglextfun ("glEnableIndexedEXT" enable-indexed-ext) :void
  (target enum)
  (index uint))

(defglextfun ("glDisableIndexedEXT" disable-indexed-ext) :void
  (target enum)
  (index uint))

(defglextfun ("glIsEnabledIndexedEXT" is-enabled-indexed-ext) boolean
  (target enum)
  (index uint))

(defglextfun ("glGetIntegerIndexedvEXT" get-integer-indexed-v-ext) :void
  (target enum)
  (index uint)
  (data (:pointer int)))

(defglextfun ("glGetBooleanIndexedvEXT" get-boolean-indexed-v-ext) :void
  (target enum)
  (index uint)
  (data (:pointer boolean)))

(defglextfun ("glCompressedTextureImage3DEXT" compressed-texture-image-3d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glCompressedTextureImage2DEXT" compressed-texture-image-2d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (border int)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glCompressedTextureImage1DEXT" compressed-texture-image-1d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (border int)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glCompressedTextureSubImage3DEXT" compressed-texture-sub-image-3d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glCompressedTextureSubImage2DEXT" compressed-texture-sub-image-2d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glCompressedTextureSubImage1DEXT" compressed-texture-sub-image-1d-ext) :void
  (texture uint)
  (target enum)
  (level int)
  (xoffset int)
  (width sizei)
  (format enum)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glGetCompressedTextureImageEXT" get-compressed-texture-image-ext) :void
  (texture uint)
  (target enum)
  (lod int)
  (img (:pointer :void)))

(defglextfun ("glCompressedMultiTexImage3DEXT" compressed-multi-tex-image-3d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glCompressedMultiTexImage2DEXT" compressed-multi-tex-image-2d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (border int)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glCompressedMultiTexImage1DEXT" compressed-multi-tex-image-1d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (border int)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glCompressedMultiTexSubImage3DEXT" compressed-multi-tex-sub-image-3d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glCompressedMultiTexSubImage2DEXT" compressed-multi-tex-sub-image-2d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glCompressedMultiTexSubImage1DEXT" compressed-multi-tex-sub-image-1d-ext) :void
  (texunit enum)
  (target enum)
  (level int)
  (xoffset int)
  (width sizei)
  (format enum)
  (imageSize sizei)
  (bits (:pointer :void)))

(defglextfun ("glGetCompressedMultiTexImageEXT" get-compressed-multi-tex-image-ext) :void
  (texunit enum)
  (target enum)
  (lod int)
  (img (:pointer :void)))

(defglextfun ("glMatrixLoadTransposefEXT" matrix-load-transpose-f-ext) :void
  (mode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixLoadTransposedEXT" matrix-load-transpose-d-ext) :void
  (mode enum)
  (m (:pointer double)))

(defglextfun ("glMatrixMultTransposefEXT" matrix-mult-transpose-f-ext) :void
  (mode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixMultTransposedEXT" matrix-mult-transpose-d-ext) :void
  (mode enum)
  (m (:pointer double)))

(defglextfun ("glNamedBufferDataEXT" named-buffer-data-ext) :void
  (buffer uint)
  (size sizeiptr)
  (data (:pointer :void))
  (usage enum))

(defglextfun ("glNamedBufferSubDataEXT" named-buffer-sub-data-ext) :void
  (buffer uint)
  (offset intptr)
  (size sizeiptr)
  (data (:pointer :void)))

(defglextfun ("glMapNamedBufferEXT" map-named-buffer-ext) (:pointer :void)
  (buffer uint)
  (access enum))

(defglextfun ("glUnmapNamedBufferEXT" unmap-named-buffer-ext) boolean
  (buffer uint))

(defglextfun ("glGetNamedBufferParameterivEXT" get-named-buffer-parameter-iv-ext) :void
  (buffer uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetNamedBufferPointervEXT" get-named-buffer-pointer-v-ext) :void
  (buffer uint)
  (pname enum)
  (params (:pointer (:pointer :void))))

(defglextfun ("glGetNamedBufferSubDataEXT" get-named-buffer-sub-data-ext) :void
  (buffer uint)
  (offset intptr)
  (size sizeiptr)
  (data (:pointer :void)))

(defglextfun ("glTextureBufferEXT" texture-buffer-ext) :void
  (texture uint)
  (target enum)
  (internalformat enum)
  (buffer uint))

(defglextfun ("glMultiTexBufferEXT" multi-tex-buffer-ext) :void
  (texunit enum)
  (target enum)
  (internalformat enum)
  (buffer uint))

(defglextfun ("glTextureParameterIivEXT" texture-parameter-iiv-ext) :void
  (texture uint)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTextureParameterIuivEXT" texture-parameter-iuiv-ext) :void
  (texture uint)
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetTextureParameterIivEXT" get-texture-parameter-iiv-ext) :void
  (texture uint)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetTextureParameterIuivEXT" get-texture-parameter-iuiv-ext) :void
  (texture uint)
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glMultiTexParameterIivEXT" multi-tex-parameter-iiv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glMultiTexParameterIuivEXT" multi-tex-parameter-iuiv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetMultiTexParameterIivEXT" get-multi-tex-parameter-iiv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetMultiTexParameterIuivEXT" get-multi-tex-parameter-iuiv-ext) :void
  (texunit enum)
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glNamedProgramLocalParameters4fvEXT" named-program-local-parameters-4fv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (count sizei)
  (params (:pointer float)))

(defglextfun ("glNamedProgramLocalParameterI4iEXT" named-program-local-parameter-i4i-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (x int)
  (y int)
  (z int)
  (w int))

(defglextfun ("glNamedProgramLocalParameterI4ivEXT" named-program-local-parameter-i4iv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (params (:pointer int)))

(defglextfun ("glNamedProgramLocalParametersI4ivEXT" named-program-local-parameters-i4iv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (count sizei)
  (params (:pointer int)))

(defglextfun ("glNamedProgramLocalParameterI4uiEXT" named-program-local-parameter-i4ui-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (x uint)
  (y uint)
  (z uint)
  (w uint))

(defglextfun ("glNamedProgramLocalParameterI4uivEXT" named-program-local-parameter-i4uiv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (params (:pointer uint)))

(defglextfun ("glNamedProgramLocalParametersI4uivEXT" named-program-local-parameters-i4uiv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (count sizei)
  (params (:pointer uint)))

(defglextfun ("glGetNamedProgramLocalParameterIivEXT" get-named-program-local-parameter-iiv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (params (:pointer int)))

(defglextfun ("glGetNamedProgramLocalParameterIuivEXT" get-named-program-local-parameter-iuiv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (params (:pointer uint)))

(defglextfun ("glEnableClientStateiEXT" enable-client-state-i-ext) :void
  (array enum)
  (index uint))

(defglextfun ("glDisableClientStateiEXT" disable-client-state-i-ext) :void
  (array enum)
  (index uint))

(defglextfun ("glGetFloati_vEXT" get-float-i-v-ext) :void
  (pname enum)
  (index uint)
  (params (:pointer float)))

(defglextfun ("glGetDoublei_vEXT" get-double-i-v-ext) :void
  (pname enum)
  (index uint)
  (params (:pointer double)))

(defglextfun ("glGetPointeri_vEXT" get-pointer-i-v-ext) :void
  (pname enum)
  (index uint)
  (params (:pointer (:pointer :void))))

(defglextfun ("glNamedProgramStringEXT" named-program-string-ext) :void
  (program uint)
  (target enum)
  (format enum)
  (len sizei)
  (string (:pointer :void)))

(defglextfun ("glNamedProgramLocalParameter4dEXT" named-program-local-parameter-4d-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glNamedProgramLocalParameter4dvEXT" named-program-local-parameter-4dv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (params (:pointer double)))

(defglextfun ("glNamedProgramLocalParameter4fEXT" named-program-local-parameter-4f-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glNamedProgramLocalParameter4fvEXT" named-program-local-parameter-4fv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (params (:pointer float)))

(defglextfun ("glGetNamedProgramLocalParameterdvEXT" get-named-program-local-parameter-dv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (params (:pointer double)))

(defglextfun ("glGetNamedProgramLocalParameterfvEXT" get-named-program-local-parameter-fv-ext) :void
  (program uint)
  (target enum)
  (index uint)
  (params (:pointer float)))

(defglextfun ("glGetNamedProgramivEXT" get-named-program-iv-ext) :void
  (program uint)
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetNamedProgramStringEXT" get-named-program-string-ext) :void
  (program uint)
  (target enum)
  (pname enum)
  (string (:pointer :void)))

(defglextfun ("glNamedRenderbufferStorageEXT" named-renderbuffer-storage-ext) :void
  (renderbuffer uint)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glGetNamedRenderbufferParameterivEXT" get-named-renderbuffer-parameter-iv-ext) :void
  (renderbuffer uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glNamedRenderbufferStorageMultisampleEXT" named-renderbuffer-storage-multisample-ext) :void
  (renderbuffer uint)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glNamedRenderbufferStorageMultisampleCoverageEXT" named-renderbuffer-storage-multisample-coverage-ext) :void
  (renderbuffer uint)
  (coverageSamples sizei)
  (colorSamples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glCheckNamedFramebufferStatusEXT" check-named-framebuffer-status-ext) enum
  (framebuffer uint)
  (target enum))

(defglextfun ("glNamedFramebufferTexture1DEXT" named-framebuffer-texture-1d-ext) :void
  (framebuffer uint)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int))

(defglextfun ("glNamedFramebufferTexture2DEXT" named-framebuffer-texture-2d-ext) :void
  (framebuffer uint)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int))

(defglextfun ("glNamedFramebufferTexture3DEXT" named-framebuffer-texture-3d-ext) :void
  (framebuffer uint)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int)
  (zoffset int))

(defglextfun ("glNamedFramebufferRenderbufferEXT" named-framebuffer-renderbuffer-ext) :void
  (framebuffer uint)
  (attachment enum)
  (renderbuffertarget enum)
  (renderbuffer uint))

(defglextfun ("glGetNamedFramebufferAttachmentParameterivEXT" get-named-framebuffer-attachment-parameter-iv-ext) :void
  (framebuffer uint)
  (attachment enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGenerateTextureMipmapEXT" generate-texture-mipmap-ext) :void
  (texture uint)
  (target enum))

(defglextfun ("glGenerateMultiTexMipmapEXT" generate-multi-tex-mipmap-ext) :void
  (texunit enum)
  (target enum))

(defglextfun ("glFramebufferDrawBufferEXT" framebuffer-draw-buffer-ext) :void
  (framebuffer uint)
  (mode enum))

(defglextfun ("glFramebufferDrawBuffersEXT" framebuffer-draw-buffers-ext) :void
  (framebuffer uint)
  (n sizei)
  (bufs (:pointer enum)))

(defglextfun ("glFramebufferReadBufferEXT" framebuffer-read-buffer-ext) :void
  (framebuffer uint)
  (mode enum))

(defglextfun ("glGetFramebufferParameterivEXT" get-framebuffer-parameter-iv-ext) :void
  (framebuffer uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glNamedCopyBufferSubDataEXT" named-copy-buffer-sub-data-ext) :void
  (readBuffer uint)
  (writeBuffer uint)
  (readOffset intptr)
  (writeOffset intptr)
  (size sizeiptr))

(defglextfun ("glNamedFramebufferTextureEXT" named-framebuffer-texture-ext) :void
  (framebuffer uint)
  (attachment enum)
  (texture uint)
  (level int))

(defglextfun ("glNamedFramebufferTextureLayerEXT" named-framebuffer-texture-layer-ext) :void
  (framebuffer uint)
  (attachment enum)
  (texture uint)
  (level int)
  (layer int))

(defglextfun ("glNamedFramebufferTextureFaceEXT" named-framebuffer-texture-face-ext) :void
  (framebuffer uint)
  (attachment enum)
  (texture uint)
  (level int)
  (face enum))

(defglextfun ("glTextureRenderbufferEXT" texture-renderbuffer-ext) :void
  (texture uint)
  (target enum)
  (renderbuffer uint))

(defglextfun ("glMultiTexRenderbufferEXT" multi-tex-renderbuffer-ext) :void
  (texunit enum)
  (target enum)
  (renderbuffer uint))

(defglextfun ("glVertexArrayVertexOffsetEXT" vertex-array-vertex-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (size int)
  (type enum)
  (stride sizei)
  (offset intptr))

(defglextfun ("glVertexArrayColorOffsetEXT" vertex-array-color-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (size int)
  (type enum)
  (stride sizei)
  (offset intptr))

(defglextfun ("glVertexArrayEdgeFlagOffsetEXT" vertex-array-edge-flag-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (stride sizei)
  (offset intptr))

(defglextfun ("glVertexArrayIndexOffsetEXT" vertex-array-index-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (type enum)
  (stride sizei)
  (offset intptr))

(defglextfun ("glVertexArrayNormalOffsetEXT" vertex-array-normal-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (type enum)
  (stride sizei)
  (offset intptr))

(defglextfun ("glVertexArrayTexCoordOffsetEXT" vertex-array-tex-coord-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (size int)
  (type enum)
  (stride sizei)
  (offset intptr))

(defglextfun ("glVertexArrayMultiTexCoordOffsetEXT" vertex-array-multi-tex-coord-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (texunit enum)
  (size int)
  (type enum)
  (stride sizei)
  (offset intptr))

(defglextfun ("glVertexArrayFogCoordOffsetEXT" vertex-array-fog-coord-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (type enum)
  (stride sizei)
  (offset intptr))

(defglextfun ("glVertexArraySecondaryColorOffsetEXT" vertex-array-secondary-color-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (size int)
  (type enum)
  (stride sizei)
  (offset intptr))

(defglextfun ("glVertexArrayVertexAttribOffsetEXT" vertex-array-vertex-attrib-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (index uint)
  (size int)
  (type enum)
  (normalized boolean)
  (stride sizei)
  (offset intptr))

(defglextfun ("glVertexArrayVertexAttribIOffsetEXT" vertex-array-vertex-attrib-i-offset-ext) :void
  (vaobj uint)
  (buffer uint)
  (index uint)
  (size int)
  (type enum)
  (stride sizei)
  (offset intptr))

(defglextfun ("glEnableVertexArrayEXT" enable-vertex-array-ext) :void
  (vaobj uint)
  (array enum))

(defglextfun ("glDisableVertexArrayEXT" disable-vertex-array-ext) :void
  (vaobj uint)
  (array enum))

(defglextfun ("glEnableVertexArrayAttribEXT" enable-vertex-array-attrib-ext) :void
  (vaobj uint)
  (index uint))

(defglextfun ("glDisableVertexArrayAttribEXT" disable-vertex-array-attrib-ext) :void
  (vaobj uint)
  (index uint))

(defglextfun ("glGetVertexArrayIntegervEXT" get-vertex-array-integer-v-ext) :void
  (vaobj uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glGetVertexArrayPointervEXT" get-vertex-array-pointer-v-ext) :void
  (vaobj uint)
  (pname enum)
  (param (:pointer (:pointer :void))))

(defglextfun ("glGetVertexArrayIntegeri_vEXT" get-vertex-array-integer-i-v-ext) :void
  (vaobj uint)
  (index uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glGetVertexArrayPointeri_vEXT" get-vertex-array-pointer-i-v-ext) :void
  (vaobj uint)
  (index uint)
  (pname enum)
  (param (:pointer (:pointer :void))))

(defglextfun ("glMapNamedBufferRangeEXT" map-named-buffer-range-ext) (:pointer :void)
  (buffer uint)
  (offset intptr)
  (length sizeiptr)
  (access bitfield))

(defglextfun ("glFlushMappedNamedBufferRangeEXT" flush-mapped-named-buffer-range-ext) :void
  (buffer uint)
  (offset intptr)
  (length sizeiptr))

(defglextfun ("glNamedBufferStorageEXT" named-buffer-storage-ext) :void
  (buffer uint)
  (size sizeiptr)
  (data (:pointer :void))
  (flags bitfield))

(defglextfun ("glClearNamedBufferDataEXT" clear-named-buffer-data-ext) :void
  (buffer uint)
  (internalformat enum)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glClearNamedBufferSubDataEXT" clear-named-buffer-sub-data-ext) :void
  (buffer uint)
  (internalformat enum)
  (offset sizeiptr)
  (size sizeiptr)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glNamedFramebufferParameteriEXT" named-framebuffer-parameter-i-ext) :void
  (framebuffer uint)
  (pname enum)
  (param int))

(defglextfun ("glGetNamedFramebufferParameterivEXT" get-named-framebuffer-parameter-iv-ext) :void
  (framebuffer uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glProgramUniform1dEXT" program-uniform-1d-ext) :void
  (program uint)
  (location int)
  (x double))

(defglextfun ("glProgramUniform2dEXT" program-uniform-2d-ext) :void
  (program uint)
  (location int)
  (x double)
  (y double))

(defglextfun ("glProgramUniform3dEXT" program-uniform-3d-ext) :void
  (program uint)
  (location int)
  (x double)
  (y double)
  (z double))

(defglextfun ("glProgramUniform4dEXT" program-uniform-4d-ext) :void
  (program uint)
  (location int)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glProgramUniform1dvEXT" program-uniform-1dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glProgramUniform2dvEXT" program-uniform-2dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glProgramUniform3dvEXT" program-uniform-3dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glProgramUniform4dvEXT" program-uniform-4dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix2dvEXT" program-uniform-matrix-2dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix3dvEXT" program-uniform-matrix-3dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix4dvEXT" program-uniform-matrix-4dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix2x3dvEXT" program-uniform-matrix-2x3-dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix2x4dvEXT" program-uniform-matrix-2x4-dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix3x2dvEXT" program-uniform-matrix-3x2-dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix3x4dvEXT" program-uniform-matrix-3x4-dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix4x2dvEXT" program-uniform-matrix-4x2-dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glProgramUniformMatrix4x3dvEXT" program-uniform-matrix-4x3-dv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer double)))

(defglextfun ("glTextureBufferRangeEXT" texture-buffer-range-ext) :void
  (texture uint)
  (target enum)
  (internalformat enum)
  (buffer uint)
  (offset intptr)
  (size sizeiptr))

(defglextfun ("glTextureStorage2DMultisampleEXT" texture-storage-2d-multisample-ext) :void
  (texture uint)
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (fixedsamplelocations boolean))

(defglextfun ("glTextureStorage3DMultisampleEXT" texture-storage-3d-multisample-ext) :void
  (texture uint)
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedsamplelocations boolean))

(defglextfun ("glVertexArrayBindVertexBufferEXT" vertex-array-bind-vertex-buffer-ext) :void
  (vaobj uint)
  (bindingindex uint)
  (buffer uint)
  (offset intptr)
  (stride sizei))

(defglextfun ("glVertexArrayVertexAttribFormatEXT" vertex-array-vertex-attrib-format-ext) :void
  (vaobj uint)
  (attribindex uint)
  (size int)
  (type enum)
  (normalized boolean)
  (relativeoffset uint))

(defglextfun ("glVertexArrayVertexAttribIFormatEXT" vertex-array-vertex-attrib-i-format-ext) :void
  (vaobj uint)
  (attribindex uint)
  (size int)
  (type enum)
  (relativeoffset uint))

(defglextfun ("glVertexArrayVertexAttribLFormatEXT" vertex-array-vertex-attrib-l-format-ext) :void
  (vaobj uint)
  (attribindex uint)
  (size int)
  (type enum)
  (relativeoffset uint))

(defglextfun ("glVertexArrayVertexAttribBindingEXT" vertex-array-vertex-attrib-binding-ext) :void
  (vaobj uint)
  (attribindex uint)
  (bindingindex uint))

(defglextfun ("glVertexArrayVertexBindingDivisorEXT" vertex-array-vertex-binding-divisor-ext) :void
  (vaobj uint)
  (bindingindex uint)
  (divisor uint))

(defglextfun ("glVertexArrayVertexAttribLOffsetEXT" vertex-array-vertex-attrib-loffset-ext) :void
  (vaobj uint)
  (buffer uint)
  (index uint)
  (size int)
  (type enum)
  (stride sizei)
  (offset intptr))

(defglextfun ("glTexturePageCommitmentEXT" texture-page-commitment-ext) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (resident boolean))

(defglextfun ("glVertexArrayVertexAttribDivisorEXT" vertex-array-vertex-attrib-divisor-ext) :void
  (vaobj uint)
  (index uint)
  (divisor uint))

(defglextfun ("glColorMaskIndexedEXT" color-mask-indexed-ext) :void
  (index uint)
  (r boolean)
  (g boolean)
  (b boolean)
  (a boolean))

(defglextfun ("glDrawRangeElementsEXT" draw-range-elements-ext) :void
  (mode enum)
  (start uint)
  (end uint)
  (count sizei)
  (type enum)
  (indices (:pointer :void)))

(defglextfun ("glFogCoordfEXT" fog-coord-f-ext) :void
  (coord float))

(defglextfun ("glFogCoordfvEXT" fog-coord-fv-ext) :void
  (coord (:pointer float)))

(defglextfun ("glFogCoorddEXT" fog-coord-d-ext) :void
  (coord double))

(defglextfun ("glFogCoorddvEXT" fog-coord-dv-ext) :void
  (coord (:pointer double)))

(defglextfun ("glFogCoordPointerEXT" fog-coord-pointer-ext) :void
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glBlitFramebufferEXT" blit-framebuffer-ext) :void
  (srcX0 int)
  (srcY0 int)
  (srcX1 int)
  (srcY1 int)
  (dstX0 int)
  (dstY0 int)
  (dstX1 int)
  (dstY1 int)
  (mask ClearBufferMask)
  (filter enum))

(defglextfun ("glIsRenderbufferEXT" is-renderbuffer-ext) boolean
  (renderbuffer uint))

(defglextfun ("glBindRenderbufferEXT" bind-renderbuffer-ext) :void
  (target enum)
  (renderbuffer uint))

(defglextfun ("glDeleteRenderbuffersEXT" delete-renderbuffers-ext) :void
  (n sizei)
  (renderbuffers (:pointer uint)))

(defglextfun ("glGenRenderbuffersEXT" gen-renderbuffers-ext) :void
  (n sizei)
  (renderbuffers (:pointer uint)))

(defglextfun ("glRenderbufferStorageEXT" renderbuffer-storage-ext) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glGetRenderbufferParameterivEXT" get-renderbuffer-parameter-iv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glIsFramebufferEXT" is-framebuffer-ext) boolean
  (framebuffer uint))

(defglextfun ("glBindFramebufferEXT" bind-framebuffer-ext) :void
  (target enum)
  (framebuffer uint))

(defglextfun ("glDeleteFramebuffersEXT" delete-framebuffers-ext) :void
  (n sizei)
  (framebuffers (:pointer uint)))

(defglextfun ("glGenFramebuffersEXT" gen-framebuffers-ext) :void
  (n sizei)
  (framebuffers (:pointer uint)))

(defglextfun ("glCheckFramebufferStatusEXT" check-framebuffer-status-ext) enum
  (target enum))

(defglextfun ("glFramebufferTexture1DEXT" framebuffer-texture-1d-ext) :void
  (target enum)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int))

(defglextfun ("glFramebufferTexture2DEXT" framebuffer-texture-2d-ext) :void
  (target enum)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int))

(defglextfun ("glFramebufferTexture3DEXT" framebuffer-texture-3d-ext) :void
  (target enum)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int)
  (zoffset int))

(defglextfun ("glFramebufferRenderbufferEXT" framebuffer-renderbuffer-ext) :void
  (target enum)
  (attachment enum)
  (renderbuffertarget enum)
  (renderbuffer uint))

(defglextfun ("glGetFramebufferAttachmentParameterivEXT" get-framebuffer-attachment-parameter-iv-ext) :void
  (target enum)
  (attachment enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGenerateMipmapEXT" generate-mipmap-ext) :void
  (target enum))

(defglextfun ("glProgramEnvParameters4fvEXT" program-env-parameters-4fv-ext) :void
  (target enum)
  (index uint)
  (count sizei)
  (params (:pointer float)))

(defglextfun ("glProgramLocalParameters4fvEXT" program-local-parameters-4fv-ext) :void
  (target enum)
  (index uint)
  (count sizei)
  (params (:pointer float)))

(defglextfun ("glGetUniformuivEXT" get-uniform-uiv-ext) :void
  (program uint)
  (location int)
  (params (:pointer uint)))

(defglextfun ("glBindFragDataLocationEXT" bind-frag-data-location-ext) :void
  (program uint)
  (color uint)
  (name (:pointer char)))

(defglextfun ("glGetFragDataLocationEXT" get-frag-data-location-ext) int
  (program uint)
  (name (:pointer char)))

(defglextfun ("glUniform1uiEXT" uniform-1ui-ext) :void
  (location int)
  (v0 uint))

(defglextfun ("glUniform2uiEXT" uniform-2ui-ext) :void
  (location int)
  (v0 uint)
  (v1 uint))

(defglextfun ("glUniform3uiEXT" uniform-3ui-ext) :void
  (location int)
  (v0 uint)
  (v1 uint)
  (v2 uint))

(defglextfun ("glUniform4uiEXT" uniform-4ui-ext) :void
  (location int)
  (v0 uint)
  (v1 uint)
  (v2 uint)
  (v3 uint))

(defglextfun ("glUniform1uivEXT" uniform-1uiv-ext) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glUniform2uivEXT" uniform-2uiv-ext) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glUniform3uivEXT" uniform-3uiv-ext) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glUniform4uivEXT" uniform-4uiv-ext) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glGetHistogramEXT" get-histogram-ext) :void
  (target enum)
  (reset boolean)
  (format enum)
  (type enum)
  (values (:pointer :void)))

(defglextfun ("glGetHistogramParameterfvEXT" get-histogram-parameter-fv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetHistogramParameterivEXT" get-histogram-parameter-iv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetMinmaxEXT" get-minmax-ext) :void
  (target enum)
  (reset boolean)
  (format enum)
  (type enum)
  (values (:pointer :void)))

(defglextfun ("glGetMinmaxParameterfvEXT" get-minmax-parameter-fv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetMinmaxParameterivEXT" get-minmax-parameter-iv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glHistogramEXT" histogram-ext) :void
  (target enum)
  (width sizei)
  (internalformat enum)
  (sink boolean))

(defglextfun ("glMinmaxEXT" minmax-ext) :void
  (target enum)
  (internalformat enum)
  (sink boolean))

(defglextfun ("glResetHistogramEXT" reset-histogram-ext) :void
  (target enum))

(defglextfun ("glResetMinmaxEXT" reset-minmax-ext) :void
  (target enum))

(defglextfun ("glIndexFuncEXT" index-func-ext) :void
  (func enum)
  (ref clampf))

(defglextfun ("glIndexMaterialEXT" index-material-ext) :void
  (face enum)
  (mode enum))

(defglextfun ("glApplyTextureEXT" apply-texture-ext) :void
  (mode enum))

(defglextfun ("glTextureLightEXT" texture-light-ext) :void
  (pname enum))

(defglextfun ("glTextureMaterialEXT" texture-material-ext) :void
  (face enum)
  (mode enum))

(defglextfun ("glSampleMaskEXT" sample-mask-ext) :void
  (value clampf)
  (invert boolean))

(defglextfun ("glSamplePatternEXT" sample-pattern-ext) :void
  (pattern enum))

(defglextfun ("glColorTableEXT" color-table-ext) :void
  (target enum)
  (internalFormat enum)
  (width sizei)
  (format enum)
  (type enum)
  (table (:pointer :void)))

(defglextfun ("glGetColorTableEXT" get-color-table-ext) :void
  (target enum)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glGetColorTableParameterivEXT" get-color-table-parameter-iv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetColorTableParameterfvEXT" get-color-table-parameter-fv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glPixelTransformParameteriEXT" pixel-transform-parameter-i-ext) :void
  (target enum)
  (pname enum)
  (param int))

(defglextfun ("glPixelTransformParameterfEXT" pixel-transform-parameter-f-ext) :void
  (target enum)
  (pname enum)
  (param float))

(defglextfun ("glPixelTransformParameterivEXT" pixel-transform-parameter-iv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glPixelTransformParameterfvEXT" pixel-transform-parameter-fv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetPixelTransformParameterivEXT" get-pixel-transform-parameter-iv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetPixelTransformParameterfvEXT" get-pixel-transform-parameter-fv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glPointParameterfEXT" point-parameter-f-ext) :void
  (pname enum)
  (param float))

(defglextfun ("glPointParameterfvEXT" point-parameter-fv-ext) :void
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glPolygonOffsetEXT" polygon-offset-ext) :void
  (factor float)
  (bias float))

(defglextfun ("glPolygonOffsetClampEXT" polygon-offset-clamp-ext) :void
  (factor float)
  (units float)
  (clamp float))

(defglextfun ("glProvokingVertexEXT" provoking-vertex-ext) :void
  (mode enum))

(defglextfun ("glSecondaryColor3bEXT" secondary-color-3b-ext) :void
  (red byte)
  (green byte)
  (blue byte))

(defglextfun ("glSecondaryColor3bvEXT" secondary-color-3bv-ext) :void
  (v (:pointer byte)))

(defglextfun ("glSecondaryColor3dEXT" secondary-color-3d-ext) :void
  (red double)
  (green double)
  (blue double))

(defglextfun ("glSecondaryColor3dvEXT" secondary-color-3dv-ext) :void
  (v (:pointer double)))

(defglextfun ("glSecondaryColor3fEXT" secondary-color-3f-ext) :void
  (red float)
  (green float)
  (blue float))

(defglextfun ("glSecondaryColor3fvEXT" secondary-color-3fv-ext) :void
  (v (:pointer float)))

(defglextfun ("glSecondaryColor3iEXT" secondary-color-3i-ext) :void
  (red int)
  (green int)
  (blue int))

(defglextfun ("glSecondaryColor3ivEXT" secondary-color-3iv-ext) :void
  (v (:pointer int)))

(defglextfun ("glSecondaryColor3sEXT" secondary-color-3s-ext) :void
  (red short)
  (green short)
  (blue short))

(defglextfun ("glSecondaryColor3svEXT" secondary-color-3sv-ext) :void
  (v (:pointer short)))

(defglextfun ("glSecondaryColor3ubEXT" secondary-color-3ub-ext) :void
  (red ubyte)
  (green ubyte)
  (blue ubyte))

(defglextfun ("glSecondaryColor3ubvEXT" secondary-color-3ubv-ext) :void
  (v (:pointer ubyte)))

(defglextfun ("glSecondaryColor3uiEXT" secondary-color-3ui-ext) :void
  (red uint)
  (green uint)
  (blue uint))

(defglextfun ("glSecondaryColor3uivEXT" secondary-color-3uiv-ext) :void
  (v (:pointer uint)))

(defglextfun ("glSecondaryColor3usEXT" secondary-color-3us-ext) :void
  (red ushort)
  (green ushort)
  (blue ushort))

(defglextfun ("glSecondaryColor3usvEXT" secondary-color-3usv-ext) :void
  (v (:pointer ushort)))

(defglextfun ("glSecondaryColorPointerEXT" secondary-color-pointer-ext) :void
  (size int)
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glBindImageTextureEXT" bind-image-texture-ext) :void
  (index uint)
  (texture uint)
  (level int)
  (layered boolean)
  (layer int)
  (access enum)
  (format int))

(defglextfun ("glMemoryBarrierEXT" memory-barrier-ext) :void
  (barriers bitfield))

(defglextfun ("glStencilClearTagEXT" stencil-clear-tag-ext) :void
  (stencilTagBits sizei)
  (stencilClearTag uint))

(defglextfun ("glActiveStencilFaceEXT" active-stencil-face-ext) :void
  (face enum))

(defglextfun ("glTexSubImage1DEXT" tex-sub-image-1d-ext) :void
  (target enum)
  (level int)
  (xoffset int)
  (width sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTexSubImage2DEXT" tex-sub-image-2d-ext) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTexImage3DEXT" tex-image-3d-ext) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTexSubImage3DEXT" tex-sub-image-3d-ext) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glFramebufferTextureLayerEXT" framebuffer-texture-layer-ext) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int)
  (layer int))

(defglextfun ("glClearColorIiEXT" clear-color-ii-ext) :void
  (red int)
  (green int)
  (blue int)
  (alpha int))

(defglextfun ("glClearColorIuiEXT" clear-color-iui-ext) :void
  (red uint)
  (green uint)
  (blue uint)
  (alpha uint))

(defglextfun ("glAreTexturesResidentEXT" are-textures-resident-ext) boolean
  (n sizei)
  (textures (:pointer uint))
  (residences (:pointer boolean)))

(defglextfun ("glBindTextureEXT" bind-texture-ext) :void
  (target enum)
  (texture uint))

(defglextfun ("glDeleteTexturesEXT" delete-textures-ext) :void
  (n sizei)
  (textures (:pointer uint)))

(defglextfun ("glGenTexturesEXT" gen-textures-ext) :void
  (n sizei)
  (textures (:pointer uint)))

(defglextfun ("glIsTextureEXT" is-texture-ext) boolean
  (texture uint))

(defglextfun ("glPrioritizeTexturesEXT" prioritize-textures-ext) :void
  (n sizei)
  (textures (:pointer uint))
  (priorities (:pointer clampf)))

(defglextfun ("glTextureNormalEXT" texture-normal-ext) :void
  (mode enum))

(defglextfun ("glBeginTransformFeedbackEXT" begin-transform-feedback-ext) :void
  (primitiveMode enum))

(defglextfun ("glEndTransformFeedbackEXT" end-transform-feedback-ext) :void)

(defglextfun ("glBindBufferRangeEXT" bind-buffer-range-ext) :void
  (target enum)
  (index uint)
  (buffer uint)
  (offset intptr)
  (size sizeiptr))

(defglextfun ("glBindBufferOffsetEXT" bind-buffer-offset-ext) :void
  (target enum)
  (index uint)
  (buffer uint)
  (offset intptr))

(defglextfun ("glBindBufferBaseEXT" bind-buffer-base-ext) :void
  (target enum)
  (index uint)
  (buffer uint))

(defglextfun ("glTransformFeedbackVaryingsEXT" transform-feedback-varyings-ext) :void
  (program uint)
  (count sizei)
  (varyings (:pointer (:pointer char)))
  (bufferMode enum))

(defglextfun ("glGetTransformFeedbackVaryingEXT" get-transform-feedback-varying-ext) :void
  (program uint)
  (index uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (size (:pointer sizei))
  (type (:pointer enum))
  (name (:pointer char)))

(defglextfun ("glArrayElementEXT" array-element-ext) :void
  (i int))

(defglextfun ("glColorPointerEXT" color-pointer-ext) :void
  (size int)
  (type enum)
  (stride sizei)
  (count sizei)
  (pointer (:pointer :void)))

(defglextfun ("glDrawArraysEXT" draw-arrays-ext) :void
  (mode enum)
  (first int)
  (count sizei))

(defglextfun ("glEdgeFlagPointerEXT" edge-flag-pointer-ext) :void
  (stride sizei)
  (count sizei)
  (pointer (:pointer boolean)))

(defglextfun ("glGetPointervEXT" get-pointer-v-ext) :void
  (pname enum)
  (params (:pointer (:pointer :void))))

(defglextfun ("glIndexPointerEXT" index-pointer-ext) :void
  (type enum)
  (stride sizei)
  (count sizei)
  (pointer (:pointer :void)))

(defglextfun ("glNormalPointerEXT" normal-pointer-ext) :void
  (type enum)
  (stride sizei)
  (count sizei)
  (pointer (:pointer :void)))

(defglextfun ("glTexCoordPointerEXT" tex-coord-pointer-ext) :void
  (size int)
  (type enum)
  (stride sizei)
  (count sizei)
  (pointer (:pointer :void)))

(defglextfun ("glVertexPointerEXT" vertex-pointer-ext) :void
  (size int)
  (type enum)
  (stride sizei)
  (count sizei)
  (pointer (:pointer :void)))

(defglextfun ("glVertexAttribL1dEXT" vertex-attrib-l1d-ext) :void
  (index uint)
  (x double))

(defglextfun ("glVertexAttribL2dEXT" vertex-attrib-l2d-ext) :void
  (index uint)
  (x double)
  (y double))

(defglextfun ("glVertexAttribL3dEXT" vertex-attrib-l3d-ext) :void
  (index uint)
  (x double)
  (y double)
  (z double))

(defglextfun ("glVertexAttribL4dEXT" vertex-attrib-l4d-ext) :void
  (index uint)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glVertexAttribL1dvEXT" vertex-attrib-l1dv-ext) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttribL2dvEXT" vertex-attrib-l2dv-ext) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttribL3dvEXT" vertex-attrib-l3dv-ext) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttribL4dvEXT" vertex-attrib-l4dv-ext) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttribLPointerEXT" vertex-attrib-lpointer-ext) :void
  (index uint)
  (size int)
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glGetVertexAttribLdvEXT" get-vertex-attrib-ldv-ext) :void
  (index uint)
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glBeginVertexShaderEXT" begin-vertex-shader-ext) :void)

(defglextfun ("glEndVertexShaderEXT" end-vertex-shader-ext) :void)

(defglextfun ("glBindVertexShaderEXT" bind-vertex-shader-ext) :void
  (id uint))

(defglextfun ("glGenVertexShadersEXT" gen-vertex-shaders-ext) uint
  (range uint))

(defglextfun ("glDeleteVertexShaderEXT" delete-vertex-shader-ext) :void
  (id uint))

(defglextfun ("glShaderOp1EXT" shader-op-1-ext) :void
  (op enum)
  (res uint)
  (arg1 uint))

(defglextfun ("glShaderOp2EXT" shader-op-2-ext) :void
  (op enum)
  (res uint)
  (arg1 uint)
  (arg2 uint))

(defglextfun ("glShaderOp3EXT" shader-op-3-ext) :void
  (op enum)
  (res uint)
  (arg1 uint)
  (arg2 uint)
  (arg3 uint))

(defglextfun ("glSwizzleEXT" swizzle-ext) :void
  (res uint)
  (in uint)
  (outX enum)
  (outY enum)
  (outZ enum)
  (outW enum))

(defglextfun ("glWriteMaskEXT" write-mask-ext) :void
  (res uint)
  (in uint)
  (outX enum)
  (outY enum)
  (outZ enum)
  (outW enum))

(defglextfun ("glInsertComponentEXT" insert-component-ext) :void
  (res uint)
  (src uint)
  (num uint))

(defglextfun ("glExtractComponentEXT" extract-component-ext) :void
  (res uint)
  (src uint)
  (num uint))

(defglextfun ("glGenSymbolsEXT" gen-symbols-ext) uint
  (datatype enum)
  (storagetype enum)
  (range enum)
  (components uint))

(defglextfun ("glSetInvariantEXT" set-invariant-ext) :void
  (id uint)
  (type enum)
  (addr (:pointer :void)))

(defglextfun ("glSetLocalConstantEXT" set-local-constant-ext) :void
  (id uint)
  (type enum)
  (addr (:pointer :void)))

(defglextfun ("glVariantbvEXT" variant-bv-ext) :void
  (id uint)
  (addr (:pointer byte)))

(defglextfun ("glVariantsvEXT" variant-sv-ext) :void
  (id uint)
  (addr (:pointer short)))

(defglextfun ("glVariantivEXT" variant-iv-ext) :void
  (id uint)
  (addr (:pointer int)))

(defglextfun ("glVariantfvEXT" variant-fv-ext) :void
  (id uint)
  (addr (:pointer float)))

(defglextfun ("glVariantdvEXT" variant-dv-ext) :void
  (id uint)
  (addr (:pointer double)))

(defglextfun ("glVariantubvEXT" variant-ubv-ext) :void
  (id uint)
  (addr (:pointer ubyte)))

(defglextfun ("glVariantusvEXT" variant-usv-ext) :void
  (id uint)
  (addr (:pointer ushort)))

(defglextfun ("glVariantuivEXT" variant-uiv-ext) :void
  (id uint)
  (addr (:pointer uint)))

(defglextfun ("glVariantPointerEXT" variant-pointer-ext) :void
  (id uint)
  (type enum)
  (stride uint)
  (addr (:pointer :void)))

(defglextfun ("glEnableVariantClientStateEXT" enable-variant-client-state-ext) :void
  (id uint))

(defglextfun ("glDisableVariantClientStateEXT" disable-variant-client-state-ext) :void
  (id uint))

(defglextfun ("glBindLightParameterEXT" bind-light-parameter-ext) uint
  (light enum)
  (value enum))

(defglextfun ("glBindMaterialParameterEXT" bind-material-parameter-ext) uint
  (face enum)
  (value enum))

(defglextfun ("glBindTexGenParameterEXT" bind-tex-gen-parameter-ext) uint
  (unit enum)
  (coord enum)
  (value enum))

(defglextfun ("glBindTextureUnitParameterEXT" bind-texture-unit-parameter-ext) uint
  (unit enum)
  (value enum))

(defglextfun ("glBindParameterEXT" bind-parameter-ext) uint
  (value enum))

(defglextfun ("glIsVariantEnabledEXT" is-variant-enabled-ext) boolean
  (id uint)
  (cap enum))

(defglextfun ("glGetVariantBooleanvEXT" get-variant-boolean-v-ext) :void
  (id uint)
  (value enum)
  (data (:pointer boolean)))

(defglextfun ("glGetVariantIntegervEXT" get-variant-integer-v-ext) :void
  (id uint)
  (value enum)
  (data (:pointer int)))

(defglextfun ("glGetVariantFloatvEXT" get-variant-float-v-ext) :void
  (id uint)
  (value enum)
  (data (:pointer float)))

(defglextfun ("glGetVariantPointervEXT" get-variant-pointer-v-ext) :void
  (id uint)
  (value enum)
  (data (:pointer (:pointer :void))))

(defglextfun ("glGetInvariantBooleanvEXT" get-invariant-boolean-v-ext) :void
  (id uint)
  (value enum)
  (data (:pointer boolean)))

(defglextfun ("glGetInvariantIntegervEXT" get-invariant-integer-v-ext) :void
  (id uint)
  (value enum)
  (data (:pointer int)))

(defglextfun ("glGetInvariantFloatvEXT" get-invariant-float-v-ext) :void
  (id uint)
  (value enum)
  (data (:pointer float)))

(defglextfun ("glGetLocalConstantBooleanvEXT" get-local-constant-boolean-v-ext) :void
  (id uint)
  (value enum)
  (data (:pointer boolean)))

(defglextfun ("glGetLocalConstantIntegervEXT" get-local-constant-integer-v-ext) :void
  (id uint)
  (value enum)
  (data (:pointer int)))

(defglextfun ("glGetLocalConstantFloatvEXT" get-local-constant-float-v-ext) :void
  (id uint)
  (value enum)
  (data (:pointer float)))

(defglextfun ("glVertexWeightfEXT" vertex-weight-f-ext) :void
  (weight float))

(defglextfun ("glVertexWeightfvEXT" vertex-weight-fv-ext) :void
  (weight (:pointer float)))

(defglextfun ("glVertexWeightPointerEXT" vertex-weight-pointer-ext) :void
  (size int)
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glImportSyncEXT" import-sync-ext) sync
  (external_sync_type enum)
  (external_sync intptr)
  (flags bitfield))

(defglextfun ("glFrameTerminatorGREMEDY" frame-terminator-gremedy) :void)

(defglextfun ("glStringMarkerGREMEDY" string-marker-gremedy) :void
  (len sizei)
  (string (:pointer :void)))

(defglextfun ("glImageTransformParameteriHP" image-transform-parameter-i-hp) :void
  (target enum)
  (pname enum)
  (param int))

(defglextfun ("glImageTransformParameterfHP" image-transform-parameter-f-hp) :void
  (target enum)
  (pname enum)
  (param float))

(defglextfun ("glImageTransformParameterivHP" image-transform-parameter-iv-hp) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glImageTransformParameterfvHP" image-transform-parameter-fv-hp) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetImageTransformParameterivHP" get-image-transform-parameter-iv-hp) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetImageTransformParameterfvHP" get-image-transform-parameter-fv-hp) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glMultiModeDrawArraysIBM" multi-mode-draw-arrays-ibm) :void
  (mode (:pointer enum))
  (first (:pointer int))
  (count (:pointer sizei))
  (primcount sizei)
  (modestride int))

(defglextfun ("glMultiModeDrawElementsIBM" multi-mode-draw-elements-ibm) :void
  (mode (:pointer enum))
  (count (:pointer sizei))
  (type enum)
  (indices (:pointer (:pointer :void)))
  (primcount sizei)
  (modestride int))

(defglextfun ("glFlushStaticDataIBM" flush-static-data-ibm) :void
  (target enum))

(defglextfun ("glColorPointerListIBM" color-pointer-list-ibm) :void
  (size int)
  (type enum)
  (stride int)
  (pointer (:pointer (:pointer :void)))
  (ptrstride int))

(defglextfun ("glSecondaryColorPointerListIBM" secondary-color-pointer-list-ibm) :void
  (size int)
  (type enum)
  (stride int)
  (pointer (:pointer (:pointer :void)))
  (ptrstride int))

(defglextfun ("glEdgeFlagPointerListIBM" edge-flag-pointer-list-ibm) :void
  (stride int)
  (pointer (:pointer (:pointer boolean)))
  (ptrstride int))

(defglextfun ("glFogCoordPointerListIBM" fog-coord-pointer-list-ibm) :void
  (type enum)
  (stride int)
  (pointer (:pointer (:pointer :void)))
  (ptrstride int))

(defglextfun ("glIndexPointerListIBM" index-pointer-list-ibm) :void
  (type enum)
  (stride int)
  (pointer (:pointer (:pointer :void)))
  (ptrstride int))

(defglextfun ("glNormalPointerListIBM" normal-pointer-list-ibm) :void
  (type enum)
  (stride int)
  (pointer (:pointer (:pointer :void)))
  (ptrstride int))

(defglextfun ("glTexCoordPointerListIBM" tex-coord-pointer-list-ibm) :void
  (size int)
  (type enum)
  (stride int)
  (pointer (:pointer (:pointer :void)))
  (ptrstride int))

(defglextfun ("glVertexPointerListIBM" vertex-pointer-list-ibm) :void
  (size int)
  (type enum)
  (stride int)
  (pointer (:pointer (:pointer :void)))
  (ptrstride int))

(defglextfun ("glBlendFuncSeparateINGR" blend-func-separate-ingr) :void
  (sfactorRGB enum)
  (dfactorRGB enum)
  (sfactorAlpha enum)
  (dfactorAlpha enum))

(defglextfun ("glSyncTextureINTEL" sync-texture-intel) :void
  (texture uint))

(defglextfun ("glUnmapTexture2DINTEL" unmap-texture-2d-intel) :void
  (texture uint)
  (level int))

(defglextfun ("glMapTexture2DINTEL" map-texture-2d-intel) (:pointer :void)
  (texture uint)
  (level int)
  (access bitfield)
  (stride (:pointer int))
  (layout (:pointer enum)))

(defglextfun ("glVertexPointervINTEL" vertex-pointer-v-intel) :void
  (size int)
  (type enum)
  (pointer (:pointer (:pointer :void))))

(defglextfun ("glNormalPointervINTEL" normal-pointer-v-intel) :void
  (type enum)
  (pointer (:pointer (:pointer :void))))

(defglextfun ("glColorPointervINTEL" color-pointer-v-intel) :void
  (size int)
  (type enum)
  (pointer (:pointer (:pointer :void))))

(defglextfun ("glTexCoordPointervINTEL" tex-coord-pointer-v-intel) :void
  (size int)
  (type enum)
  (pointer (:pointer (:pointer :void))))

(defglextfun ("glResizeBuffersMESA" resize-buffers-mesa) :void)

(defglextfun ("glWindowPos2dMESA" window-pos-2d-mesa) :void
  (x double)
  (y double))

(defglextfun ("glWindowPos2dvMESA" window-pos-2dv-mesa) :void
  (v (:pointer double)))

(defglextfun ("glWindowPos2fMESA" window-pos-2f-mesa) :void
  (x float)
  (y float))

(defglextfun ("glWindowPos2fvMESA" window-pos-2fv-mesa) :void
  (v (:pointer float)))

(defglextfun ("glWindowPos2iMESA" window-pos-2i-mesa) :void
  (x int)
  (y int))

(defglextfun ("glWindowPos2ivMESA" window-pos-2iv-mesa) :void
  (v (:pointer int)))

(defglextfun ("glWindowPos2sMESA" window-pos-2s-mesa) :void
  (x short)
  (y short))

(defglextfun ("glWindowPos2svMESA" window-pos-2sv-mesa) :void
  (v (:pointer short)))

(defglextfun ("glWindowPos3dMESA" window-pos-3d-mesa) :void
  (x double)
  (y double)
  (z double))

(defglextfun ("glWindowPos3dvMESA" window-pos-3dv-mesa) :void
  (v (:pointer double)))

(defglextfun ("glWindowPos3fMESA" window-pos-3f-mesa) :void
  (x float)
  (y float)
  (z float))

(defglextfun ("glWindowPos3fvMESA" window-pos-3fv-mesa) :void
  (v (:pointer float)))

(defglextfun ("glWindowPos3iMESA" window-pos-3i-mesa) :void
  (x int)
  (y int)
  (z int))

(defglextfun ("glWindowPos3ivMESA" window-pos-3iv-mesa) :void
  (v (:pointer int)))

(defglextfun ("glWindowPos3sMESA" window-pos-3s-mesa) :void
  (x short)
  (y short)
  (z short))

(defglextfun ("glWindowPos3svMESA" window-pos-3sv-mesa) :void
  (v (:pointer short)))

(defglextfun ("glWindowPos4dMESA" window-pos-4d-mesa) :void
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glWindowPos4dvMESA" window-pos-4dv-mesa) :void
  (v (:pointer double)))

(defglextfun ("glWindowPos4fMESA" window-pos-4f-mesa) :void
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glWindowPos4fvMESA" window-pos-4fv-mesa) :void
  (v (:pointer float)))

(defglextfun ("glWindowPos4iMESA" window-pos-4i-mesa) :void
  (x int)
  (y int)
  (z int)
  (w int))

(defglextfun ("glWindowPos4ivMESA" window-pos-4iv-mesa) :void
  (v (:pointer int)))

(defglextfun ("glWindowPos4sMESA" window-pos-4s-mesa) :void
  (x short)
  (y short)
  (z short)
  (w short))

(defglextfun ("glWindowPos4svMESA" window-pos-4sv-mesa) :void
  (v (:pointer short)))

(defglextfun ("glBeginConditionalRenderNVX" begin-conditional-render-nvx) :void
  (id uint))

(defglextfun ("glEndConditionalRenderNVX" end-conditional-render-nvx) :void)

(defglextfun ("glMultiDrawArraysIndirectBindlessNV" multi-draw-arrays-indirect-bindless-nv) :void
  (mode enum)
  (indirect (:pointer :void))
  (drawCount sizei)
  (stride sizei)
  (vertexBufferCount int))

(defglextfun ("glMultiDrawElementsIndirectBindlessNV" multi-draw-elements-indirect-bindless-nv) :void
  (mode enum)
  (type enum)
  (indirect (:pointer :void))
  (drawCount sizei)
  (stride sizei)
  (vertexBufferCount int))

(defglextfun ("glMultiDrawArraysIndirectBindlessCountNV" multi-draw-arrays-indirect-bindless-count-nv) :void
  (mode enum)
  (indirect (:pointer :void))
  (drawCount sizei)
  (maxDrawCount sizei)
  (stride sizei)
  (vertexBufferCount int))

(defglextfun ("glMultiDrawElementsIndirectBindlessCountNV" multi-draw-elements-indirect-bindless-count-nv) :void
  (mode enum)
  (type enum)
  (indirect (:pointer :void))
  (drawCount sizei)
  (maxDrawCount sizei)
  (stride sizei)
  (vertexBufferCount int))

(defglextfun ("glGetTextureHandleNV" get-texture-handle-nv) uint64
  (texture uint))

(defglextfun ("glGetTextureSamplerHandleNV" get-texture-sampler-handle-nv) uint64
  (texture uint)
  (sampler uint))

(defglextfun ("glMakeTextureHandleResidentNV" make-texture-handle-resident-nv) :void
  (handle uint64))

(defglextfun ("glMakeTextureHandleNonResidentNV" make-texture-handle-non-resident-nv) :void
  (handle uint64))

(defglextfun ("glGetImageHandleNV" get-image-handle-nv) uint64
  (texture uint)
  (level int)
  (layered boolean)
  (layer int)
  (format enum))

(defglextfun ("glMakeImageHandleResidentNV" make-image-handle-resident-nv) :void
  (handle uint64)
  (access enum))

(defglextfun ("glMakeImageHandleNonResidentNV" make-image-handle-non-resident-nv) :void
  (handle uint64))

(defglextfun ("glUniformHandleui64NV" uniform-handle-ui64-nv) :void
  (location int)
  (value uint64))

(defglextfun ("glUniformHandleui64vNV" uniform-handle-ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64)))

(defglextfun ("glProgramUniformHandleui64NV" program-uniform-handle-ui64-nv) :void
  (program uint)
  (location int)
  (value uint64))

(defglextfun ("glProgramUniformHandleui64vNV" program-uniform-handle-ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (values (:pointer uint64)))

(defglextfun ("glIsTextureHandleResidentNV" is-texture-handle-resident-nv) boolean
  (handle uint64))

(defglextfun ("glIsImageHandleResidentNV" is-image-handle-resident-nv) boolean
  (handle uint64))

(defglextfun ("glBeginConditionalRenderNV" begin-conditional-render-nv) :void
  (id uint)
  (mode enum))

(defglextfun ("glEndConditionalRenderNV" end-conditional-render-nv) :void)

(defglextfun ("glCopyImageSubDataNV" copy-image-sub-data-nv) :void
  (srcName uint)
  (srcTarget enum)
  (srcLevel int)
  (srcX int)
  (srcY int)
  (srcZ int)
  (dstName uint)
  (dstTarget enum)
  (dstLevel int)
  (dstX int)
  (dstY int)
  (dstZ int)
  (width sizei)
  (height sizei)
  (depth sizei))

(defglextfun ("glDepthRangedNV" depth-range-d-nv) :void
  (zNear double)
  (zFar double))

(defglextfun ("glClearDepthdNV" clear-depth-d-nv) :void
  (depth double))

(defglextfun ("glDepthBoundsdNV" depth-bounds-d-nv) :void
  (zmin double)
  (zmax double))

(defglextfun ("glDrawTextureNV" draw-texture-nv) :void
  (texture uint)
  (sampler uint)
  (x0 float)
  (y0 float)
  (x1 float)
  (y1 float)
  (z float)
  (s0 float)
  (t0 float)
  (s1 float)
  (t1 float))

(defglextfun ("glMapControlPointsNV" map-control-points-nv) :void
  (target enum)
  (index uint)
  (type enum)
  (ustride sizei)
  (vstride sizei)
  (uorder int)
  (vorder int)
  (packed boolean)
  (points (:pointer :void)))

(defglextfun ("glMapParameterivNV" map-parameter-iv-nv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glMapParameterfvNV" map-parameter-fv-nv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetMapControlPointsNV" get-map-control-points-nv) :void
  (target enum)
  (index uint)
  (type enum)
  (ustride sizei)
  (vstride sizei)
  (packed boolean)
  (points (:pointer :void)))

(defglextfun ("glGetMapParameterivNV" get-map-parameter-iv-nv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetMapParameterfvNV" get-map-parameter-fv-nv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetMapAttribParameterivNV" get-map-attrib-parameter-iv-nv) :void
  (target enum)
  (index uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetMapAttribParameterfvNV" get-map-attrib-parameter-fv-nv) :void
  (target enum)
  (index uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glEvalMapsNV" eval-maps-nv) :void
  (target enum)
  (mode enum))

(defglextfun ("glGetMultisamplefvNV" get-multisample-fv-nv) :void
  (pname enum)
  (index uint)
  (val (:pointer float)))

(defglextfun ("glSampleMaskIndexedNV" sample-mask-indexed-nv) :void
  (index uint)
  (mask bitfield))

(defglextfun ("glTexRenderbufferNV" tex-renderbuffer-nv) :void
  (target enum)
  (renderbuffer uint))

(defglextfun ("glProgramNamedParameter4fNV" program-named-parameter-4f-nv) :void
  (id uint)
  (len sizei)
  (name (:pointer ubyte))
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glProgramNamedParameter4fvNV" program-named-parameter-4fv-nv) :void
  (id uint)
  (len sizei)
  (name (:pointer ubyte))
  (v (:pointer float)))

(defglextfun ("glProgramNamedParameter4dNV" program-named-parameter-4d-nv) :void
  (id uint)
  (len sizei)
  (name (:pointer ubyte))
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glProgramNamedParameter4dvNV" program-named-parameter-4dv-nv) :void
  (id uint)
  (len sizei)
  (name (:pointer ubyte))
  (v (:pointer double)))

(defglextfun ("glGetProgramNamedParameterfvNV" get-program-named-parameter-fv-nv) :void
  (id uint)
  (len sizei)
  (name (:pointer ubyte))
  (params (:pointer float)))

(defglextfun ("glGetProgramNamedParameterdvNV" get-program-named-parameter-dv-nv) :void
  (id uint)
  (len sizei)
  (name (:pointer ubyte))
  (params (:pointer double)))

(defglextfun ("glRenderbufferStorageMultisampleCoverageNV" renderbuffer-storage-multisample-coverage-nv) :void
  (target enum)
  (coverageSamples sizei)
  (colorSamples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glProgramVertexLimitNV" program-vertex-limit-nv) :void
  (target enum)
  (limit int))

(defglextfun ("glFramebufferTextureFaceEXT" framebuffer-texture-face-ext) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int)
  (face enum))

(defglextfun ("glProgramLocalParameterI4iNV" program-local-parameter-i4i-nv) :void
  (target enum)
  (index uint)
  (x int)
  (y int)
  (z int)
  (w int))

(defglextfun ("glProgramLocalParameterI4ivNV" program-local-parameter-i4iv-nv) :void
  (target enum)
  (index uint)
  (params (:pointer int)))

(defglextfun ("glProgramLocalParametersI4ivNV" program-local-parameters-i4iv-nv) :void
  (target enum)
  (index uint)
  (count sizei)
  (params (:pointer int)))

(defglextfun ("glProgramLocalParameterI4uiNV" program-local-parameter-i4ui-nv) :void
  (target enum)
  (index uint)
  (x uint)
  (y uint)
  (z uint)
  (w uint))

(defglextfun ("glProgramLocalParameterI4uivNV" program-local-parameter-i4uiv-nv) :void
  (target enum)
  (index uint)
  (params (:pointer uint)))

(defglextfun ("glProgramLocalParametersI4uivNV" program-local-parameters-i4uiv-nv) :void
  (target enum)
  (index uint)
  (count sizei)
  (params (:pointer uint)))

(defglextfun ("glProgramEnvParameterI4iNV" program-env-parameter-i4i-nv) :void
  (target enum)
  (index uint)
  (x int)
  (y int)
  (z int)
  (w int))

(defglextfun ("glProgramEnvParameterI4ivNV" program-env-parameter-i4iv-nv) :void
  (target enum)
  (index uint)
  (params (:pointer int)))

(defglextfun ("glProgramEnvParametersI4ivNV" program-env-parameters-i4iv-nv) :void
  (target enum)
  (index uint)
  (count sizei)
  (params (:pointer int)))

(defglextfun ("glProgramEnvParameterI4uiNV" program-env-parameter-i4ui-nv) :void
  (target enum)
  (index uint)
  (x uint)
  (y uint)
  (z uint)
  (w uint))

(defglextfun ("glProgramEnvParameterI4uivNV" program-env-parameter-i4uiv-nv) :void
  (target enum)
  (index uint)
  (params (:pointer uint)))

(defglextfun ("glProgramEnvParametersI4uivNV" program-env-parameters-i4uiv-nv) :void
  (target enum)
  (index uint)
  (count sizei)
  (params (:pointer uint)))

(defglextfun ("glGetProgramLocalParameterIivNV" get-program-local-parameter-iiv-nv) :void
  (target enum)
  (index uint)
  (params (:pointer int)))

(defglextfun ("glGetProgramLocalParameterIuivNV" get-program-local-parameter-iuiv-nv) :void
  (target enum)
  (index uint)
  (params (:pointer uint)))

(defglextfun ("glGetProgramEnvParameterIivNV" get-program-env-parameter-iiv-nv) :void
  (target enum)
  (index uint)
  (params (:pointer int)))

(defglextfun ("glGetProgramEnvParameterIuivNV" get-program-env-parameter-iuiv-nv) :void
  (target enum)
  (index uint)
  (params (:pointer uint)))

(defglextfun ("glProgramSubroutineParametersuivNV" program-subroutine-parameters-uiv-nv) :void
  (target enum)
  (count sizei)
  (params (:pointer uint)))

(defglextfun ("glGetProgramSubroutineParameteruivNV" get-program-subroutine-parameter-uiv-nv) :void
  (target enum)
  (index uint)
  (param (:pointer uint)))

(defglextfun ("glVertex2hNV" vertex-2h-nv) :void
  (x half-nv)
  (y half-nv))

(defglextfun ("glVertex2hvNV" vertex-2hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glVertex3hNV" vertex-3h-nv) :void
  (x half-nv)
  (y half-nv)
  (z half-nv))

(defglextfun ("glVertex3hvNV" vertex-3hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glVertex4hNV" vertex-4h-nv) :void
  (x half-nv)
  (y half-nv)
  (z half-nv)
  (w half-nv))

(defglextfun ("glVertex4hvNV" vertex-4hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glNormal3hNV" normal-3h-nv) :void
  (nx half-nv)
  (ny half-nv)
  (nz half-nv))

(defglextfun ("glNormal3hvNV" normal-3hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glColor3hNV" color-3h-nv) :void
  (red half-nv)
  (green half-nv)
  (blue half-nv))

(defglextfun ("glColor3hvNV" color-3hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glColor4hNV" color-4h-nv) :void
  (red half-nv)
  (green half-nv)
  (blue half-nv)
  (alpha half-nv))

(defglextfun ("glColor4hvNV" color-4hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glTexCoord1hNV" tex-coord-1h-nv) :void
  (s half-nv))

(defglextfun ("glTexCoord1hvNV" tex-coord-1hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glTexCoord2hNV" tex-coord-2h-nv) :void
  (s half-nv)
  (tee half-nv))

(defglextfun ("glTexCoord2hvNV" tex-coord-2hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glTexCoord3hNV" tex-coord-3h-nv) :void
  (s half-nv)
  (tee half-nv)
  (r half-nv))

(defglextfun ("glTexCoord3hvNV" tex-coord-3hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glTexCoord4hNV" tex-coord-4h-nv) :void
  (s half-nv)
  (tee half-nv)
  (r half-nv)
  (q half-nv))

(defglextfun ("glTexCoord4hvNV" tex-coord-4hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glMultiTexCoord1hNV" multi-tex-coord-1h-nv) :void
  (target enum)
  (s half-nv))

(defglextfun ("glMultiTexCoord1hvNV" multi-tex-coord-1hv-nv) :void
  (target enum)
  (v (:pointer half-nv)))

(defglextfun ("glMultiTexCoord2hNV" multi-tex-coord-2h-nv) :void
  (target enum)
  (s half-nv)
  (tee half-nv))

(defglextfun ("glMultiTexCoord2hvNV" multi-tex-coord-2hv-nv) :void
  (target enum)
  (v (:pointer half-nv)))

(defglextfun ("glMultiTexCoord3hNV" multi-tex-coord-3h-nv) :void
  (target enum)
  (s half-nv)
  (tee half-nv)
  (r half-nv))

(defglextfun ("glMultiTexCoord3hvNV" multi-tex-coord-3hv-nv) :void
  (target enum)
  (v (:pointer half-nv)))

(defglextfun ("glMultiTexCoord4hNV" multi-tex-coord-4h-nv) :void
  (target enum)
  (s half-nv)
  (tee half-nv)
  (r half-nv)
  (q half-nv))

(defglextfun ("glMultiTexCoord4hvNV" multi-tex-coord-4hv-nv) :void
  (target enum)
  (v (:pointer half-nv)))

(defglextfun ("glFogCoordhNV" fog-coord-h-nv) :void
  (fog half-nv))

(defglextfun ("glFogCoordhvNV" fog-coord-hv-nv) :void
  (fog (:pointer half-nv)))

(defglextfun ("glSecondaryColor3hNV" secondary-color-3h-nv) :void
  (red half-nv)
  (green half-nv)
  (blue half-nv))

(defglextfun ("glSecondaryColor3hvNV" secondary-color-3hv-nv) :void
  (v (:pointer half-nv)))

(defglextfun ("glVertexWeighthNV" vertex-weight-h-nv) :void
  (weight half-nv))

(defglextfun ("glVertexWeighthvNV" vertex-weight-hv-nv) :void
  (weight (:pointer half-nv)))

(defglextfun ("glVertexAttrib1hNV" vertex-attrib-1h-nv) :void
  (index uint)
  (x half-nv))

(defglextfun ("glVertexAttrib1hvNV" vertex-attrib-1hv-nv) :void
  (index uint)
  (v (:pointer half-nv)))

(defglextfun ("glVertexAttrib2hNV" vertex-attrib-2h-nv) :void
  (index uint)
  (x half-nv)
  (y half-nv))

(defglextfun ("glVertexAttrib2hvNV" vertex-attrib-2hv-nv) :void
  (index uint)
  (v (:pointer half-nv)))

(defglextfun ("glVertexAttrib3hNV" vertex-attrib-3h-nv) :void
  (index uint)
  (x half-nv)
  (y half-nv)
  (z half-nv))

(defglextfun ("glVertexAttrib3hvNV" vertex-attrib-3hv-nv) :void
  (index uint)
  (v (:pointer half-nv)))

(defglextfun ("glVertexAttrib4hNV" vertex-attrib-4h-nv) :void
  (index uint)
  (x half-nv)
  (y half-nv)
  (z half-nv)
  (w half-nv))

(defglextfun ("glVertexAttrib4hvNV" vertex-attrib-4hv-nv) :void
  (index uint)
  (v (:pointer half-nv)))

(defglextfun ("glVertexAttribs1hvNV" vertex-attribs-1hv-nv) :void
  (index uint)
  (n sizei)
  (v (:pointer half-nv)))

(defglextfun ("glVertexAttribs2hvNV" vertex-attribs-2hv-nv) :void
  (index uint)
  (n sizei)
  (v (:pointer half-nv)))

(defglextfun ("glVertexAttribs3hvNV" vertex-attribs-3hv-nv) :void
  (index uint)
  (n sizei)
  (v (:pointer half-nv)))

(defglextfun ("glVertexAttribs4hvNV" vertex-attribs-4hv-nv) :void
  (index uint)
  (n sizei)
  (v (:pointer half-nv)))

(defglextfun ("glGenOcclusionQueriesNV" gen-occlusion-queries-nv) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glDeleteOcclusionQueriesNV" delete-occlusion-queries-nv) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glIsOcclusionQueryNV" is-occlusion-query-nv) boolean
  (id uint))

(defglextfun ("glBeginOcclusionQueryNV" begin-occlusion-query-nv) :void
  (id uint))

(defglextfun ("glEndOcclusionQueryNV" end-occlusion-query-nv) :void)

(defglextfun ("glGetOcclusionQueryivNV" get-occlusion-query-iv-nv) :void
  (id uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetOcclusionQueryuivNV" get-occlusion-query-uiv-nv) :void
  (id uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glProgramBufferParametersfvNV" program-buffer-parameters-fv-nv) :void
  (target enum)
  (bindingIndex uint)
  (wordIndex uint)
  (count sizei)
  (params (:pointer float)))

(defglextfun ("glProgramBufferParametersIivNV" program-buffer-parameters-iiv-nv) :void
  (target enum)
  (bindingIndex uint)
  (wordIndex uint)
  (count sizei)
  (params (:pointer int)))

(defglextfun ("glProgramBufferParametersIuivNV" program-buffer-parameters-iuiv-nv) :void
  (target enum)
  (bindingIndex uint)
  (wordIndex uint)
  (count sizei)
  (params (:pointer uint)))

(defglextfun ("glGenPathsNV" gen-paths-nv) uint
  (range sizei))

(defglextfun ("glDeletePathsNV" delete-paths-nv) :void
  (path uint)
  (range sizei))

(defglextfun ("glIsPathNV" is-path-nv) boolean
  (path uint))

(defglextfun ("glPathCommandsNV" path-commands-nv) :void
  (path uint)
  (numCommands sizei)
  (commands (:pointer ubyte))
  (numCoords sizei)
  (coordType enum)
  (coords (:pointer :void)))

(defglextfun ("glPathCoordsNV" path-coords-nv) :void
  (path uint)
  (numCoords sizei)
  (coordType enum)
  (coords (:pointer :void)))

(defglextfun ("glPathSubCommandsNV" path-sub-commands-nv) :void
  (path uint)
  (commandStart sizei)
  (commandsToDelete sizei)
  (numCommands sizei)
  (commands (:pointer ubyte))
  (numCoords sizei)
  (coordType enum)
  (coords (:pointer :void)))

(defglextfun ("glPathSubCoordsNV" path-sub-coords-nv) :void
  (path uint)
  (coordStart sizei)
  (numCoords sizei)
  (coordType enum)
  (coords (:pointer :void)))

(defglextfun ("glPathStringNV" path-string-nv) :void
  (path uint)
  (format enum)
  (length sizei)
  (pathString (:pointer :void)))

(defglextfun ("glPathGlyphsNV" path-glyphs-nv) :void
  (firstPathName uint)
  (fontTarget enum)
  (fontName (:pointer :void))
  (fontStyle bitfield)
  (numGlyphs sizei)
  (type enum)
  (charcodes (:pointer :void))
  (handleMissingGlyphs enum)
  (pathParameterTemplate uint)
  (emScale float))

(defglextfun ("glPathGlyphRangeNV" path-glyph-range-nv) :void
  (firstPathName uint)
  (fontTarget enum)
  (fontName (:pointer :void))
  (fontStyle bitfield)
  (firstGlyph uint)
  (numGlyphs sizei)
  (handleMissingGlyphs enum)
  (pathParameterTemplate uint)
  (emScale float))

(defglextfun ("glWeightPathsNV" weight-paths-nv) :void
  (resultPath uint)
  (numPaths sizei)
  (paths (:pointer uint))
  (weights (:pointer float)))

(defglextfun ("glCopyPathNV" copy-path-nv) :void
  (resultPath uint)
  (srcPath uint))

(defglextfun ("glInterpolatePathsNV" interpolate-paths-nv) :void
  (resultPath uint)
  (pathA uint)
  (pathB uint)
  (weight float))

(defglextfun ("glTransformPathNV" transform-path-nv) :void
  (resultPath uint)
  (srcPath uint)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glPathParameterivNV" path-parameter-iv-nv) :void
  (path uint)
  (pname enum)
  (value (:pointer int)))

(defglextfun ("glPathParameteriNV" path-parameter-i-nv) :void
  (path uint)
  (pname enum)
  (value int))

(defglextfun ("glPathParameterfvNV" path-parameter-fv-nv) :void
  (path uint)
  (pname enum)
  (value (:pointer float)))

(defglextfun ("glPathParameterfNV" path-parameter-f-nv) :void
  (path uint)
  (pname enum)
  (value float))

(defglextfun ("glPathDashArrayNV" path-dash-array-nv) :void
  (path uint)
  (dashCount sizei)
  (dashArray (:pointer float)))

(defglextfun ("glPathStencilFuncNV" path-stencil-func-nv) :void
  (func enum)
  (ref int)
  (mask uint))

(defglextfun ("glPathStencilDepthOffsetNV" path-stencil-depth-offset-nv) :void
  (factor float)
  (units float))

(defglextfun ("glStencilFillPathNV" stencil-fill-path-nv) :void
  (path uint)
  (fillMode enum)
  (mask uint))

(defglextfun ("glStencilStrokePathNV" stencil-stroke-path-nv) :void
  (path uint)
  (reference int)
  (mask uint))

(defglextfun ("glStencilFillPathInstancedNV" stencil-fill-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (fillMode enum)
  (mask uint)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glStencilStrokePathInstancedNV" stencil-stroke-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (reference int)
  (mask uint)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glPathCoverDepthFuncNV" path-cover-depth-func-nv) :void
  (func enum))

(defglextfun ("glPathColorGenNV" path-color-gen-nv) :void
  (color enum)
  (genMode enum)
  (colorFormat enum)
  (coeffs (:pointer float)))

(defglextfun ("glPathTexGenNV" path-tex-gen-nv) :void
  (texCoordSet enum)
  (genMode enum)
  (components int)
  (coeffs (:pointer float)))

(defglextfun ("glPathFogGenNV" path-fog-gen-nv) :void
  (genMode enum))

(defglextfun ("glCoverFillPathNV" cover-fill-path-nv) :void
  (path uint)
  (coverMode enum))

(defglextfun ("glCoverStrokePathNV" cover-stroke-path-nv) :void
  (path uint)
  (coverMode enum))

(defglextfun ("glCoverFillPathInstancedNV" cover-fill-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (coverMode enum)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glCoverStrokePathInstancedNV" cover-stroke-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (coverMode enum)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glGetPathParameterivNV" get-path-parameter-iv-nv) :void
  (path uint)
  (pname enum)
  (value (:pointer int)))

(defglextfun ("glGetPathParameterfvNV" get-path-parameter-fv-nv) :void
  (path uint)
  (pname enum)
  (value (:pointer float)))

(defglextfun ("glGetPathCommandsNV" get-path-commands-nv) :void
  (path uint)
  (commands (:pointer ubyte)))

(defglextfun ("glGetPathCoordsNV" get-path-coords-nv) :void
  (path uint)
  (coords (:pointer float)))

(defglextfun ("glGetPathDashArrayNV" get-path-dash-array-nv) :void
  (path uint)
  (dashArray (:pointer float)))

(defglextfun ("glGetPathMetricsNV" get-path-metrics-nv) :void
  (metricQueryMask bitfield)
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (stride sizei)
  (metrics (:pointer float)))

(defglextfun ("glGetPathMetricRangeNV" get-path-metric-range-nv) :void
  (metricQueryMask bitfield)
  (firstPathName uint)
  (numPaths sizei)
  (stride sizei)
  (metrics (:pointer float)))

(defglextfun ("glGetPathSpacingNV" get-path-spacing-nv) :void
  (pathListMode enum)
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (advanceScale float)
  (kerningScale float)
  (transformType enum)
  (returnedSpacing (:pointer float)))

(defglextfun ("glGetPathColorGenivNV" get-path-color-gen-iv-nv) :void
  (color enum)
  (pname enum)
  (value (:pointer int)))

(defglextfun ("glGetPathColorGenfvNV" get-path-color-gen-fv-nv) :void
  (color enum)
  (pname enum)
  (value (:pointer float)))

(defglextfun ("glGetPathTexGenivNV" get-path-tex-gen-iv-nv) :void
  (texCoordSet enum)
  (pname enum)
  (value (:pointer int)))

(defglextfun ("glGetPathTexGenfvNV" get-path-tex-gen-fv-nv) :void
  (texCoordSet enum)
  (pname enum)
  (value (:pointer float)))

(defglextfun ("glIsPointInFillPathNV" is-point-in-fill-path-nv) boolean
  (path uint)
  (mask uint)
  (x float)
  (y float))

(defglextfun ("glIsPointInStrokePathNV" is-point-in-stroke-path-nv) boolean
  (path uint)
  (x float)
  (y float))

(defglextfun ("glGetPathLengthNV" get-path-length-nv) float
  (path uint)
  (startSegment sizei)
  (numSegments sizei))

(defglextfun ("glPointAlongPathNV" point-along-path-nv) boolean
  (path uint)
  (startSegment sizei)
  (numSegments sizei)
  (distance float)
  (x (:pointer float))
  (y (:pointer float))
  (tangentX (:pointer float))
  (tangentY (:pointer float)))

(defglextfun ("glMatrixLoad3x2fNV" matrix-load-3x2-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixLoad3x3fNV" matrix-load-3x3-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixLoadTranspose3x3fNV" matrix-load-transpose-3x3-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixMult3x2fNV" matrix-mult-3x2-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixMult3x3fNV" matrix-mult-3x3-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixMultTranspose3x3fNV" matrix-mult-transpose-3x3-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glStencilThenCoverFillPathNV" stencil-then-cover-fill-path-nv) :void
  (path uint)
  (fillMode enum)
  (mask uint)
  (coverMode enum))

(defglextfun ("glStencilThenCoverStrokePathNV" stencil-then-cover-stroke-path-nv) :void
  (path uint)
  (reference int)
  (mask uint)
  (coverMode enum))

(defglextfun ("glStencilThenCoverFillPathInstancedNV" stencil-then-cover-fill-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (fillMode enum)
  (mask uint)
  (coverMode enum)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glStencilThenCoverStrokePathInstancedNV" stencil-then-cover-stroke-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (reference int)
  (mask uint)
  (coverMode enum)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glPathGlyphIndexRangeNV" path-glyph-index-range-nv) enum
  (fontTarget enum)
  (fontName (:pointer :void))
  (fontStyle bitfield)
  (pathParameterTemplate uint)
  (emScale float)
  (baseAndCount uint [2]))

(defglextfun ("glPathGlyphIndexArrayNV" path-glyph-index-array-nv) enum
  (firstPathName uint)
  (fontTarget enum)
  (fontName (:pointer :void))
  (fontStyle bitfield)
  (firstGlyphIndex uint)
  (numGlyphs sizei)
  (pathParameterTemplate uint)
  (emScale float))

(defglextfun ("glPathMemoryGlyphIndexArrayNV" path-memory-glyph-index-array-nv) enum
  (firstPathName uint)
  (fontTarget enum)
  (fontSize sizeiptr)
  (fontData (:pointer :void))
  (faceIndex sizei)
  (firstGlyphIndex uint)
  (numGlyphs sizei)
  (pathParameterTemplate uint)
  (emScale float))

(defglextfun ("glProgramPathFragmentInputGenNV" program-path-fragment-input-gen-nv) :void
  (program uint)
  (location int)
  (genMode enum)
  (components int)
  (coeffs (:pointer float)))

(defglextfun ("glGetProgramResourcefvNV" get-program-resource-fv-nv) :void
  (program uint)
  (programInterface enum)
  (index uint)
  (propCount sizei)
  (props (:pointer enum))
  (bufSize sizei)
  (length (:pointer sizei))
  (params (:pointer float)))

(defglextfun ("glPixelDataRangeNV" pixel-data-range-nv) :void
  (target enum)
  (length sizei)
  (pointer (:pointer :void)))

(defglextfun ("glFlushPixelDataRangeNV" flush-pixel-data-range-nv) :void
  (target enum))

(defglextfun ("glPointParameteriNV" point-parameter-i-nv) :void
  (pname enum)
  (param int))

(defglextfun ("glPointParameterivNV" point-parameter-iv-nv) :void
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glPresentFrameKeyedNV" present-frame-keyed-nv) :void
  (video_slot uint)
  (minPresentTime uint64-ext)
  (beginPresentTimeId uint)
  (presentDurationId uint)
  (type enum)
  (target0 enum)
  (fill0 uint)
  (key0 uint)
  (target1 enum)
  (fill1 uint)
  (key1 uint))

(defglextfun ("glPresentFrameDualFillNV" present-frame-dual-fill-nv) :void
  (video_slot uint)
  (minPresentTime uint64-ext)
  (beginPresentTimeId uint)
  (presentDurationId uint)
  (type enum)
  (target0 enum)
  (fill0 uint)
  (target1 enum)
  (fill1 uint)
  (target2 enum)
  (fill2 uint)
  (target3 enum)
  (fill3 uint))

(defglextfun ("glGetVideoivNV" get-video-iv-nv) :void
  (video_slot uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetVideouivNV" get-video-uiv-nv) :void
  (video_slot uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetVideoi64vNV" get-video-i64v-nv) :void
  (video_slot uint)
  (pname enum)
  (params (:pointer int64-ext)))

(defglextfun ("glGetVideoui64vNV" get-video-ui64v-nv) :void
  (video_slot uint)
  (pname enum)
  (params (:pointer uint64-ext)))

(defglextfun ("glPrimitiveRestartNV" primitive-restart-nv) :void)

(defglextfun ("glPrimitiveRestartIndexNV" primitive-restart-index-nv) :void
  (index uint))

(defglextfun ("glCombinerParameterfvNV" combiner-parameter-fv-nv) :void
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glCombinerParameterfNV" combiner-parameter-f-nv) :void
  (pname enum)
  (param float))

(defglextfun ("glCombinerParameterivNV" combiner-parameter-iv-nv) :void
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glCombinerParameteriNV" combiner-parameter-i-nv) :void
  (pname enum)
  (param int))

(defglextfun ("glCombinerInputNV" combiner-input-nv) :void
  (stage enum)
  (portion enum)
  (variable enum)
  (input enum)
  (mapping enum)
  (componentUsage enum))

(defglextfun ("glCombinerOutputNV" combiner-output-nv) :void
  (stage enum)
  (portion enum)
  (abOutput enum)
  (cdOutput enum)
  (sumOutput enum)
  (scale enum)
  (bias enum)
  (abDotProduct boolean)
  (cdDotProduct boolean)
  (muxSum boolean))

(defglextfun ("glFinalCombinerInputNV" final-combiner-input-nv) :void
  (variable enum)
  (input enum)
  (mapping enum)
  (componentUsage enum))

(defglextfun ("glGetCombinerInputParameterfvNV" get-combiner-input-parameter-fv-nv) :void
  (stage enum)
  (portion enum)
  (variable enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetCombinerInputParameterivNV" get-combiner-input-parameter-iv-nv) :void
  (stage enum)
  (portion enum)
  (variable enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetCombinerOutputParameterfvNV" get-combiner-output-parameter-fv-nv) :void
  (stage enum)
  (portion enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetCombinerOutputParameterivNV" get-combiner-output-parameter-iv-nv) :void
  (stage enum)
  (portion enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetFinalCombinerInputParameterfvNV" get-final-combiner-input-parameter-fv-nv) :void
  (variable enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetFinalCombinerInputParameterivNV" get-final-combiner-input-parameter-iv-nv) :void
  (variable enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glCombinerStageParameterfvNV" combiner-stage-parameter-fv-nv) :void
  (stage enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetCombinerStageParameterfvNV" get-combiner-stage-parameter-fv-nv) :void
  (stage enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glMakeBufferResidentNV" make-buffer-resident-nv) :void
  (target enum)
  (access enum))

(defglextfun ("glMakeBufferNonResidentNV" make-buffer-non-resident-nv) :void
  (target enum))

(defglextfun ("glIsBufferResidentNV" is-buffer-resident-nv) boolean
  (target enum))

(defglextfun ("glMakeNamedBufferResidentNV" make-named-buffer-resident-nv) :void
  (buffer uint)
  (access enum))

(defglextfun ("glMakeNamedBufferNonResidentNV" make-named-buffer-non-resident-nv) :void
  (buffer uint))

(defglextfun ("glIsNamedBufferResidentNV" is-named-buffer-resident-nv) boolean
  (buffer uint))

(defglextfun ("glGetBufferParameterui64vNV" get-buffer-parameter-ui64v-nv) :void
  (target enum)
  (pname enum)
  (params (:pointer uint64-ext)))

(defglextfun ("glGetNamedBufferParameterui64vNV" get-named-buffer-parameter-ui64v-nv) :void
  (buffer uint)
  (pname enum)
  (params (:pointer uint64-ext)))

(defglextfun ("glGetIntegerui64vNV" get-integer-ui64v-nv) :void
  (value enum)
  (result (:pointer uint64-ext)))

(defglextfun ("glUniformui64NV" uniform-ui64-nv) :void
  (location int)
  (value uint64-ext))

(defglextfun ("glUniformui64vNV" uniform-ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glProgramUniformui64NV" program-uniform-ui64-nv) :void
  (program uint)
  (location int)
  (value uint64-ext))

(defglextfun ("glProgramUniformui64vNV" program-uniform-ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glTextureBarrierNV" texture-barrier-nv) :void)

(defglextfun ("glTexImage2DMultisampleCoverageNV" tex-image-2d-multisample-coverage-nv) :void
  (target enum)
  (coverageSamples sizei)
  (colorSamples sizei)
  (internalFormat int)
  (width sizei)
  (height sizei)
  (fixedSampleLocations boolean))

(defglextfun ("glTexImage3DMultisampleCoverageNV" tex-image-3d-multisample-coverage-nv) :void
  (target enum)
  (coverageSamples sizei)
  (colorSamples sizei)
  (internalFormat int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedSampleLocations boolean))

(defglextfun ("glTextureImage2DMultisampleNV" texture-image-2d-multisample-nv) :void
  (texture uint)
  (target enum)
  (samples sizei)
  (internalFormat int)
  (width sizei)
  (height sizei)
  (fixedSampleLocations boolean))

(defglextfun ("glTextureImage3DMultisampleNV" texture-image-3d-multisample-nv) :void
  (texture uint)
  (target enum)
  (samples sizei)
  (internalFormat int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedSampleLocations boolean))

(defglextfun ("glTextureImage2DMultisampleCoverageNV" texture-image-2d-multisample-coverage-nv) :void
  (texture uint)
  (target enum)
  (coverageSamples sizei)
  (colorSamples sizei)
  (internalFormat int)
  (width sizei)
  (height sizei)
  (fixedSampleLocations boolean))

(defglextfun ("glTextureImage3DMultisampleCoverageNV" texture-image-3d-multisample-coverage-nv) :void
  (texture uint)
  (target enum)
  (coverageSamples sizei)
  (colorSamples sizei)
  (internalFormat int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedSampleLocations boolean))

(defglextfun ("glBeginTransformFeedbackNV" begin-transform-feedback-nv) :void
  (primitiveMode enum))

(defglextfun ("glEndTransformFeedbackNV" end-transform-feedback-nv) :void)

(defglextfun ("glTransformFeedbackAttribsNV" transform-feedback-attribs-nv) :void
  (count sizei)
  (attribs (:pointer int))
  (bufferMode enum))

(defglextfun ("glBindBufferRangeNV" bind-buffer-range-nv) :void
  (target enum)
  (index uint)
  (buffer uint)
  (offset intptr)
  (size sizeiptr))

(defglextfun ("glBindBufferOffsetNV" bind-buffer-offset-nv) :void
  (target enum)
  (index uint)
  (buffer uint)
  (offset intptr))

(defglextfun ("glBindBufferBaseNV" bind-buffer-base-nv) :void
  (target enum)
  (index uint)
  (buffer uint))

(defglextfun ("glTransformFeedbackVaryingsNV" transform-feedback-varyings-nv) :void
  (program uint)
  (count sizei)
  (locations (:pointer int))
  (bufferMode enum))

(defglextfun ("glActiveVaryingNV" active-varying-nv) :void
  (program uint)
  (name (:pointer char)))

(defglextfun ("glGetVaryingLocationNV" get-varying-location-nv) int
  (program uint)
  (name (:pointer char)))

(defglextfun ("glGetActiveVaryingNV" get-active-varying-nv) :void
  (program uint)
  (index uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (size (:pointer sizei))
  (type (:pointer enum))
  (name (:pointer char)))

(defglextfun ("glGetTransformFeedbackVaryingNV" get-transform-feedback-varying-nv) :void
  (program uint)
  (index uint)
  (location (:pointer int)))

(defglextfun ("glTransformFeedbackStreamAttribsNV" transform-feedback-stream-attribs-nv) :void
  (count sizei)
  (attribs (:pointer int))
  (nbuffers sizei)
  (bufstreams (:pointer int))
  (bufferMode enum))

(defglextfun ("glBindTransformFeedbackNV" bind-transform-feedback-nv) :void
  (target enum)
  (id uint))

(defglextfun ("glDeleteTransformFeedbacksNV" delete-transform-feedbacks-nv) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glGenTransformFeedbacksNV" gen-transform-feedbacks-nv) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glIsTransformFeedbackNV" is-transform-feedback-nv) boolean
  (id uint))

(defglextfun ("glPauseTransformFeedbackNV" pause-transform-feedback-nv) :void)

(defglextfun ("glResumeTransformFeedbackNV" resume-transform-feedback-nv) :void)

(defglextfun ("glDrawTransformFeedbackNV" draw-transform-feedback-nv) :void
  (mode enum)
  (id uint))

(defglextfun ("glVDPAUInitNV" vdpau-init-nv) :void
  (vdpDevice (:pointer :void))
  (getProcAddress (:pointer :void)))

(defglextfun ("glVDPAUFiniNV" vdpau-fini-nv) :void)

(defglextfun ("glVDPAURegisterVideoSurfaceNV" vdpau-register-video-surface-nv) vdpau-surface-nv
  (vdpSurface (:pointer :void))
  (target enum)
  (numTextureNames sizei)
  (textureNames (:pointer uint)))

(defglextfun ("glVDPAURegisterOutputSurfaceNV" vdpau-register-output-surface-nv) vdpau-surface-nv
  (vdpSurface (:pointer :void))
  (target enum)
  (numTextureNames sizei)
  (textureNames (:pointer uint)))

(defglextfun ("glVDPAUIsSurfaceNV" vdpau-is-surface-nv) boolean
  (surface vdpau-surface-nv))

(defglextfun ("glVDPAUUnregisterSurfaceNV" vdpau-unregister-surface-nv) :void
  (surface vdpau-surface-nv))

(defglextfun ("glVDPAUGetSurfaceivNV" vdpau-get-surface-iv-nv) :void
  (surface vdpau-surface-nv)
  (pname enum)
  (bufSize sizei)
  (length (:pointer sizei))
  (values (:pointer int)))

(defglextfun ("glVDPAUSurfaceAccessNV" vdpau-surface-access-nv) :void
  (surface vdpau-surface-nv)
  (access enum))

(defglextfun ("glVDPAUMapSurfacesNV" vdpau-map-surfaces-nv) :void
  (numSurfaces sizei)
  (surfaces (:pointer vdpau-surface-nv)))

(defglextfun ("glVDPAUUnmapSurfacesNV" vdpau-unmap-surfaces-nv) :void
  (numSurface sizei)
  (surfaces (:pointer vdpau-surface-nv)))

(defglextfun ("glFlushVertexArrayRangeNV" flush-vertex-array-range-nv) :void)

(defglextfun ("glVertexArrayRangeNV" vertex-array-range-nv) :void
  (length sizei)
  (pointer (:pointer :void)))

(defglextfun ("glVertexAttribL1i64NV" vertex-attrib-l1i64-nv) :void
  (index uint)
  (x int64-ext))

(defglextfun ("glVertexAttribL2i64NV" vertex-attrib-l2i64-nv) :void
  (index uint)
  (x int64-ext)
  (y int64-ext))

(defglextfun ("glVertexAttribL3i64NV" vertex-attrib-l3i64-nv) :void
  (index uint)
  (x int64-ext)
  (y int64-ext)
  (z int64-ext))

(defglextfun ("glVertexAttribL4i64NV" vertex-attrib-l4i64-nv) :void
  (index uint)
  (x int64-ext)
  (y int64-ext)
  (z int64-ext)
  (w int64-ext))

(defglextfun ("glVertexAttribL1i64vNV" vertex-attrib-l1i64v-nv) :void
  (index uint)
  (v (:pointer int64-ext)))

(defglextfun ("glVertexAttribL2i64vNV" vertex-attrib-l2i64v-nv) :void
  (index uint)
  (v (:pointer int64-ext)))

(defglextfun ("glVertexAttribL3i64vNV" vertex-attrib-l3i64v-nv) :void
  (index uint)
  (v (:pointer int64-ext)))

(defglextfun ("glVertexAttribL4i64vNV" vertex-attrib-l4i64v-nv) :void
  (index uint)
  (v (:pointer int64-ext)))

(defglextfun ("glVertexAttribL1ui64NV" vertex-attrib-l1ui64-nv) :void
  (index uint)
  (x uint64-ext))

(defglextfun ("glVertexAttribL2ui64NV" vertex-attrib-l2ui64-nv) :void
  (index uint)
  (x uint64-ext)
  (y uint64-ext))

(defglextfun ("glVertexAttribL3ui64NV" vertex-attrib-l3ui64-nv) :void
  (index uint)
  (x uint64-ext)
  (y uint64-ext)
  (z uint64-ext))

(defglextfun ("glVertexAttribL4ui64NV" vertex-attrib-l4ui64-nv) :void
  (index uint)
  (x uint64-ext)
  (y uint64-ext)
  (z uint64-ext)
  (w uint64-ext))

(defglextfun ("glVertexAttribL1ui64vNV" vertex-attrib-l1ui64v-nv) :void
  (index uint)
  (v (:pointer uint64-ext)))

(defglextfun ("glVertexAttribL2ui64vNV" vertex-attrib-l2ui64v-nv) :void
  (index uint)
  (v (:pointer uint64-ext)))

(defglextfun ("glVertexAttribL3ui64vNV" vertex-attrib-l3ui64v-nv) :void
  (index uint)
  (v (:pointer uint64-ext)))

(defglextfun ("glVertexAttribL4ui64vNV" vertex-attrib-l4ui64v-nv) :void
  (index uint)
  (v (:pointer uint64-ext)))

(defglextfun ("glGetVertexAttribLi64vNV" get-vertex-attrib-li64v-nv) :void
  (index uint)
  (pname enum)
  (params (:pointer int64-ext)))

(defglextfun ("glGetVertexAttribLui64vNV" get-vertex-attrib-lui64v-nv) :void
  (index uint)
  (pname enum)
  (params (:pointer uint64-ext)))

(defglextfun ("glVertexAttribLFormatNV" vertex-attrib-l-format-nv) :void
  (index uint)
  (size int)
  (type enum)
  (stride sizei))

(defglextfun ("glBufferAddressRangeNV" buffer-address-range-nv) :void
  (pname enum)
  (index uint)
  (address uint64-ext)
  (length sizeiptr))

(defglextfun ("glVertexFormatNV" vertex-format-nv) :void
  (size int)
  (type enum)
  (stride sizei))

(defglextfun ("glNormalFormatNV" normal-format-nv) :void
  (type enum)
  (stride sizei))

(defglextfun ("glColorFormatNV" color-format-nv) :void
  (size int)
  (type enum)
  (stride sizei))

(defglextfun ("glIndexFormatNV" index-format-nv) :void
  (type enum)
  (stride sizei))

(defglextfun ("glTexCoordFormatNV" tex-coord-format-nv) :void
  (size int)
  (type enum)
  (stride sizei))

(defglextfun ("glEdgeFlagFormatNV" edge-flag-format-nv) :void
  (stride sizei))

(defglextfun ("glSecondaryColorFormatNV" secondary-color-format-nv) :void
  (size int)
  (type enum)
  (stride sizei))

(defglextfun ("glFogCoordFormatNV" fog-coord-format-nv) :void
  (type enum)
  (stride sizei))

(defglextfun ("glVertexAttribFormatNV" vertex-attrib-format-nv) :void
  (index uint)
  (size int)
  (type enum)
  (normalized boolean)
  (stride sizei))

(defglextfun ("glVertexAttribIFormatNV" vertex-attrib-i-format-nv) :void
  (index uint)
  (size int)
  (type enum)
  (stride sizei))

(defglextfun ("glGetIntegerui64i_vNV" get-integer-ui64i-v-nv) :void
  (value enum)
  (index uint)
  (result (:pointer uint64-ext)))

(defglextfun ("glAreProgramsResidentNV" are-programs-resident-nv) boolean
  (n sizei)
  (programs (:pointer uint))
  (residences (:pointer boolean)))

(defglextfun ("glBindProgramNV" bind-program-nv) :void
  (target enum)
  (id uint))

(defglextfun ("glDeleteProgramsNV" delete-programs-nv) :void
  (n sizei)
  (programs (:pointer uint)))

(defglextfun ("glExecuteProgramNV" execute-program-nv) :void
  (target enum)
  (id uint)
  (params (:pointer float)))

(defglextfun ("glGenProgramsNV" gen-programs-nv) :void
  (n sizei)
  (programs (:pointer uint)))

(defglextfun ("glGetProgramParameterdvNV" get-program-parameter-dv-nv) :void
  (target enum)
  (index uint)
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glGetProgramParameterfvNV" get-program-parameter-fv-nv) :void
  (target enum)
  (index uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetProgramivNV" get-program-iv-nv) :void
  (id uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetProgramStringNV" get-program-string-nv) :void
  (id uint)
  (pname enum)
  (program (:pointer ubyte)))

(defglextfun ("glGetTrackMatrixivNV" get-track-matrix-iv-nv) :void
  (target enum)
  (address uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetVertexAttribdvNV" get-vertex-attrib-dv-nv) :void
  (index uint)
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glGetVertexAttribfvNV" get-vertex-attrib-fv-nv) :void
  (index uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetVertexAttribivNV" get-vertex-attrib-iv-nv) :void
  (index uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetVertexAttribPointervNV" get-vertex-attrib-pointer-v-nv) :void
  (index uint)
  (pname enum)
  (pointer (:pointer (:pointer :void))))

(defglextfun ("glIsProgramNV" is-program-nv) boolean
  (id uint))

(defglextfun ("glLoadProgramNV" load-program-nv) :void
  (target enum)
  (id uint)
  (len sizei)
  (program (:pointer ubyte)))

(defglextfun ("glProgramParameter4dNV" program-parameter-4d-nv) :void
  (target enum)
  (index uint)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glProgramParameter4dvNV" program-parameter-4dv-nv) :void
  (target enum)
  (index uint)
  (v (:pointer double)))

(defglextfun ("glProgramParameter4fNV" program-parameter-4f-nv) :void
  (target enum)
  (index uint)
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glProgramParameter4fvNV" program-parameter-4fv-nv) :void
  (target enum)
  (index uint)
  (v (:pointer float)))

(defglextfun ("glProgramParameters4dvNV" program-parameters-4dv-nv) :void
  (target enum)
  (index uint)
  (count sizei)
  (v (:pointer double)))

(defglextfun ("glProgramParameters4fvNV" program-parameters-4fv-nv) :void
  (target enum)
  (index uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glRequestResidentProgramsNV" request-resident-programs-nv) :void
  (n sizei)
  (programs (:pointer uint)))

(defglextfun ("glTrackMatrixNV" track-matrix-nv) :void
  (target enum)
  (address uint)
  (matrix enum)
  (transform enum))

(defglextfun ("glVertexAttribPointerNV" vertex-attrib-pointer-nv) :void
  (index uint)
  (fsize int)
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glVertexAttrib1dNV" vertex-attrib-1d-nv) :void
  (index uint)
  (x double))

(defglextfun ("glVertexAttrib1dvNV" vertex-attrib-1dv-nv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib1fNV" vertex-attrib-1f-nv) :void
  (index uint)
  (x float))

(defglextfun ("glVertexAttrib1fvNV" vertex-attrib-1fv-nv) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glVertexAttrib1sNV" vertex-attrib-1s-nv) :void
  (index uint)
  (x short))

(defglextfun ("glVertexAttrib1svNV" vertex-attrib-1sv-nv) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib2dNV" vertex-attrib-2d-nv) :void
  (index uint)
  (x double)
  (y double))

(defglextfun ("glVertexAttrib2dvNV" vertex-attrib-2dv-nv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib2fNV" vertex-attrib-2f-nv) :void
  (index uint)
  (x float)
  (y float))

(defglextfun ("glVertexAttrib2fvNV" vertex-attrib-2fv-nv) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glVertexAttrib2sNV" vertex-attrib-2s-nv) :void
  (index uint)
  (x short)
  (y short))

(defglextfun ("glVertexAttrib2svNV" vertex-attrib-2sv-nv) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib3dNV" vertex-attrib-3d-nv) :void
  (index uint)
  (x double)
  (y double)
  (z double))

(defglextfun ("glVertexAttrib3dvNV" vertex-attrib-3dv-nv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib3fNV" vertex-attrib-3f-nv) :void
  (index uint)
  (x float)
  (y float)
  (z float))

(defglextfun ("glVertexAttrib3fvNV" vertex-attrib-3fv-nv) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glVertexAttrib3sNV" vertex-attrib-3s-nv) :void
  (index uint)
  (x short)
  (y short)
  (z short))

(defglextfun ("glVertexAttrib3svNV" vertex-attrib-3sv-nv) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib4dNV" vertex-attrib-4d-nv) :void
  (index uint)
  (x double)
  (y double)
  (z double)
  (w double))

(defglextfun ("glVertexAttrib4dvNV" vertex-attrib-4dv-nv) :void
  (index uint)
  (v (:pointer double)))

(defglextfun ("glVertexAttrib4fNV" vertex-attrib-4f-nv) :void
  (index uint)
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glVertexAttrib4fvNV" vertex-attrib-4fv-nv) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glVertexAttrib4sNV" vertex-attrib-4s-nv) :void
  (index uint)
  (x short)
  (y short)
  (z short)
  (w short))

(defglextfun ("glVertexAttrib4svNV" vertex-attrib-4sv-nv) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttrib4ubNV" vertex-attrib-4ub-nv) :void
  (index uint)
  (x ubyte)
  (y ubyte)
  (z ubyte)
  (w ubyte))

(defglextfun ("glVertexAttrib4ubvNV" vertex-attrib-4ubv-nv) :void
  (index uint)
  (v (:pointer ubyte)))

(defglextfun ("glVertexAttribs1dvNV" vertex-attribs-1dv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer double)))

(defglextfun ("glVertexAttribs1fvNV" vertex-attribs-1fv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glVertexAttribs1svNV" vertex-attribs-1sv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer short)))

(defglextfun ("glVertexAttribs2dvNV" vertex-attribs-2dv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer double)))

(defglextfun ("glVertexAttribs2fvNV" vertex-attribs-2fv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glVertexAttribs2svNV" vertex-attribs-2sv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer short)))

(defglextfun ("glVertexAttribs3dvNV" vertex-attribs-3dv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer double)))

(defglextfun ("glVertexAttribs3fvNV" vertex-attribs-3fv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glVertexAttribs3svNV" vertex-attribs-3sv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer short)))

(defglextfun ("glVertexAttribs4dvNV" vertex-attribs-4dv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer double)))

(defglextfun ("glVertexAttribs4fvNV" vertex-attribs-4fv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glVertexAttribs4svNV" vertex-attribs-4sv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer short)))

(defglextfun ("glVertexAttribs4ubvNV" vertex-attribs-4ubv-nv) :void
  (index uint)
  (count sizei)
  (v (:pointer ubyte)))

(defglextfun ("glVertexAttribI1iEXT" vertex-attrib-i1i-ext) :void
  (index uint)
  (x int))

(defglextfun ("glVertexAttribI2iEXT" vertex-attrib-i2i-ext) :void
  (index uint)
  (x int)
  (y int))

(defglextfun ("glVertexAttribI3iEXT" vertex-attrib-i3i-ext) :void
  (index uint)
  (x int)
  (y int)
  (z int))

(defglextfun ("glVertexAttribI4iEXT" vertex-attrib-i4i-ext) :void
  (index uint)
  (x int)
  (y int)
  (z int)
  (w int))

(defglextfun ("glVertexAttribI1uiEXT" vertex-attrib-i1ui-ext) :void
  (index uint)
  (x uint))

(defglextfun ("glVertexAttribI2uiEXT" vertex-attrib-i2ui-ext) :void
  (index uint)
  (x uint)
  (y uint))

(defglextfun ("glVertexAttribI3uiEXT" vertex-attrib-i3ui-ext) :void
  (index uint)
  (x uint)
  (y uint)
  (z uint))

(defglextfun ("glVertexAttribI4uiEXT" vertex-attrib-i4ui-ext) :void
  (index uint)
  (x uint)
  (y uint)
  (z uint)
  (w uint))

(defglextfun ("glVertexAttribI1ivEXT" vertex-attrib-i1iv-ext) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttribI2ivEXT" vertex-attrib-i2iv-ext) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttribI3ivEXT" vertex-attrib-i3iv-ext) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttribI4ivEXT" vertex-attrib-i4iv-ext) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttribI1uivEXT" vertex-attrib-i1uiv-ext) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttribI2uivEXT" vertex-attrib-i2uiv-ext) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttribI3uivEXT" vertex-attrib-i3uiv-ext) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttribI4uivEXT" vertex-attrib-i4uiv-ext) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glVertexAttribI4bvEXT" vertex-attrib-i4bv-ext) :void
  (index uint)
  (v (:pointer byte)))

(defglextfun ("glVertexAttribI4svEXT" vertex-attrib-i4sv-ext) :void
  (index uint)
  (v (:pointer short)))

(defglextfun ("glVertexAttribI4ubvEXT" vertex-attrib-i4ubv-ext) :void
  (index uint)
  (v (:pointer ubyte)))

(defglextfun ("glVertexAttribI4usvEXT" vertex-attrib-i4usv-ext) :void
  (index uint)
  (v (:pointer ushort)))

(defglextfun ("glVertexAttribIPointerEXT" vertex-attrib-ipointer-ext) :void
  (index uint)
  (size int)
  (type enum)
  (stride sizei)
  (pointer (:pointer :void)))

(defglextfun ("glGetVertexAttribIivEXT" get-vertex-attrib-iiv-ext) :void
  (index uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetVertexAttribIuivEXT" get-vertex-attrib-iuiv-ext) :void
  (index uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glBeginVideoCaptureNV" begin-video-capture-nv) :void
  (video_capture_slot uint))

(defglextfun ("glBindVideoCaptureStreamBufferNV" bind-video-capture-stream-buffer-nv) :void
  (video_capture_slot uint)
  (stream uint)
  (frame_region enum)
  (offset intptr-arb))

(defglextfun ("glBindVideoCaptureStreamTextureNV" bind-video-capture-stream-texture-nv) :void
  (video_capture_slot uint)
  (stream uint)
  (frame_region enum)
  (target enum)
  (texture uint))

(defglextfun ("glEndVideoCaptureNV" end-video-capture-nv) :void
  (video_capture_slot uint))

(defglextfun ("glGetVideoCaptureivNV" get-video-capture-iv-nv) :void
  (video_capture_slot uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetVideoCaptureStreamivNV" get-video-capture-stream-iv-nv) :void
  (video_capture_slot uint)
  (stream uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetVideoCaptureStreamfvNV" get-video-capture-stream-fv-nv) :void
  (video_capture_slot uint)
  (stream uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetVideoCaptureStreamdvNV" get-video-capture-stream-dv-nv) :void
  (video_capture_slot uint)
  (stream uint)
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glVideoCaptureNV" video-capture-nv) enum
  (video_capture_slot uint)
  (sequence_num (:pointer uint))
  (capture_time (:pointer uint64-ext)))

(defglextfun ("glVideoCaptureStreamParameterivNV" video-capture-stream-parameter-iv-nv) :void
  (video_capture_slot uint)
  (stream uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glVideoCaptureStreamParameterfvNV" video-capture-stream-parameter-fv-nv) :void
  (video_capture_slot uint)
  (stream uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glVideoCaptureStreamParameterdvNV" video-capture-stream-parameter-dv-nv) :void
  (video_capture_slot uint)
  (stream uint)
  (pname enum)
  (params (:pointer double)))

(defglextfun ("glHintPGI" hint-pgi) :void
  (target enum)
  (mode int))

(defglextfun ("glDetailTexFuncSGIS" detail-tex-func-sgis) :void
  (target enum)
  (n sizei)
  (points (:pointer float)))

(defglextfun ("glGetDetailTexFuncSGIS" get-detail-tex-func-sgis) :void
  (target enum)
  (points (:pointer float)))

(defglextfun ("glFogFuncSGIS" fog-func-sgis) :void
  (n sizei)
  (points (:pointer float)))

(defglextfun ("glGetFogFuncSGIS" get-fog-func-sgis) :void
  (points (:pointer float)))

(defglextfun ("glSampleMaskSGIS" sample-mask-sgis) :void
  (value clampf)
  (invert boolean))

(defglextfun ("glSamplePatternSGIS" sample-pattern-sgis) :void
  (pattern enum))

(defglextfun ("glPixelTexGenParameteriSGIS" pixel-tex-gen-parameter-i-sgis) :void
  (pname enum)
  (param int))

(defglextfun ("glPixelTexGenParameterivSGIS" pixel-tex-gen-parameter-iv-sgis) :void
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glPixelTexGenParameterfSGIS" pixel-tex-gen-parameter-f-sgis) :void
  (pname enum)
  (param float))

(defglextfun ("glPixelTexGenParameterfvSGIS" pixel-tex-gen-parameter-fv-sgis) :void
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetPixelTexGenParameterivSGIS" get-pixel-tex-gen-parameter-iv-sgis) :void
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetPixelTexGenParameterfvSGIS" get-pixel-tex-gen-parameter-fv-sgis) :void
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glPointParameterfSGIS" point-parameter-f-sgis) :void
  (pname enum)
  (param float))

(defglextfun ("glPointParameterfvSGIS" point-parameter-fv-sgis) :void
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glSharpenTexFuncSGIS" sharpen-tex-func-sgis) :void
  (target enum)
  (n sizei)
  (points (:pointer float)))

(defglextfun ("glGetSharpenTexFuncSGIS" get-sharpen-tex-func-sgis) :void
  (target enum)
  (points (:pointer float)))

(defglextfun ("glTexImage4DSGIS" tex-image-4d-sgis) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (size4d sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTexSubImage4DSGIS" tex-sub-image-4d-sgis) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (woffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (size4d sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTextureColorMaskSGIS" texture-color-mask-sgis) :void
  (red boolean)
  (green boolean)
  (blue boolean)
  (alpha boolean))

(defglextfun ("glGetTexFilterFuncSGIS" get-tex-filter-func-sgis) :void
  (target enum)
  (filter enum)
  (weights (:pointer float)))

(defglextfun ("glTexFilterFuncSGIS" tex-filter-func-sgis) :void
  (target enum)
  (filter enum)
  (n sizei)
  (weights (:pointer float)))

(defglextfun ("glAsyncMarkerSGIX" async-marker-sgix) :void
  (marker uint))

(defglextfun ("glFinishAsyncSGIX" finish-async-sgix) int
  (markerp (:pointer uint)))

(defglextfun ("glPollAsyncSGIX" poll-async-sgix) int
  (markerp (:pointer uint)))

(defglextfun ("glGenAsyncMarkersSGIX" gen-async-markers-sgix) uint
  (range sizei))

(defglextfun ("glDeleteAsyncMarkersSGIX" delete-async-markers-sgix) :void
  (marker uint)
  (range sizei))

(defglextfun ("glIsAsyncMarkerSGIX" is-async-marker-sgix) boolean
  (marker uint))

(defglextfun ("glFlushRasterSGIX" flush-raster-sgix) :void)

(defglextfun ("glFragmentColorMaterialSGIX" fragment-color-material-sgix) :void
  (face enum)
  (mode enum))

(defglextfun ("glFragmentLightfSGIX" fragment-light-f-sgix) :void
  (light enum)
  (pname enum)
  (param float))

(defglextfun ("glFragmentLightfvSGIX" fragment-light-fv-sgix) :void
  (light enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glFragmentLightiSGIX" fragment-light-i-sgix) :void
  (light enum)
  (pname enum)
  (param int))

(defglextfun ("glFragmentLightivSGIX" fragment-light-iv-sgix) :void
  (light enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glFragmentLightModelfSGIX" fragment-light-model-f-sgix) :void
  (pname enum)
  (param float))

(defglextfun ("glFragmentLightModelfvSGIX" fragment-light-model-fv-sgix) :void
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glFragmentLightModeliSGIX" fragment-light-model-i-sgix) :void
  (pname enum)
  (param int))

(defglextfun ("glFragmentLightModelivSGIX" fragment-light-model-iv-sgix) :void
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glFragmentMaterialfSGIX" fragment-material-f-sgix) :void
  (face enum)
  (pname enum)
  (param float))

(defglextfun ("glFragmentMaterialfvSGIX" fragment-material-fv-sgix) :void
  (face enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glFragmentMaterialiSGIX" fragment-material-i-sgix) :void
  (face enum)
  (pname enum)
  (param int))

(defglextfun ("glFragmentMaterialivSGIX" fragment-material-iv-sgix) :void
  (face enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetFragmentLightfvSGIX" get-fragment-light-fv-sgix) :void
  (light enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetFragmentLightivSGIX" get-fragment-light-iv-sgix) :void
  (light enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetFragmentMaterialfvSGIX" get-fragment-material-fv-sgix) :void
  (face enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetFragmentMaterialivSGIX" get-fragment-material-iv-sgix) :void
  (face enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glLightEnviSGIX" light-env-i-sgix) :void
  (pname enum)
  (param int))

(defglextfun ("glFrameZoomSGIX" frame-zoom-sgix) :void
  (factor int))

(defglextfun ("glIglooInterfaceSGIX" igloo-interface-sgix) :void
  (pname enum)
  (params (:pointer :void)))

(defglextfun ("glGetInstrumentsSGIX" get-instruments-sgix) int)

(defglextfun ("glInstrumentsBufferSGIX" instruments-buffer-sgix) :void
  (size sizei)
  (buffer (:pointer int)))

(defglextfun ("glPollInstrumentsSGIX" poll-instruments-sgix) int
  (marker_p (:pointer int)))

(defglextfun ("glReadInstrumentsSGIX" read-instruments-sgix) :void
  (marker int))

(defglextfun ("glStartInstrumentsSGIX" start-instruments-sgix) :void)

(defglextfun ("glStopInstrumentsSGIX" stop-instruments-sgix) :void
  (marker int))

(defglextfun ("glGetListParameterfvSGIX" get-list-parameter-fv-sgix) :void
  (list uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetListParameterivSGIX" get-list-parameter-iv-sgix) :void
  (list uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glListParameterfSGIX" list-parameter-f-sgix) :void
  (list uint)
  (pname enum)
  (param float))

(defglextfun ("glListParameterfvSGIX" list-parameter-fv-sgix) :void
  (list uint)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glListParameteriSGIX" list-parameter-i-sgix) :void
  (list uint)
  (pname enum)
  (param int))

(defglextfun ("glListParameterivSGIX" list-parameter-iv-sgix) :void
  (list uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glPixelTexGenSGIX" pixel-tex-gen-sgix) :void
  (mode enum))

(defglextfun ("glDeformationMap3dSGIX" deformation-map-3d-sgix) :void
  (target enum)
  (u1 double)
  (u2 double)
  (ustride int)
  (uorder int)
  (v1 double)
  (v2 double)
  (vstride int)
  (vorder int)
  (w1 double)
  (w2 double)
  (wstride int)
  (worder int)
  (points (:pointer double)))

(defglextfun ("glDeformationMap3fSGIX" deformation-map-3f-sgix) :void
  (target enum)
  (u1 float)
  (u2 float)
  (ustride int)
  (uorder int)
  (v1 float)
  (v2 float)
  (vstride int)
  (vorder int)
  (w1 float)
  (w2 float)
  (wstride int)
  (worder int)
  (points (:pointer float)))

(defglextfun ("glDeformSGIX" deform-sgix) :void
  (mask FfdMaskSGIX))

(defglextfun ("glLoadIdentityDeformationMapSGIX" load-identity-deformation-map-sgix) :void
  (mask FfdMaskSGIX))

(defglextfun ("glReferencePlaneSGIX" reference-plane-sgix) :void
  (equation (:pointer double)))

(defglextfun ("glSpriteParameterfSGIX" sprite-parameter-f-sgix) :void
  (pname enum)
  (param float))

(defglextfun ("glSpriteParameterfvSGIX" sprite-parameter-fv-sgix) :void
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glSpriteParameteriSGIX" sprite-parameter-i-sgix) :void
  (pname enum)
  (param int))

(defglextfun ("glSpriteParameterivSGIX" sprite-parameter-iv-sgix) :void
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTagSampleBufferSGIX" tag-sample-buffer-sgix) :void)

(defglextfun ("glColorTableSGI" color-table-sgi) :void
  (target enum)
  (internalformat enum)
  (width sizei)
  (format enum)
  (type enum)
  (table (:pointer :void)))

(defglextfun ("glColorTableParameterfvSGI" color-table-parameter-fv-sgi) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glColorTableParameterivSGI" color-table-parameter-iv-sgi) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glCopyColorTableSGI" copy-color-table-sgi) :void
  (target enum)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei))

(defglextfun ("glGetColorTableSGI" get-color-table-sgi) :void
  (target enum)
  (format enum)
  (type enum)
  (table (:pointer :void)))

(defglextfun ("glGetColorTableParameterfvSGI" get-color-table-parameter-fv-sgi) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glGetColorTableParameterivSGI" get-color-table-parameter-iv-sgi) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glFinishTextureSUNX" finish-texture-sunx) :void)

(defglextfun ("glGlobalAlphaFactorbSUN" global-alpha-factor-b-sun) :void
  (factor byte))

(defglextfun ("glGlobalAlphaFactorsSUN" global-alpha-factor-s-sun) :void
  (factor short))

(defglextfun ("glGlobalAlphaFactoriSUN" global-alpha-factor-i-sun) :void
  (factor int))

(defglextfun ("glGlobalAlphaFactorfSUN" global-alpha-factor-f-sun) :void
  (factor float))

(defglextfun ("glGlobalAlphaFactordSUN" global-alpha-factor-d-sun) :void
  (factor double))

(defglextfun ("glGlobalAlphaFactorubSUN" global-alpha-factor-ub-sun) :void
  (factor ubyte))

(defglextfun ("glGlobalAlphaFactorusSUN" global-alpha-factor-us-sun) :void
  (factor ushort))

(defglextfun ("glGlobalAlphaFactoruiSUN" global-alpha-factor-ui-sun) :void
  (factor uint))

(defglextfun ("glDrawMeshArraysSUN" draw-mesh-arrays-sun) :void
  (mode enum)
  (first int)
  (count sizei)
  (width sizei))

(defglextfun ("glReplacementCodeuiSUN" replacement-code-ui-sun) :void
  (code uint))

(defglextfun ("glReplacementCodeusSUN" replacement-code-us-sun) :void
  (code ushort))

(defglextfun ("glReplacementCodeubSUN" replacement-code-ub-sun) :void
  (code ubyte))

(defglextfun ("glReplacementCodeuivSUN" replacement-code-uiv-sun) :void
  (code (:pointer uint)))

(defglextfun ("glReplacementCodeusvSUN" replacement-code-usv-sun) :void
  (code (:pointer ushort)))

(defglextfun ("glReplacementCodeubvSUN" replacement-code-ubv-sun) :void
  (code (:pointer ubyte)))

(defglextfun ("glReplacementCodePointerSUN" replacement-code-pointer-sun) :void
  (type enum)
  (stride sizei)
  (pointer (:pointer (:pointer :void))))

(defglextfun ("glColor4ubVertex2fSUN" color-4ub-vertex-2f-sun) :void
  (r ubyte)
  (g ubyte)
  (b ubyte)
  (a ubyte)
  (x float)
  (y float))

(defglextfun ("glColor4ubVertex2fvSUN" color-4ub-vertex-2fv-sun) :void
  (c (:pointer ubyte))
  (v (:pointer float)))

(defglextfun ("glColor4ubVertex3fSUN" color-4ub-vertex-3f-sun) :void
  (r ubyte)
  (g ubyte)
  (b ubyte)
  (a ubyte)
  (x float)
  (y float)
  (z float))

(defglextfun ("glColor4ubVertex3fvSUN" color-4ub-vertex-3fv-sun) :void
  (c (:pointer ubyte))
  (v (:pointer float)))

(defglextfun ("glColor3fVertex3fSUN" color-3f-vertex-3f-sun) :void
  (r float)
  (g float)
  (b float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glColor3fVertex3fvSUN" color-3f-vertex-3fv-sun) :void
  (c (:pointer float))
  (v (:pointer float)))

(defglextfun ("glNormal3fVertex3fSUN" normal-3f-vertex-3f-sun) :void
  (nx float)
  (ny float)
  (nz float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glNormal3fVertex3fvSUN" normal-3f-vertex-3fv-sun) :void
  (n (:pointer float))
  (v (:pointer float)))

(defglextfun ("glColor4fNormal3fVertex3fSUN" color-4f-normal-3f-vertex-3f-sun) :void
  (r float)
  (g float)
  (b float)
  (a float)
  (nx float)
  (ny float)
  (nz float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glColor4fNormal3fVertex3fvSUN" color-4f-normal-3f-vertex-3fv-sun) :void
  (c (:pointer float))
  (n (:pointer float))
  (v (:pointer float)))

(defglextfun ("glTexCoord2fVertex3fSUN" tex-coord-2f-vertex-3f-sun) :void
  (s float)
  (tee float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glTexCoord2fVertex3fvSUN" tex-coord-2f-vertex-3fv-sun) :void
  (tc (:pointer float))
  (v (:pointer float)))

(defglextfun ("glTexCoord4fVertex4fSUN" tex-coord-4f-vertex-4f-sun) :void
  (s float)
  (tee float)
  (p float)
  (q float)
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glTexCoord4fVertex4fvSUN" tex-coord-4f-vertex-4fv-sun) :void
  (tc (:pointer float))
  (v (:pointer float)))

(defglextfun ("glTexCoord2fColor4ubVertex3fSUN" tex-coord-2f-color-4ub-vertex-3f-sun) :void
  (s float)
  (tee float)
  (r ubyte)
  (g ubyte)
  (b ubyte)
  (a ubyte)
  (x float)
  (y float)
  (z float))

(defglextfun ("glTexCoord2fColor4ubVertex3fvSUN" tex-coord-2f-color-4ub-vertex-3fv-sun) :void
  (tc (:pointer float))
  (c (:pointer ubyte))
  (v (:pointer float)))

(defglextfun ("glTexCoord2fColor3fVertex3fSUN" tex-coord-2f-color-3f-vertex-3f-sun) :void
  (s float)
  (tee float)
  (r float)
  (g float)
  (b float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glTexCoord2fColor3fVertex3fvSUN" tex-coord-2f-color-3f-vertex-3fv-sun) :void
  (tc (:pointer float))
  (c (:pointer float))
  (v (:pointer float)))

(defglextfun ("glTexCoord2fNormal3fVertex3fSUN" tex-coord-2f-normal-3f-vertex-3f-sun) :void
  (s float)
  (tee float)
  (nx float)
  (ny float)
  (nz float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glTexCoord2fNormal3fVertex3fvSUN" tex-coord-2f-normal-3f-vertex-3fv-sun) :void
  (tc (:pointer float))
  (n (:pointer float))
  (v (:pointer float)))

(defglextfun ("glTexCoord2fColor4fNormal3fVertex3fSUN" tex-coord-2f-color-4f-normal-3f-vertex-3f-sun) :void
  (s float)
  (tee float)
  (r float)
  (g float)
  (b float)
  (a float)
  (nx float)
  (ny float)
  (nz float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glTexCoord2fColor4fNormal3fVertex3fvSUN" tex-coord-2f-color-4f-normal-3f-vertex-3fv-sun) :void
  (tc (:pointer float))
  (c (:pointer float))
  (n (:pointer float))
  (v (:pointer float)))

(defglextfun ("glTexCoord4fColor4fNormal3fVertex4fSUN" tex-coord-4f-color-4f-normal-3f-vertex-4f-sun) :void
  (s float)
  (tee float)
  (p float)
  (q float)
  (r float)
  (g float)
  (b float)
  (a float)
  (nx float)
  (ny float)
  (nz float)
  (x float)
  (y float)
  (z float)
  (w float))

(defglextfun ("glTexCoord4fColor4fNormal3fVertex4fvSUN" tex-coord-4f-color-4f-normal-3f-vertex-4fv-sun) :void
  (tc (:pointer float))
  (c (:pointer float))
  (n (:pointer float))
  (v (:pointer float)))

(defglextfun ("glReplacementCodeuiVertex3fSUN" replacement-code-ui-vertex-3f-sun) :void
  (rc uint)
  (x float)
  (y float)
  (z float))

(defglextfun ("glReplacementCodeuiVertex3fvSUN" replacement-code-ui-vertex-3fv-sun) :void
  (rc (:pointer uint))
  (v (:pointer float)))

(defglextfun ("glReplacementCodeuiColor4ubVertex3fSUN" replacement-code-ui-color-4ub-vertex-3f-sun) :void
  (rc uint)
  (r ubyte)
  (g ubyte)
  (b ubyte)
  (a ubyte)
  (x float)
  (y float)
  (z float))

(defglextfun ("glReplacementCodeuiColor4ubVertex3fvSUN" replacement-code-ui-color-4ub-vertex-3fv-sun) :void
  (rc (:pointer uint))
  (c (:pointer ubyte))
  (v (:pointer float)))

(defglextfun ("glReplacementCodeuiColor3fVertex3fSUN" replacement-code-ui-color-3f-vertex-3f-sun) :void
  (rc uint)
  (r float)
  (g float)
  (b float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glReplacementCodeuiColor3fVertex3fvSUN" replacement-code-ui-color-3f-vertex-3fv-sun) :void
  (rc (:pointer uint))
  (c (:pointer float))
  (v (:pointer float)))

(defglextfun ("glReplacementCodeuiNormal3fVertex3fSUN" replacement-code-ui-normal-3f-vertex-3f-sun) :void
  (rc uint)
  (nx float)
  (ny float)
  (nz float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glReplacementCodeuiNormal3fVertex3fvSUN" replacement-code-ui-normal-3f-vertex-3fv-sun) :void
  (rc (:pointer uint))
  (n (:pointer float))
  (v (:pointer float)))

(defglextfun ("glReplacementCodeuiColor4fNormal3fVertex3fSUN" replacement-code-ui-color-4f-normal-3f-vertex-3f-sun) :void
  (rc uint)
  (r float)
  (g float)
  (b float)
  (a float)
  (nx float)
  (ny float)
  (nz float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glReplacementCodeuiColor4fNormal3fVertex3fvSUN" replacement-code-ui-color-4f-normal-3f-vertex-3fv-sun) :void
  (rc (:pointer uint))
  (c (:pointer float))
  (n (:pointer float))
  (v (:pointer float)))

(defglextfun ("glReplacementCodeuiTexCoord2fVertex3fSUN" replacement-code-ui-tex-coord-2f-vertex-3f-sun) :void
  (rc uint)
  (s float)
  (tee float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glReplacementCodeuiTexCoord2fVertex3fvSUN" replacement-code-ui-tex-coord-2f-vertex-3fv-sun) :void
  (rc (:pointer uint))
  (tc (:pointer float))
  (v (:pointer float)))

(defglextfun ("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN" replacement-code-ui-tex-coord-2f-normal-3f-vertex-3f-sun) :void
  (rc uint)
  (s float)
  (tee float)
  (nx float)
  (ny float)
  (nz float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN" replacement-code-ui-tex-coord-2f-normal-3f-vertex-3fv-sun) :void
  (rc (:pointer uint))
  (tc (:pointer float))
  (n (:pointer float))
  (v (:pointer float)))

(defglextfun ("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN" replacement-code-ui-tex-coord-2f-color-4f-normal-3f-vertex-3f-sun) :void
  (rc uint)
  (s float)
  (tee float)
  (r float)
  (g float)
  (b float)
  (a float)
  (nx float)
  (ny float)
  (nz float)
  (x float)
  (y float)
  (z float))

(defglextfun ("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN" replacement-code-ui-tex-coord-2f-color-4f-normal-3f-vertex-3fv-sun) :void
  (rc (:pointer uint))
  (tc (:pointer float))
  (c (:pointer float))
  (n (:pointer float))
  (v (:pointer float)))


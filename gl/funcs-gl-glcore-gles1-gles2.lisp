;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2019 The Khronos Group Inc.
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2019-11-22T00:14:44Z
;;; from gl.xml @ git sha aa969b89f25a3c437ac2c394417aafba38e7db2f, 2019-11-21T23:33:47Z

(defglfun ("glGetPointerv" get-pointer-v) :void
  (pname get-pointerv-pname)
  (params (:pointer (:pointer :void))))

(defglextfun ("glDebugMessageControl" debug-message-control) :void
  (source debug-source)
  (type debug-type)
  (severity debug-severity)
  (count sizei)
  (ids (:pointer uint))
  (enabled boolean))

(defglextfun ("glDebugMessageInsert" debug-message-insert) :void
  (source debug-source)
  (type debug-type)
  (id uint)
  (severity debug-severity)
  (length sizei)
  (buf (:pointer char)))

(defglextfun ("glDebugMessageCallback" debug-message-callback) :void
  (callback debugproc)
  (userParam (:pointer :void)))

(defglextfun ("glGetDebugMessageLog" get-debug-message-log) uint
  (count uint)
  (bufSize sizei)
  (sources (:pointer enum))
  (types (:pointer enum))
  (ids (:pointer uint))
  (severities (:pointer enum))
  (lengths (:pointer sizei))
  (messageLog (:pointer char)))

(defglextfun ("glPushDebugGroup" push-debug-group) :void
  (source debug-source)
  (id uint)
  (length sizei)
  (message (:pointer char)))

(defglextfun ("glPopDebugGroup" pop-debug-group) :void)

(defglextfun ("glObjectLabel" object-label) :void
  (identifier object-identifier)
  (name uint)
  (length sizei)
  (label (:pointer char)))

(defglextfun ("glGetObjectLabel" get-object-label) :void
  (identifier object-identifier)
  (name uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (label (:pointer char)))

(defglextfun ("glObjectPtrLabel" object-ptr-label) :void
  (ptr (:pointer :void))
  (length sizei)
  (label (:pointer char)))

(defglextfun ("glGetObjectPtrLabel" get-object-ptr-label) :void
  (ptr (:pointer :void))
  (bufSize sizei)
  (length (:pointer sizei))
  (label (:pointer char)))

(defglextfun ("glInsertEventMarkerEXT" insert-event-marker-ext) :void
  (length sizei)
  (marker (:pointer char)))

(defglextfun ("glPushGroupMarkerEXT" push-group-marker-ext) :void
  (length sizei)
  (marker (:pointer char)))

(defglextfun ("glPopGroupMarkerEXT" pop-group-marker-ext) :void)

(defglextfun ("glTextureStorage1DEXT" texture-storage-1d-ext) :void
  (texture uint)
  (target enum)
  (levels sizei)
  (internalformat internal-format)
  (width sizei))

(defglextfun ("glTextureStorage2DEXT" texture-storage-2d-ext) :void
  (texture uint)
  (target enum)
  (levels sizei)
  (internalformat internal-format)
  (width sizei)
  (height sizei))

(defglextfun ("glTextureStorage3DEXT" texture-storage-3d-ext) :void
  (texture uint)
  (target enum)
  (levels sizei)
  (internalformat internal-format)
  (width sizei)
  (height sizei)
  (depth sizei))

(defglextfun ("glDebugMessageControlKHR" debug-message-control-khr) :void
  (source debug-source)
  (type debug-type)
  (severity debug-severity)
  (count sizei)
  (ids (:pointer uint))
  (enabled boolean))

(defglextfun ("glDebugMessageInsertKHR" debug-message-insert-khr) :void
  (source debug-source)
  (type debug-type)
  (id uint)
  (severity debug-severity)
  (length sizei)
  (buf (:pointer char)))

(defglextfun ("glDebugMessageCallbackKHR" debug-message-callback-khr) :void
  (callback debugprockhr)
  (userParam (:pointer :void)))

(defglextfun ("glGetDebugMessageLogKHR" get-debug-message-log-khr) uint
  (count uint)
  (bufSize sizei)
  (sources (:pointer enum))
  (types (:pointer enum))
  (ids (:pointer uint))
  (severities (:pointer enum))
  (lengths (:pointer sizei))
  (messageLog (:pointer char)))

(defglextfun ("glPushDebugGroupKHR" push-debug-group-khr) :void
  (source debug-source)
  (id uint)
  (length sizei)
  (message (:pointer char)))

(defglextfun ("glPopDebugGroupKHR" pop-debug-group-khr) :void)

(defglextfun ("glObjectLabelKHR" object-label-khr) :void
  (identifier object-identifier)
  (name uint)
  (length sizei)
  (label (:pointer char)))

(defglextfun ("glGetObjectLabelKHR" get-object-label-khr) :void
  (identifier enum)
  (name uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (label (:pointer char)))

(defglextfun ("glObjectPtrLabelKHR" object-ptr-label-khr) :void
  (ptr (:pointer :void))
  (length sizei)
  (label (:pointer char)))

(defglextfun ("glGetObjectPtrLabelKHR" get-object-ptr-label-khr) :void
  (ptr (:pointer :void))
  (bufSize sizei)
  (length (:pointer sizei))
  (label (:pointer char)))

(defglextfun ("glGetPointervKHR" get-pointer-v-khr) :void
  (pname enum)
  (params (:pointer (:pointer :void))))


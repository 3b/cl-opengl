;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2014 The Khronos Group Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a
;;; copy of this software and/or associated documentation files (the
;;; "Materials"), to deal in the Materials without restriction, including
;;; without limitation the rights to use, copy, modify, merge, publish,
;;; distribute, sublicense, and/or sell copies of the Materials, and to
;;; permit persons to whom the Materials are furnished to do so, subject to
;;; the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included
;;; in all copies or substantial portions of the Materials.
;;;
;;; THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;;; MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2014-09-28T21:05:19Z
;;; from gl.xml @ svn rev 28221, 2014-09-19T03:11:05.177262Z

(defglfun ("glPointSize" point-size) :void
  (size float))

(defglfun ("glLogicOp" logic-op) :void
  (opcode enum))

(defglfun ("glColor4f" color-4f) :void
  (red float)
  (green float)
  (blue float)
  (alpha float))

(defglfun ("glColor4ub" color-4ub) :void
  (red ubyte)
  (green ubyte)
  (blue ubyte)
  (alpha ubyte))

(defglfun ("glNormal3f" normal-3f) :void
  (nx float)
  (ny float)
  (nz float))

(defglfun ("glFogf" fog-f) :void
  (pname enum)
  (param float))

(defglfun ("glFogfv" fog-fv) :void
  (pname enum)
  (params (:pointer float)))

(defglfun ("glLightf" light-f) :void
  (light enum)
  (pname enum)
  (param float))

(defglfun ("glLightfv" light-fv) :void
  (light enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glLightModelf" light-model-f) :void
  (pname enum)
  (param float))

(defglfun ("glLightModelfv" light-model-fv) :void
  (pname enum)
  (params (:pointer float)))

(defglfun ("glMaterialf" material-f) :void
  (face enum)
  (pname enum)
  (param float))

(defglfun ("glMaterialfv" material-fv) :void
  (face enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glShadeModel" shade-model) :void
  (mode enum))

(defglfun ("glTexEnvf" tex-env-f) :void
  (target enum)
  (pname enum)
  (param float))

(defglfun ("glTexEnvfv" tex-env-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glTexEnvi" tex-env-i) :void
  (target enum)
  (pname enum)
  (param int))

(defglfun ("glTexEnviv" tex-env-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glAlphaFunc" alpha-func) :void
  (func enum)
  (ref float))

(defglfun ("glGetLightfv" get-light-fv) :void
  (light enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glGetMaterialfv" get-material-fv) :void
  (face enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glGetTexEnvfv" get-tex-env-fv) :void
  (target enum)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glGetTexEnviv" get-tex-env-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglfun ("glLoadIdentity" load-identity) :void)

(defglfun ("glLoadMatrixf" load-matrix-f) :void
  (m (:pointer float)))

(defglfun ("glMatrixMode" matrix-mode) :void
  (mode enum))

(defglfun ("glMultMatrixf" mult-matrix-f) :void
  (m (:pointer float)))

(defglfun ("glPopMatrix" pop-matrix) :void)

(defglfun ("glPushMatrix" push-matrix) :void)

(defglfun ("glRotatef" rotate-f) :void
  (angle float)
  (x float)
  (y float)
  (z float))

(defglfun ("glScalef" scale-f) :void
  (x float)
  (y float)
  (z float))

(defglfun ("glTranslatef" translate-f) :void
  (x float)
  (y float)
  (z float))

(defglfun ("glColorPointer" color-pointer) :void
  (size int)
  (type enum)
  (stride sizei)
  (pointer offset-or-pointer))

(defglfun ("glDisableClientState" disable-client-state) :void
  (array enum))

(defglfun ("glEnableClientState" enable-client-state) :void
  (array enum))

(defglfun ("glNormalPointer" normal-pointer) :void
  (type enum)
  (stride sizei)
  (pointer offset-or-pointer))

(defglfun ("glTexCoordPointer" tex-coord-pointer) :void
  (size int)
  (type enum)
  (stride sizei)
  (pointer offset-or-pointer))

(defglfun ("glVertexPointer" vertex-pointer) :void
  (size int)
  (type enum)
  (stride sizei)
  (pointer offset-or-pointer))

(defglextfun ("glClientActiveTexture" client-active-texture) :void
  (texture enum))

(defglextfun ("glMultiTexCoord4f" multi-tex-coord-4f) :void
  (target enum)
  (s float)
  (tee float)
  (r float)
  (q float))

(defglextfun ("glPointParameterf" point-parameter-f) :void
  (pname enum)
  (param float))

(defglextfun ("glPointParameterfv" point-parameter-fv) :void
  (pname enum)
  (params (:pointer float)))

(defglextfun ("glMultiTexCoord1bOES" multi-tex-coord-1b-oes) :void
  (texture enum)
  (s byte))

(defglextfun ("glMultiTexCoord1bvOES" multi-tex-coord-1bv-oes) :void
  (texture enum)
  (coords (:pointer byte)))

(defglextfun ("glMultiTexCoord2bOES" multi-tex-coord-2b-oes) :void
  (texture enum)
  (s byte)
  (tee byte))

(defglextfun ("glMultiTexCoord2bvOES" multi-tex-coord-2bv-oes) :void
  (texture enum)
  (coords (:pointer byte)))

(defglextfun ("glMultiTexCoord3bOES" multi-tex-coord-3b-oes) :void
  (texture enum)
  (s byte)
  (tee byte)
  (r byte))

(defglextfun ("glMultiTexCoord3bvOES" multi-tex-coord-3bv-oes) :void
  (texture enum)
  (coords (:pointer byte)))

(defglextfun ("glMultiTexCoord4bOES" multi-tex-coord-4b-oes) :void
  (texture enum)
  (s byte)
  (tee byte)
  (r byte)
  (q byte))

(defglextfun ("glMultiTexCoord4bvOES" multi-tex-coord-4bv-oes) :void
  (texture enum)
  (coords (:pointer byte)))

(defglextfun ("glTexCoord1bOES" tex-coord-1b-oes) :void
  (s byte))

(defglextfun ("glTexCoord1bvOES" tex-coord-1bv-oes) :void
  (coords (:pointer byte)))

(defglextfun ("glTexCoord2bOES" tex-coord-2b-oes) :void
  (s byte)
  (tee byte))

(defglextfun ("glTexCoord2bvOES" tex-coord-2bv-oes) :void
  (coords (:pointer byte)))

(defglextfun ("glTexCoord3bOES" tex-coord-3b-oes) :void
  (s byte)
  (tee byte)
  (r byte))

(defglextfun ("glTexCoord3bvOES" tex-coord-3bv-oes) :void
  (coords (:pointer byte)))

(defglextfun ("glTexCoord4bOES" tex-coord-4b-oes) :void
  (s byte)
  (tee byte)
  (r byte)
  (q byte))

(defglextfun ("glTexCoord4bvOES" tex-coord-4bv-oes) :void
  (coords (:pointer byte)))

(defglextfun ("glVertex2bOES" vertex-2b-oes) :void
  (x byte)
  (y byte))

(defglextfun ("glVertex2bvOES" vertex-2bv-oes) :void
  (coords (:pointer byte)))

(defglextfun ("glVertex3bOES" vertex-3b-oes) :void
  (x byte)
  (y byte)
  (z byte))

(defglextfun ("glVertex3bvOES" vertex-3bv-oes) :void
  (coords (:pointer byte)))

(defglextfun ("glVertex4bOES" vertex-4b-oes) :void
  (x byte)
  (y byte)
  (z byte)
  (w byte))

(defglextfun ("glVertex4bvOES" vertex-4bv-oes) :void
  (coords (:pointer byte)))

(defglextfun ("glAlphaFuncxOES" alpha-func-x-oes) :void
  (func enum)
  (ref fixed))

(defglextfun ("glClearColorxOES" clear-color-x-oes) :void
  (red fixed)
  (green fixed)
  (blue fixed)
  (alpha fixed))

(defglextfun ("glClearDepthxOES" clear-depth-x-oes) :void
  (depth fixed))

(defglextfun ("glClipPlanexOES" clip-plane-x-oes) :void
  (plane enum)
  (equation (:pointer fixed)))

(defglextfun ("glColor4xOES" color-4x-oes) :void
  (red fixed)
  (green fixed)
  (blue fixed)
  (alpha fixed))

(defglextfun ("glDepthRangexOES" depth-range-x-oes) :void
  (n fixed)
  (f fixed))

(defglextfun ("glFogxOES" fog-x-oes) :void
  (pname enum)
  (param fixed))

(defglextfun ("glFogxvOES" fog-xv-oes) :void
  (pname enum)
  (param (:pointer fixed)))

(defglextfun ("glFrustumxOES" frustum-x-oes) :void
  (l fixed)
  (r fixed)
  (b fixed)
  (tee fixed)
  (n fixed)
  (f fixed))

(defglextfun ("glGetClipPlanexOES" get-clip-plane-x-oes) :void
  (plane enum)
  (equation (:pointer fixed)))

(defglextfun ("glGetFixedvOES" get-fixed-v-oes) :void
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glGetTexEnvxvOES" get-tex-env-xv-oes) :void
  (target enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glGetTexParameterxvOES" get-tex-parameter-xv-oes) :void
  (target enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glLightModelxOES" light-model-x-oes) :void
  (pname enum)
  (param fixed))

(defglextfun ("glLightModelxvOES" light-model-xv-oes) :void
  (pname enum)
  (param (:pointer fixed)))

(defglextfun ("glLightxOES" light-x-oes) :void
  (light enum)
  (pname enum)
  (param fixed))

(defglextfun ("glLightxvOES" light-xv-oes) :void
  (light enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glLineWidthxOES" line-width-x-oes) :void
  (width fixed))

(defglextfun ("glLoadMatrixxOES" load-matrix-x-oes) :void
  (m (:pointer fixed)))

(defglextfun ("glMaterialxOES" material-x-oes) :void
  (face enum)
  (pname enum)
  (param fixed))

(defglextfun ("glMaterialxvOES" material-xv-oes) :void
  (face enum)
  (pname enum)
  (param (:pointer fixed)))

(defglextfun ("glMultMatrixxOES" mult-matrix-x-oes) :void
  (m (:pointer fixed)))

(defglextfun ("glMultiTexCoord4xOES" multi-tex-coord-4x-oes) :void
  (texture enum)
  (s fixed)
  (tee fixed)
  (r fixed)
  (q fixed))

(defglextfun ("glNormal3xOES" normal-3x-oes) :void
  (nx fixed)
  (ny fixed)
  (nz fixed))

(defglextfun ("glOrthoxOES" ortho-x-oes) :void
  (l fixed)
  (r fixed)
  (b fixed)
  (tee fixed)
  (n fixed)
  (f fixed))

(defglextfun ("glPointParameterxvOES" point-parameter-xv-oes) :void
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glPointSizexOES" point-size-x-oes) :void
  (size fixed))

(defglextfun ("glPolygonOffsetxOES" polygon-offset-x-oes) :void
  (factor fixed)
  (units fixed))

(defglextfun ("glRotatexOES" rotate-x-oes) :void
  (angle fixed)
  (x fixed)
  (y fixed)
  (z fixed))

(defglextfun ("glSampleCoverageOES" sample-coverage-oes) :void
  (value fixed)
  (invert boolean))

(defglextfun ("glScalexOES" scale-x-oes) :void
  (x fixed)
  (y fixed)
  (z fixed))

(defglextfun ("glTexEnvxOES" tex-env-x-oes) :void
  (target enum)
  (pname enum)
  (param fixed))

(defglextfun ("glTexEnvxvOES" tex-env-xv-oes) :void
  (target enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glTexParameterxOES" tex-parameter-x-oes) :void
  (target enum)
  (pname enum)
  (param fixed))

(defglextfun ("glTexParameterxvOES" tex-parameter-xv-oes) :void
  (target enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glTranslatexOES" translate-x-oes) :void
  (x fixed)
  (y fixed)
  (z fixed))

(defglextfun ("glGetLightxvOES" get-light-xv-oes) :void
  (light enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glGetMaterialxvOES" get-material-xv-oes) :void
  (face enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glPointParameterxOES" point-parameter-x-oes) :void
  (pname enum)
  (param fixed))

(defglextfun ("glSampleCoveragexOES" sample-coverage-x-oes) :void
  (value clampx)
  (invert boolean))

(defglextfun ("glAccumxOES" accum-x-oes) :void
  (op enum)
  (value fixed))

(defglextfun ("glBitmapxOES" bitmap-x-oes) :void
  (width sizei)
  (height sizei)
  (xorig fixed)
  (yorig fixed)
  (xmove fixed)
  (ymove fixed)
  (bitmap (:pointer ubyte)))

(defglextfun ("glBlendColorxOES" blend-color-x-oes) :void
  (red fixed)
  (green fixed)
  (blue fixed)
  (alpha fixed))

(defglextfun ("glClearAccumxOES" clear-accum-x-oes) :void
  (red fixed)
  (green fixed)
  (blue fixed)
  (alpha fixed))

(defglextfun ("glColor3xOES" color-3x-oes) :void
  (red fixed)
  (green fixed)
  (blue fixed))

(defglextfun ("glColor3xvOES" color-3xv-oes) :void
  (components (:pointer fixed)))

(defglextfun ("glColor4xvOES" color-4xv-oes) :void
  (components (:pointer fixed)))

(defglextfun ("glConvolutionParameterxOES" convolution-parameter-x-oes) :void
  (target enum)
  (pname enum)
  (param fixed))

(defglextfun ("glConvolutionParameterxvOES" convolution-parameter-xv-oes) :void
  (target enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glEvalCoord1xOES" eval-coord-1x-oes) :void
  (u fixed))

(defglextfun ("glEvalCoord1xvOES" eval-coord-1xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glEvalCoord2xOES" eval-coord-2x-oes) :void
  (u fixed)
  (v fixed))

(defglextfun ("glEvalCoord2xvOES" eval-coord-2xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glFeedbackBufferxOES" feedback-buffer-x-oes) :void
  (n sizei)
  (type enum)
  (buffer (:pointer fixed)))

(defglextfun ("glGetConvolutionParameterxvOES" get-convolution-parameter-xv-oes) :void
  (target enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glGetHistogramParameterxvOES" get-histogram-parameter-xv-oes) :void
  (target enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glGetLightxOES" get-light-x-oes) :void
  (light enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glGetMapxvOES" get-map-xv-oes) :void
  (target enum)
  (query enum)
  (v (:pointer fixed)))

(defglextfun ("glGetMaterialxOES" get-material-x-oes) :void
  (face enum)
  (pname enum)
  (param fixed))

(defglextfun ("glGetPixelMapxv" get-pixel-map-xv) :void
  (map enum)
  (size int)
  (values (:pointer fixed)))

(defglextfun ("glGetTexGenxvOES" get-tex-gen-xv-oes) :void
  (coord enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glGetTexLevelParameterxvOES" get-tex-level-parameter-xv-oes) :void
  (target enum)
  (level int)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glIndexxOES" index-x-oes) :void
  (component fixed))

(defglextfun ("glIndexxvOES" index-xv-oes) :void
  (component (:pointer fixed)))

(defglextfun ("glLoadTransposeMatrixxOES" load-transpose-matrix-x-oes) :void
  (m (:pointer fixed)))

(defglextfun ("glMap1xOES" map-1x-oes) :void
  (target enum)
  (u1 fixed)
  (u2 fixed)
  (stride int)
  (order int)
  (points fixed))

(defglextfun ("glMap2xOES" map-2x-oes) :void
  (target enum)
  (u1 fixed)
  (u2 fixed)
  (ustride int)
  (uorder int)
  (v1 fixed)
  (v2 fixed)
  (vstride int)
  (vorder int)
  (points fixed))

(defglextfun ("glMapGrid1xOES" map-grid-1x-oes) :void
  (n int)
  (u1 fixed)
  (u2 fixed))

(defglextfun ("glMapGrid2xOES" map-grid-2x-oes) :void
  (n int)
  (u1 fixed)
  (u2 fixed)
  (v1 fixed)
  (v2 fixed))

(defglextfun ("glMultTransposeMatrixxOES" mult-transpose-matrix-x-oes) :void
  (m (:pointer fixed)))

(defglextfun ("glMultiTexCoord1xOES" multi-tex-coord-1x-oes) :void
  (texture enum)
  (s fixed))

(defglextfun ("glMultiTexCoord1xvOES" multi-tex-coord-1xv-oes) :void
  (texture enum)
  (coords (:pointer fixed)))

(defglextfun ("glMultiTexCoord2xOES" multi-tex-coord-2x-oes) :void
  (texture enum)
  (s fixed)
  (tee fixed))

(defglextfun ("glMultiTexCoord2xvOES" multi-tex-coord-2xv-oes) :void
  (texture enum)
  (coords (:pointer fixed)))

(defglextfun ("glMultiTexCoord3xOES" multi-tex-coord-3x-oes) :void
  (texture enum)
  (s fixed)
  (tee fixed)
  (r fixed))

(defglextfun ("glMultiTexCoord3xvOES" multi-tex-coord-3xv-oes) :void
  (texture enum)
  (coords (:pointer fixed)))

(defglextfun ("glMultiTexCoord4xvOES" multi-tex-coord-4xv-oes) :void
  (texture enum)
  (coords (:pointer fixed)))

(defglextfun ("glNormal3xvOES" normal-3xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glPassThroughxOES" pass-through-x-oes) :void
  (token fixed))

(defglextfun ("glPixelMapx" pixel-map-x) :void
  (map enum)
  (size int)
  (values (:pointer fixed)))

(defglextfun ("glPixelStorex" pixel-store-x) :void
  (pname enum)
  (param fixed))

(defglextfun ("glPixelTransferxOES" pixel-transfer-x-oes) :void
  (pname enum)
  (param fixed))

(defglextfun ("glPixelZoomxOES" pixel-zoom-x-oes) :void
  (xfactor fixed)
  (yfactor fixed))

(defglextfun ("glPrioritizeTexturesxOES" prioritize-textures-x-oes) :void
  (n sizei)
  (textures (:pointer uint))
  (priorities (:pointer fixed)))

(defglextfun ("glRasterPos2xOES" raster-pos-2x-oes) :void
  (x fixed)
  (y fixed))

(defglextfun ("glRasterPos2xvOES" raster-pos-2xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glRasterPos3xOES" raster-pos-3x-oes) :void
  (x fixed)
  (y fixed)
  (z fixed))

(defglextfun ("glRasterPos3xvOES" raster-pos-3xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glRasterPos4xOES" raster-pos-4x-oes) :void
  (x fixed)
  (y fixed)
  (z fixed)
  (w fixed))

(defglextfun ("glRasterPos4xvOES" raster-pos-4xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glRectxOES" rect-x-oes) :void
  (x1 fixed)
  (y1 fixed)
  (x2 fixed)
  (y2 fixed))

(defglextfun ("glRectxvOES" rect-xv-oes) :void
  (v1 (:pointer fixed))
  (v2 (:pointer fixed)))

(defglextfun ("glTexCoord1xOES" tex-coord-1x-oes) :void
  (s fixed))

(defglextfun ("glTexCoord1xvOES" tex-coord-1xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glTexCoord2xOES" tex-coord-2x-oes) :void
  (s fixed)
  (tee fixed))

(defglextfun ("glTexCoord2xvOES" tex-coord-2xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glTexCoord3xOES" tex-coord-3x-oes) :void
  (s fixed)
  (tee fixed)
  (r fixed))

(defglextfun ("glTexCoord3xvOES" tex-coord-3xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glTexCoord4xOES" tex-coord-4x-oes) :void
  (s fixed)
  (tee fixed)
  (r fixed)
  (q fixed))

(defglextfun ("glTexCoord4xvOES" tex-coord-4xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glTexGenxOES" tex-gen-x-oes) :void
  (coord enum)
  (pname enum)
  (param fixed))

(defglextfun ("glTexGenxvOES" tex-gen-xv-oes) :void
  (coord enum)
  (pname enum)
  (params (:pointer fixed)))

(defglextfun ("glVertex2xOES" vertex-2x-oes) :void
  (x fixed))

(defglextfun ("glVertex2xvOES" vertex-2xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glVertex3xOES" vertex-3x-oes) :void
  (x fixed)
  (y fixed))

(defglextfun ("glVertex3xvOES" vertex-3xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glVertex4xOES" vertex-4x-oes) :void
  (x fixed)
  (y fixed)
  (z fixed))

(defglextfun ("glVertex4xvOES" vertex-4xv-oes) :void
  (coords (:pointer fixed)))

(defglextfun ("glQueryMatrixxOES" query-matrix-x-oes) bitfield
  (mantissa (:pointer fixed))
  (exponent (:pointer int)))

(defglextfun ("glClearDepthfOES" clear-depth-f-oes) :void
  (depth clampf))

(defglextfun ("glClipPlanefOES" clip-plane-f-oes) :void
  (plane enum)
  (equation (:pointer float)))

(defglextfun ("glDepthRangefOES" depth-range-f-oes) :void
  (n clampf)
  (f clampf))

(defglextfun ("glFrustumfOES" frustum-f-oes) :void
  (l float)
  (r float)
  (b float)
  (tee float)
  (n float)
  (f float))

(defglextfun ("glGetClipPlanefOES" get-clip-plane-f-oes) :void
  (plane enum)
  (equation (:pointer float)))

(defglextfun ("glOrthofOES" ortho-f-oes) :void
  (l float)
  (r float)
  (b float)
  (tee float)
  (n float)
  (f float))


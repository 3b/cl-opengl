;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2017 The Khronos Group Inc.
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;     http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2017-10-04T20:14:06Z
;;; from gl.xml @ git sha 2c8fa02871abd4102bd03d09d42645cce20c468f, 2017-10-03T15:09:09Z

(defglfun ("glReadBuffer" read-buffer) :void
  (src enum))

(defglfun ("glGetTexLevelParameterfv" get-tex-level-parameter-fv) :void
  (target enum)
  (level int)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glGetTexLevelParameteriv" get-tex-level-parameter-iv) :void
  (target enum)
  (level int)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTexImage3D" tex-image-3d) :void
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglextfun ("glTexSubImage3D" tex-sub-image-3d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglextfun ("glCopyTexSubImage3D" copy-tex-sub-image-3d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glCompressedTexImage3D" compressed-tex-image-3d) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (imageSize sizei)
  (data offset-or-pointer))

(defglextfun ("glCompressedTexSubImage3D" compressed-tex-sub-image-3d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (imageSize sizei)
  (data offset-or-pointer))

(defglextfun ("glGenQueries" gen-queries) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glDeleteQueries" delete-queries) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glIsQuery" is-query) boolean
  (id uint))

(defglextfun ("glBeginQuery" begin-query) :void
  (target enum)
  (id uint))

(defglextfun ("glEndQuery" end-query) :void
  (target enum))

(defglextfun ("glGetQueryiv" get-query-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetQueryObjectuiv" get-query-object-uiv) :void
  (id uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glUnmapBuffer" unmap-buffer) boolean
  (target enum))

(defglextfun ("glGetBufferPointerv" get-buffer-pointer-v) :void
  (target enum)
  (pname enum)
  (params (:pointer (:pointer :void))))

(defglextfun ("glDrawBuffers" draw-buffers) :void
  (n sizei)
  (bufs (:pointer enum)))

(defglextfun ("glAttachShader" attach-shader) :void
  (program uint)
  (shader uint))

(defglextfun ("glBindAttribLocation" bind-attrib-location) :void
  (program uint)
  (index uint)
  (name (:pointer char)))

(defglextfun ("glCompileShader" compile-shader) :void
  (shader uint))

(defglextfun ("glCreateShader" create-shader) uint
  (type shader-type))

(defglextfun ("glDeleteProgram" delete-program) :void
  (program uint))

(defglextfun ("glDeleteShader" delete-shader) :void
  (shader uint))

(defglextfun ("glDetachShader" detach-shader) :void
  (program uint)
  (shader uint))

(defglextfun ("glGetActiveAttrib" get-active-attrib) :void
  (program uint)
  (index uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (size (:pointer int))
  (type (:pointer enum))
  (name (:pointer char)))

(defglextfun ("glGetActiveUniform" get-active-uniform) :void
  (program uint)
  (index uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (size (:pointer int))
  (type (:pointer enum))
  (name (:pointer char)))

(defglextfun ("glGetAttachedShaders" get-attached-shaders) :void
  (program uint)
  (maxCount sizei)
  (count (:pointer sizei))
  (shaders (:pointer uint)))

(defglextfun ("glGetProgramInfoLog" get-program-info-log) :void
  (program uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (infoLog (:pointer char)))

(defglextfun ("glGetShaderiv" get-shader-iv) :void
  (shader uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetShaderInfoLog" get-shader-info-log) :void
  (shader uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (infoLog (:pointer char)))

(defglextfun ("glGetShaderSource" get-shader-source) :void
  (shader uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (source (:pointer char)))

(defglextfun ("glGetUniformfv" get-uniform-fv) :void
  (program uint)
  (location int)
  (params (:pointer float)))

(defglextfun ("glGetUniformiv" get-uniform-iv) :void
  (program uint)
  (location int)
  (params (:pointer int)))

(defglextfun ("glIsProgram" is-program) boolean
  (program uint))

(defglextfun ("glIsShader" is-shader) boolean
  (shader uint))

(defglextfun ("glLinkProgram" link-program) :void
  (program uint))

(defglextfun ("glShaderSource" shader-source) :void
  (shader uint)
  (count sizei)
  (string (:pointer (:pointer char)))
  (length (:pointer int)))

(defglextfun ("glValidateProgram" validate-program) :void
  (program uint))

(defglextfun ("glUniformMatrix2x3fv" uniform-matrix-2x3-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix3x2fv" uniform-matrix-3x2-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix2x4fv" uniform-matrix-2x4-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix4x2fv" uniform-matrix-4x2-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix3x4fv" uniform-matrix-3x4-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix4x3fv" uniform-matrix-4x3-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glColorMaski" color-mask-i) :void
  (index uint)
  (r boolean)
  (g boolean)
  (b boolean)
  (a boolean))

(defglextfun ("glGetBooleani_v" get-boolean-i-v) :void
  (target enum)
  (index uint)
  (data (:pointer boolean)))

(defglextfun ("glEnablei" enable-i) :void
  (target enum)
  (index uint))

(defglextfun ("glDisablei" disable-i) :void
  (target enum)
  (index uint))

(defglextfun ("glIsEnabledi" is-enabled-i) boolean
  (target enum)
  (index uint))

(defglextfun ("glBeginTransformFeedback" begin-transform-feedback) :void
  (primitiveMode enum))

(defglextfun ("glEndTransformFeedback" end-transform-feedback) :void)

(defglextfun ("glTransformFeedbackVaryings" transform-feedback-varyings) :void
  (program uint)
  (count sizei)
  (varyings (:pointer (:pointer char)))
  (bufferMode enum))

(defglextfun ("glGetTransformFeedbackVarying" get-transform-feedback-varying) :void
  (program uint)
  (index uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (size (:pointer sizei))
  (type (:pointer enum))
  (name (:pointer char)))

(defglextfun ("glVertexAttribIPointer" vertex-attrib-ipointer) :void
  (index uint)
  (size int)
  (type enum)
  (stride sizei)
  (pointer offset-or-pointer))

(defglextfun ("glGetVertexAttribIiv" get-vertex-attrib-iiv) :void
  (index uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetVertexAttribIuiv" get-vertex-attrib-iuiv) :void
  (index uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glVertexAttribI4i" vertex-attrib-i4i) :void
  (index uint)
  (x int)
  (y int)
  (z int)
  (w int))

(defglextfun ("glVertexAttribI4ui" vertex-attrib-i4ui) :void
  (index uint)
  (x uint)
  (y uint)
  (z uint)
  (w uint))

(defglextfun ("glVertexAttribI4iv" vertex-attrib-i4iv) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttribI4uiv" vertex-attrib-i4uiv) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glGetUniformuiv" get-uniform-uiv) :void
  (program uint)
  (location int)
  (params (:pointer uint)))

(defglextfun ("glGetFragDataLocation" get-frag-data-location) int
  (program uint)
  (name (:pointer char)))

(defglextfun ("glUniform1ui" uniform-1ui) :void
  (location int)
  (v0 uint))

(defglextfun ("glUniform2ui" uniform-2ui) :void
  (location int)
  (v0 uint)
  (v1 uint))

(defglextfun ("glUniform3ui" uniform-3ui) :void
  (location int)
  (v0 uint)
  (v1 uint)
  (v2 uint))

(defglextfun ("glUniform4ui" uniform-4ui) :void
  (location int)
  (v0 uint)
  (v1 uint)
  (v2 uint)
  (v3 uint))

(defglextfun ("glUniform1uiv" uniform-1uiv) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glUniform2uiv" uniform-2uiv) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glUniform3uiv" uniform-3uiv) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glUniform4uiv" uniform-4uiv) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glTexParameterIiv" tex-parameter-iiv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTexParameterIuiv" tex-parameter-iuiv) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetTexParameterIiv" get-tex-parameter-iiv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetTexParameterIuiv" get-tex-parameter-iuiv) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glClearBufferiv" clear-buffer-iv) :void
  (buffer enum)
  (drawbuffer int)
  (value (:pointer int)))

(defglextfun ("glClearBufferuiv" clear-buffer-uiv) :void
  (buffer enum)
  (drawbuffer int)
  (value (:pointer uint)))

(defglextfun ("glClearBufferfv" clear-buffer-fv) :void
  (buffer enum)
  (drawbuffer int)
  (value (:pointer float)))

(defglextfun ("glClearBufferfi" clear-buffer-fi) :void
  (buffer enum)
  (drawbuffer int)
  (depth float)
  (stencil int))

(defglextfun ("glGetStringi" get-string-i) string
  (name enum)
  (index uint))

(defglextfun ("glDrawArraysInstanced" draw-arrays-instanced) :void
  (mode enum)
  (first int)
  (count sizei)
  (instancecount sizei))

(defglextfun ("glDrawElementsInstanced" draw-elements-instanced) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices offset-or-pointer)
  (instancecount sizei))

(defglextfun ("glTexBuffer" tex-buffer) :void
  (target enum)
  (internalformat enum)
  (buffer uint))

(defglextfun ("glGetInteger64i_v" get-integer-64-i-v) :void
  (target enum)
  (index uint)
  (data (:pointer int64)))

(defglextfun ("glGetBufferParameteri64v" get-buffer-parameter-i64v) :void
  (target enum)
  (pname enum)
  (params (:pointer int64)))

(defglextfun ("glFramebufferTexture" framebuffer-texture) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int))

(defglextfun ("glVertexAttribDivisor" vertex-attrib-divisor) :void
  (index uint)
  (divisor uint))

(defglextfun ("glMinSampleShading" min-sample-shading) :void
  (value float))

(defglextfun ("glBlendEquationi" blend-equation-i) :void
  (buf uint)
  (mode enum))

(defglextfun ("glBlendEquationSeparatei" blend-equation-separate-i) :void
  (buf uint)
  (modeRGB enum)
  (modeAlpha enum))

(defglextfun ("glBlendFunci" blend-func-i) :void
  (buf uint)
  (src enum)
  (dst enum))

(defglextfun ("glBlendFuncSeparatei" blend-func-separate-i) :void
  (buf uint)
  (srcRGB enum)
  (dstRGB enum)
  (srcAlpha enum)
  (dstAlpha enum))

(defglextfun ("glBindFragDataLocationEXT" bind-frag-data-location-ext) :void
  (program uint)
  (color uint)
  (name (:pointer char)))

(defglextfun ("glGetQueryObjecti64vEXT" get-query-object-i64v-ext) :void
  (id uint)
  (pname enum)
  (params (:pointer int64)))

(defglextfun ("glGetQueryObjectui64vEXT" get-query-object-ui64v-ext) :void
  (id uint)
  (pname enum)
  (params (:pointer uint64)))

(defglextfun ("glBufferStorageExternalEXT" buffer-storage-external-ext) :void
  (target enum)
  (offset intptr)
  (size sizeiptr)
  (clientBuffer egl-client-buffer-ext)
  (flags MapBufferUsageMask))

(defglextfun ("glNamedBufferStorageExternalEXT" named-buffer-storage-external-ext) :void
  (buffer uint)
  (offset intptr)
  (size sizeiptr)
  (clientBuffer egl-client-buffer-ext)
  (flags MapBufferUsageMask))

(defglextfun ("glFramebufferTextureEXT" framebuffer-texture-ext) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int))

(defglextfun ("glGetUnsignedBytevEXT" get-unsigned-byte-v-ext) :void
  (pname enum)
  (data (:pointer ubyte)))

(defglextfun ("glGetUnsignedBytei_vEXT" get-unsigned-byte-i-v-ext) :void
  (target enum)
  (index uint)
  (data (:pointer ubyte)))

(defglextfun ("glDeleteMemoryObjectsEXT" delete-memory-objects-ext) :void
  (n sizei)
  (memoryObjects (:pointer uint)))

(defglextfun ("glIsMemoryObjectEXT" is-memory-object-ext) boolean
  (memoryObject uint))

(defglextfun ("glCreateMemoryObjectsEXT" create-memory-objects-ext) :void
  (n sizei)
  (memoryObjects (:pointer uint)))

(defglextfun ("glMemoryObjectParameterivEXT" memory-object-parameter-iv-ext) :void
  (memoryObject uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetMemoryObjectParameterivEXT" get-memory-object-parameter-iv-ext) :void
  (memoryObject uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTexStorageMem2DEXT" tex-storage-mem-2d-ext) :void
  (target enum)
  (levels sizei)
  (internalFormat enum)
  (width sizei)
  (height sizei)
  (memory uint)
  (offset uint64))

(defglextfun ("glTexStorageMem2DMultisampleEXT" tex-storage-mem-2d-multisample-ext) :void
  (target enum)
  (samples sizei)
  (internalFormat enum)
  (width sizei)
  (height sizei)
  (fixedSampleLocations boolean)
  (memory uint)
  (offset uint64))

(defglextfun ("glTexStorageMem3DEXT" tex-storage-mem-3d-ext) :void
  (target enum)
  (levels sizei)
  (internalFormat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (memory uint)
  (offset uint64))

(defglextfun ("glTexStorageMem3DMultisampleEXT" tex-storage-mem-3d-multisample-ext) :void
  (target enum)
  (samples sizei)
  (internalFormat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedSampleLocations boolean)
  (memory uint)
  (offset uint64))

(defglextfun ("glBufferStorageMemEXT" buffer-storage-mem-ext) :void
  (target enum)
  (size sizeiptr)
  (memory uint)
  (offset uint64))

(defglextfun ("glTextureStorageMem2DEXT" texture-storage-mem-2d-ext) :void
  (texture uint)
  (levels sizei)
  (internalFormat enum)
  (width sizei)
  (height sizei)
  (memory uint)
  (offset uint64))

(defglextfun ("glTextureStorageMem2DMultisampleEXT" texture-storage-mem-2d-multisample-ext) :void
  (texture uint)
  (samples sizei)
  (internalFormat enum)
  (width sizei)
  (height sizei)
  (fixedSampleLocations boolean)
  (memory uint)
  (offset uint64))

(defglextfun ("glTextureStorageMem3DEXT" texture-storage-mem-3d-ext) :void
  (texture uint)
  (levels sizei)
  (internalFormat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (memory uint)
  (offset uint64))

(defglextfun ("glTextureStorageMem3DMultisampleEXT" texture-storage-mem-3d-multisample-ext) :void
  (texture uint)
  (samples sizei)
  (internalFormat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedSampleLocations boolean)
  (memory uint)
  (offset uint64))

(defglextfun ("glNamedBufferStorageMemEXT" named-buffer-storage-mem-ext) :void
  (buffer uint)
  (size sizeiptr)
  (memory uint)
  (offset uint64))

(defglextfun ("glTexStorageMem1DEXT" tex-storage-mem-1d-ext) :void
  (target enum)
  (levels sizei)
  (internalFormat enum)
  (width sizei)
  (memory uint)
  (offset uint64))

(defglextfun ("glTextureStorageMem1DEXT" texture-storage-mem-1d-ext) :void
  (texture uint)
  (levels sizei)
  (internalFormat enum)
  (width sizei)
  (memory uint)
  (offset uint64))

(defglextfun ("glImportMemoryFdEXT" import-memory-fd-ext) :void
  (memory uint)
  (size uint64)
  (handleType enum)
  (fd int))

(defglextfun ("glImportMemoryWin32HandleEXT" import-memory-win32-handle-ext) :void
  (memory uint)
  (size uint64)
  (handleType enum)
  (handle (:pointer :void)))

(defglextfun ("glImportMemoryWin32NameEXT" import-memory-win32-name-ext) :void
  (memory uint)
  (size uint64)
  (handleType enum)
  (name (:pointer :void)))

(defglextfun ("glGenSemaphoresEXT" gen-semaphores-ext) :void
  (n sizei)
  (semaphores (:pointer uint)))

(defglextfun ("glDeleteSemaphoresEXT" delete-semaphores-ext) :void
  (n sizei)
  (semaphores (:pointer uint)))

(defglextfun ("glIsSemaphoreEXT" is-semaphore-ext) boolean
  (semaphore uint))

(defglextfun ("glSemaphoreParameterui64vEXT" semaphore-parameter-ui64v-ext) :void
  (semaphore uint)
  (pname enum)
  (params (:pointer uint64)))

(defglextfun ("glGetSemaphoreParameterui64vEXT" get-semaphore-parameter-ui64v-ext) :void
  (semaphore uint)
  (pname enum)
  (params (:pointer uint64)))

(defglextfun ("glWaitSemaphoreEXT" wait-semaphore-ext) :void
  (semaphore uint)
  (numBufferBarriers uint)
  (buffers (:pointer uint))
  (numTextureBarriers uint)
  (textures (:pointer uint))
  (srcLayouts (:pointer enum)))

(defglextfun ("glSignalSemaphoreEXT" signal-semaphore-ext) :void
  (semaphore uint)
  (numBufferBarriers uint)
  (buffers (:pointer uint))
  (numTextureBarriers uint)
  (textures (:pointer uint))
  (dstLayouts (:pointer enum)))

(defglextfun ("glImportSemaphoreFdEXT" import-semaphore-fd-ext) :void
  (semaphore uint)
  (handleType enum)
  (fd int))

(defglextfun ("glImportSemaphoreWin32HandleEXT" import-semaphore-win32-handle-ext) :void
  (semaphore uint)
  (handleType enum)
  (handle (:pointer :void)))

(defglextfun ("glImportSemaphoreWin32NameEXT" import-semaphore-win32-name-ext) :void
  (semaphore uint)
  (handleType enum)
  (name (:pointer :void)))

(defglextfun ("glTexParameterIivEXT" tex-parameter-iiv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTexParameterIuivEXT" tex-parameter-iuiv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetTexParameterIivEXT" get-tex-parameter-iiv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetTexParameterIuivEXT" get-tex-parameter-iuiv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glTexBufferEXT" tex-buffer-ext) :void
  (target enum)
  (internalformat enum)
  (buffer uint))

(defglextfun ("glAcquireKeyedMutexWin32EXT" acquire-keyed-mutex-win32-ext) boolean
  (memory uint)
  (key uint64)
  (timeout uint))

(defglextfun ("glReleaseKeyedMutexWin32EXT" release-keyed-mutex-win32-ext) boolean
  (memory uint)
  (key uint64))


;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2016 The Khronos Group Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a
;;; copy of this software and/or associated documentation files (the
;;; "Materials"), to deal in the Materials without restriction, including
;;; without limitation the rights to use, copy, modify, merge, publish,
;;; distribute, sublicense, and/or sell copies of the Materials, and to
;;; permit persons to whom the Materials are furnished to do so, subject to
;;; the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included
;;; in all copies or substantial portions of the Materials.
;;;
;;; THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;;; MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2016-11-02T03:17:18Z
;;; from gl.xml @ svn rev 33260, 2016-10-27T10:38:44.798295Z

(defglfun ("glReadBuffer" read-buffer) :void
  (src enum))

(defglfun ("glGetTexLevelParameterfv" get-tex-level-parameter-fv) :void
  (target enum)
  (level int)
  (pname enum)
  (params (:pointer float)))

(defglfun ("glGetTexLevelParameteriv" get-tex-level-parameter-iv) :void
  (target enum)
  (level int)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTexImage3D" tex-image-3d) :void
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglextfun ("glTexSubImage3D" tex-sub-image-3d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglextfun ("glCopyTexSubImage3D" copy-tex-sub-image-3d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glCompressedTexImage3D" compressed-tex-image-3d) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (imageSize sizei)
  (data offset-or-pointer))

(defglextfun ("glCompressedTexSubImage3D" compressed-tex-sub-image-3d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (imageSize sizei)
  (data offset-or-pointer))

(defglextfun ("glGenQueries" gen-queries) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glDeleteQueries" delete-queries) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glIsQuery" is-query) boolean
  (id uint))

(defglextfun ("glBeginQuery" begin-query) :void
  (target enum)
  (id uint))

(defglextfun ("glEndQuery" end-query) :void
  (target enum))

(defglextfun ("glGetQueryiv" get-query-iv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetQueryObjectuiv" get-query-object-uiv) :void
  (id uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glUnmapBuffer" unmap-buffer) boolean
  (target enum))

(defglextfun ("glGetBufferPointerv" get-buffer-pointer-v) :void
  (target enum)
  (pname enum)
  (params (:pointer (:pointer :void))))

(defglextfun ("glDrawBuffers" draw-buffers) :void
  (n sizei)
  (bufs (:pointer enum)))

(defglextfun ("glAttachShader" attach-shader) :void
  (program uint)
  (shader uint))

(defglextfun ("glBindAttribLocation" bind-attrib-location) :void
  (program uint)
  (index uint)
  (name (:pointer char)))

(defglextfun ("glCompileShader" compile-shader) :void
  (shader uint))

(defglextfun ("glCreateShader" create-shader) uint
  (type enum))

(defglextfun ("glDeleteProgram" delete-program) :void
  (program uint))

(defglextfun ("glDeleteShader" delete-shader) :void
  (shader uint))

(defglextfun ("glDetachShader" detach-shader) :void
  (program uint)
  (shader uint))

(defglextfun ("glGetActiveAttrib" get-active-attrib) :void
  (program uint)
  (index uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (size (:pointer int))
  (type (:pointer enum))
  (name (:pointer char)))

(defglextfun ("glGetActiveUniform" get-active-uniform) :void
  (program uint)
  (index uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (size (:pointer int))
  (type (:pointer enum))
  (name (:pointer char)))

(defglextfun ("glGetAttachedShaders" get-attached-shaders) :void
  (program uint)
  (maxCount sizei)
  (count (:pointer sizei))
  (shaders (:pointer uint)))

(defglextfun ("glGetProgramInfoLog" get-program-info-log) :void
  (program uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (infoLog (:pointer char)))

(defglextfun ("glGetShaderiv" get-shader-iv) :void
  (shader uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetShaderInfoLog" get-shader-info-log) :void
  (shader uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (infoLog (:pointer char)))

(defglextfun ("glGetShaderSource" get-shader-source) :void
  (shader uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (source (:pointer char)))

(defglextfun ("glGetUniformfv" get-uniform-fv) :void
  (program uint)
  (location int)
  (params (:pointer float)))

(defglextfun ("glGetUniformiv" get-uniform-iv) :void
  (program uint)
  (location int)
  (params (:pointer int)))

(defglextfun ("glIsProgram" is-program) boolean
  (program uint))

(defglextfun ("glIsShader" is-shader) boolean
  (shader uint))

(defglextfun ("glLinkProgram" link-program) :void
  (program uint))

(defglextfun ("glShaderSource" shader-source) :void
  (shader uint)
  (count sizei)
  (string (:pointer (:pointer char)))
  (length (:pointer int)))

(defglextfun ("glValidateProgram" validate-program) :void
  (program uint))

(defglextfun ("glUniformMatrix2x3fv" uniform-matrix-2x3-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix3x2fv" uniform-matrix-3x2-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix2x4fv" uniform-matrix-2x4-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix4x2fv" uniform-matrix-4x2-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix3x4fv" uniform-matrix-3x4-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix4x3fv" uniform-matrix-4x3-fv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glColorMaski" color-mask-i) :void
  (index uint)
  (r boolean)
  (g boolean)
  (b boolean)
  (a boolean))

(defglextfun ("glGetBooleani_v" get-boolean-i-v) :void
  (target enum)
  (index uint)
  (data (:pointer boolean)))

(defglextfun ("glEnablei" enable-i) :void
  (target enum)
  (index uint))

(defglextfun ("glDisablei" disable-i) :void
  (target enum)
  (index uint))

(defglextfun ("glIsEnabledi" is-enabled-i) boolean
  (target enum)
  (index uint))

(defglextfun ("glBeginTransformFeedback" begin-transform-feedback) :void
  (primitiveMode enum))

(defglextfun ("glEndTransformFeedback" end-transform-feedback) :void)

(defglextfun ("glTransformFeedbackVaryings" transform-feedback-varyings) :void
  (program uint)
  (count sizei)
  (varyings (:pointer (:pointer char)))
  (bufferMode enum))

(defglextfun ("glGetTransformFeedbackVarying" get-transform-feedback-varying) :void
  (program uint)
  (index uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (size (:pointer sizei))
  (type (:pointer enum))
  (name (:pointer char)))

(defglextfun ("glVertexAttribIPointer" vertex-attrib-ipointer) :void
  (index uint)
  (size int)
  (type enum)
  (stride sizei)
  (pointer offset-or-pointer))

(defglextfun ("glGetVertexAttribIiv" get-vertex-attrib-iiv) :void
  (index uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetVertexAttribIuiv" get-vertex-attrib-iuiv) :void
  (index uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glVertexAttribI4i" vertex-attrib-i4i) :void
  (index uint)
  (x int)
  (y int)
  (z int)
  (w int))

(defglextfun ("glVertexAttribI4ui" vertex-attrib-i4ui) :void
  (index uint)
  (x uint)
  (y uint)
  (z uint)
  (w uint))

(defglextfun ("glVertexAttribI4iv" vertex-attrib-i4iv) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glVertexAttribI4uiv" vertex-attrib-i4uiv) :void
  (index uint)
  (v (:pointer uint)))

(defglextfun ("glGetUniformuiv" get-uniform-uiv) :void
  (program uint)
  (location int)
  (params (:pointer uint)))

(defglextfun ("glGetFragDataLocation" get-frag-data-location) int
  (program uint)
  (name (:pointer char)))

(defglextfun ("glUniform1ui" uniform-1ui) :void
  (location int)
  (v0 uint))

(defglextfun ("glUniform2ui" uniform-2ui) :void
  (location int)
  (v0 uint)
  (v1 uint))

(defglextfun ("glUniform3ui" uniform-3ui) :void
  (location int)
  (v0 uint)
  (v1 uint)
  (v2 uint))

(defglextfun ("glUniform4ui" uniform-4ui) :void
  (location int)
  (v0 uint)
  (v1 uint)
  (v2 uint)
  (v3 uint))

(defglextfun ("glUniform1uiv" uniform-1uiv) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glUniform2uiv" uniform-2uiv) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glUniform3uiv" uniform-3uiv) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glUniform4uiv" uniform-4uiv) :void
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glTexParameterIiv" tex-parameter-iiv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTexParameterIuiv" tex-parameter-iuiv) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetTexParameterIiv" get-tex-parameter-iiv) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetTexParameterIuiv" get-tex-parameter-iuiv) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glClearBufferiv" clear-buffer-iv) :void
  (buffer enum)
  (drawbuffer int)
  (value (:pointer int)))

(defglextfun ("glClearBufferuiv" clear-buffer-uiv) :void
  (buffer enum)
  (drawbuffer int)
  (value (:pointer uint)))

(defglextfun ("glClearBufferfv" clear-buffer-fv) :void
  (buffer enum)
  (drawbuffer int)
  (value (:pointer float)))

(defglextfun ("glClearBufferfi" clear-buffer-fi) :void
  (buffer enum)
  (drawbuffer int)
  (depth float)
  (stencil int))

(defglextfun ("glGetStringi" get-string-i) string
  (name enum)
  (index uint))

(defglextfun ("glDrawArraysInstanced" draw-arrays-instanced) :void
  (mode enum)
  (first int)
  (count sizei)
  (instancecount sizei))

(defglextfun ("glDrawElementsInstanced" draw-elements-instanced) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices offset-or-pointer)
  (instancecount sizei))

(defglextfun ("glTexBuffer" tex-buffer) :void
  (target enum)
  (internalformat enum)
  (buffer uint))

(defglextfun ("glGetInteger64i_v" get-integer-64-i-v) :void
  (target enum)
  (index uint)
  (data (:pointer int64)))

(defglextfun ("glGetBufferParameteri64v" get-buffer-parameter-i64v) :void
  (target enum)
  (pname enum)
  (params (:pointer int64)))

(defglextfun ("glFramebufferTexture" framebuffer-texture) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int))

(defglextfun ("glVertexAttribDivisor" vertex-attrib-divisor) :void
  (index uint)
  (divisor uint))

(defglextfun ("glMinSampleShading" min-sample-shading) :void
  (value float))

(defglextfun ("glBlendEquationi" blend-equation-i) :void
  (buf uint)
  (mode enum))

(defglextfun ("glBlendEquationSeparatei" blend-equation-separate-i) :void
  (buf uint)
  (modeRGB enum)
  (modeAlpha enum))

(defglextfun ("glBlendFunci" blend-func-i) :void
  (buf uint)
  (src enum)
  (dst enum))

(defglextfun ("glBlendFuncSeparatei" blend-func-separate-i) :void
  (buf uint)
  (srcRGB enum)
  (dstRGB enum)
  (srcAlpha enum)
  (dstAlpha enum))

(defglextfun ("glUniform1i64NV" uniform-1i64-nv) :void
  (location int)
  (x int64-ext))

(defglextfun ("glUniform2i64NV" uniform-2i64-nv) :void
  (location int)
  (x int64-ext)
  (y int64-ext))

(defglextfun ("glUniform3i64NV" uniform-3i64-nv) :void
  (location int)
  (x int64-ext)
  (y int64-ext)
  (z int64-ext))

(defglextfun ("glUniform4i64NV" uniform-4i64-nv) :void
  (location int)
  (x int64-ext)
  (y int64-ext)
  (z int64-ext)
  (w int64-ext))

(defglextfun ("glUniform1i64vNV" uniform-1i64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glUniform2i64vNV" uniform-2i64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glUniform3i64vNV" uniform-3i64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glUniform4i64vNV" uniform-4i64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glUniform1ui64NV" uniform-1ui64-nv) :void
  (location int)
  (x uint64-ext))

(defglextfun ("glUniform2ui64NV" uniform-2ui64-nv) :void
  (location int)
  (x uint64-ext)
  (y uint64-ext))

(defglextfun ("glUniform3ui64NV" uniform-3ui64-nv) :void
  (location int)
  (x uint64-ext)
  (y uint64-ext)
  (z uint64-ext))

(defglextfun ("glUniform4ui64NV" uniform-4ui64-nv) :void
  (location int)
  (x uint64-ext)
  (y uint64-ext)
  (z uint64-ext)
  (w uint64-ext))

(defglextfun ("glUniform1ui64vNV" uniform-1ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glUniform2ui64vNV" uniform-2ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glUniform3ui64vNV" uniform-3ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glUniform4ui64vNV" uniform-4ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glGetUniformi64vNV" get-uniform-i64v-nv) :void
  (program uint)
  (location int)
  (params (:pointer int64-ext)))

(defglextfun ("glProgramUniform1i64NV" program-uniform-1i64-nv) :void
  (program uint)
  (location int)
  (x int64-ext))

(defglextfun ("glProgramUniform2i64NV" program-uniform-2i64-nv) :void
  (program uint)
  (location int)
  (x int64-ext)
  (y int64-ext))

(defglextfun ("glProgramUniform3i64NV" program-uniform-3i64-nv) :void
  (program uint)
  (location int)
  (x int64-ext)
  (y int64-ext)
  (z int64-ext))

(defglextfun ("glProgramUniform4i64NV" program-uniform-4i64-nv) :void
  (program uint)
  (location int)
  (x int64-ext)
  (y int64-ext)
  (z int64-ext)
  (w int64-ext))

(defglextfun ("glProgramUniform1i64vNV" program-uniform-1i64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glProgramUniform2i64vNV" program-uniform-2i64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glProgramUniform3i64vNV" program-uniform-3i64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glProgramUniform4i64vNV" program-uniform-4i64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int64-ext)))

(defglextfun ("glProgramUniform1ui64NV" program-uniform-1ui64-nv) :void
  (program uint)
  (location int)
  (x uint64-ext))

(defglextfun ("glProgramUniform2ui64NV" program-uniform-2ui64-nv) :void
  (program uint)
  (location int)
  (x uint64-ext)
  (y uint64-ext))

(defglextfun ("glProgramUniform3ui64NV" program-uniform-3ui64-nv) :void
  (program uint)
  (location int)
  (x uint64-ext)
  (y uint64-ext)
  (z uint64-ext))

(defglextfun ("glProgramUniform4ui64NV" program-uniform-4ui64-nv) :void
  (program uint)
  (location int)
  (x uint64-ext)
  (y uint64-ext)
  (z uint64-ext)
  (w uint64-ext))

(defglextfun ("glProgramUniform1ui64vNV" program-uniform-1ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glProgramUniform2ui64vNV" program-uniform-2ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glProgramUniform3ui64vNV" program-uniform-3ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glProgramUniform4ui64vNV" program-uniform-4ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint64-ext)))

(defglextfun ("glGetPerfMonitorGroupsAMD" get-perf-monitor-groups-amd) :void
  (numGroups (:pointer int))
  (groupsSize sizei)
  (groups (:pointer uint)))

(defglextfun ("glGetPerfMonitorCountersAMD" get-perf-monitor-counters-amd) :void
  (group uint)
  (numCounters (:pointer int))
  (maxActiveCounters (:pointer int))
  (counterSize sizei)
  (counters (:pointer uint)))

(defglextfun ("glGetPerfMonitorGroupStringAMD" get-perf-monitor-group-string-amd) :void
  (group uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (groupString (:pointer char)))

(defglextfun ("glGetPerfMonitorCounterStringAMD" get-perf-monitor-counter-string-amd) :void
  (group uint)
  (counter uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (counterString (:pointer char)))

(defglextfun ("glGetPerfMonitorCounterInfoAMD" get-perf-monitor-counter-info-amd) :void
  (group uint)
  (counter uint)
  (pname enum)
  (data (:pointer :void)))

(defglextfun ("glGenPerfMonitorsAMD" gen-perf-monitors-amd) :void
  (n sizei)
  (monitors (:pointer uint)))

(defglextfun ("glDeletePerfMonitorsAMD" delete-perf-monitors-amd) :void
  (n sizei)
  (monitors (:pointer uint)))

(defglextfun ("glSelectPerfMonitorCountersAMD" select-perf-monitor-counters-amd) :void
  (monitor uint)
  (enable boolean)
  (group uint)
  (numCounters int)
  (counterList (:pointer uint)))

(defglextfun ("glBeginPerfMonitorAMD" begin-perf-monitor-amd) :void
  (monitor uint))

(defglextfun ("glEndPerfMonitorAMD" end-perf-monitor-amd) :void
  (monitor uint))

(defglextfun ("glGetPerfMonitorCounterDataAMD" get-perf-monitor-counter-data-amd) :void
  (monitor uint)
  (pname enum)
  (dataSize sizei)
  (data (:pointer uint))
  (bytesWritten (:pointer int)))

(defglextfun ("glBindFragDataLocationEXT" bind-frag-data-location-ext) :void
  (program uint)
  (color uint)
  (name (:pointer char)))

(defglextfun ("glLabelObjectEXT" label-object-ext) :void
  (type enum)
  (object uint)
  (length sizei)
  (label (:pointer char)))

(defglextfun ("glGetObjectLabelEXT" get-object-label-ext) :void
  (type enum)
  (object uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (label (:pointer char)))

(defglextfun ("glInsertEventMarkerEXT" insert-event-marker-ext) :void
  (length sizei)
  (marker (:pointer char)))

(defglextfun ("glPushGroupMarkerEXT" push-group-marker-ext) :void
  (length sizei)
  (marker (:pointer char)))

(defglextfun ("glPopGroupMarkerEXT" pop-group-marker-ext) :void)

(defglextfun ("glProgramUniform1fEXT" program-uniform-1f-ext) :void
  (program uint)
  (location int)
  (v0 float))

(defglextfun ("glProgramUniform2fEXT" program-uniform-2f-ext) :void
  (program uint)
  (location int)
  (v0 float)
  (v1 float))

(defglextfun ("glProgramUniform3fEXT" program-uniform-3f-ext) :void
  (program uint)
  (location int)
  (v0 float)
  (v1 float)
  (v2 float))

(defglextfun ("glProgramUniform4fEXT" program-uniform-4f-ext) :void
  (program uint)
  (location int)
  (v0 float)
  (v1 float)
  (v2 float)
  (v3 float))

(defglextfun ("glProgramUniform1iEXT" program-uniform-1i-ext) :void
  (program uint)
  (location int)
  (v0 int))

(defglextfun ("glProgramUniform2iEXT" program-uniform-2i-ext) :void
  (program uint)
  (location int)
  (v0 int)
  (v1 int))

(defglextfun ("glProgramUniform3iEXT" program-uniform-3i-ext) :void
  (program uint)
  (location int)
  (v0 int)
  (v1 int)
  (v2 int))

(defglextfun ("glProgramUniform4iEXT" program-uniform-4i-ext) :void
  (program uint)
  (location int)
  (v0 int)
  (v1 int)
  (v2 int)
  (v3 int))

(defglextfun ("glProgramUniform1fvEXT" program-uniform-1fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer float)))

(defglextfun ("glProgramUniform2fvEXT" program-uniform-2fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer float)))

(defglextfun ("glProgramUniform3fvEXT" program-uniform-3fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer float)))

(defglextfun ("glProgramUniform4fvEXT" program-uniform-4fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer float)))

(defglextfun ("glProgramUniform1ivEXT" program-uniform-1iv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int)))

(defglextfun ("glProgramUniform2ivEXT" program-uniform-2iv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int)))

(defglextfun ("glProgramUniform3ivEXT" program-uniform-3iv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int)))

(defglextfun ("glProgramUniform4ivEXT" program-uniform-4iv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer int)))

(defglextfun ("glProgramUniformMatrix2fvEXT" program-uniform-matrix-2fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glProgramUniformMatrix3fvEXT" program-uniform-matrix-3fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glProgramUniformMatrix4fvEXT" program-uniform-matrix-4fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glProgramUniformMatrix2x3fvEXT" program-uniform-matrix-2x3-fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glProgramUniformMatrix3x2fvEXT" program-uniform-matrix-3x2-fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glProgramUniformMatrix2x4fvEXT" program-uniform-matrix-2x4-fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glProgramUniformMatrix4x2fvEXT" program-uniform-matrix-4x2-fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glProgramUniformMatrix3x4fvEXT" program-uniform-matrix-3x4-fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glProgramUniformMatrix4x3fvEXT" program-uniform-matrix-4x3-fv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glProgramUniform1uiEXT" program-uniform-1ui-ext) :void
  (program uint)
  (location int)
  (v0 uint))

(defglextfun ("glProgramUniform2uiEXT" program-uniform-2ui-ext) :void
  (program uint)
  (location int)
  (v0 uint)
  (v1 uint))

(defglextfun ("glProgramUniform3uiEXT" program-uniform-3ui-ext) :void
  (program uint)
  (location int)
  (v0 uint)
  (v1 uint)
  (v2 uint))

(defglextfun ("glProgramUniform4uiEXT" program-uniform-4ui-ext) :void
  (program uint)
  (location int)
  (v0 uint)
  (v1 uint)
  (v2 uint)
  (v3 uint))

(defglextfun ("glProgramUniform1uivEXT" program-uniform-1uiv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glProgramUniform2uivEXT" program-uniform-2uiv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glProgramUniform3uivEXT" program-uniform-3uiv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glProgramUniform4uivEXT" program-uniform-4uiv-ext) :void
  (program uint)
  (location int)
  (count sizei)
  (value (:pointer uint)))

(defglextfun ("glGetQueryObjecti64vEXT" get-query-object-i64v-ext) :void
  (id uint)
  (pname enum)
  (params (:pointer int64)))

(defglextfun ("glGetQueryObjectui64vEXT" get-query-object-ui64v-ext) :void
  (id uint)
  (pname enum)
  (params (:pointer uint64)))

(defglextfun ("glDrawArraysInstancedEXT" draw-arrays-instanced-ext) :void
  (mode enum)
  (start int)
  (count sizei)
  (primcount sizei))

(defglextfun ("glDrawElementsInstancedEXT" draw-elements-instanced-ext) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (primcount sizei))

(defglextfun ("glFramebufferTextureEXT" framebuffer-texture-ext) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int))

(defglextfun ("glProgramParameteriEXT" program-parameter-i-ext) :void
  (program uint)
  (pname enum)
  (value int))

(defglextfun ("glPolygonOffsetClampEXT" polygon-offset-clamp-ext) :void
  (factor float)
  (units float)
  (clamp float))

(defglextfun ("glRasterSamplesEXT" raster-samples-ext) :void
  (samples uint)
  (fixedsamplelocations boolean))

(defglextfun ("glUseShaderProgramEXT" use-shader-program-ext) :void
  (type enum)
  (program uint))

(defglextfun ("glActiveProgramEXT" active-program-ext) :void
  (program uint))

(defglextfun ("glCreateShaderProgramEXT" create-shader-program-ext) uint
  (type enum)
  (string (:pointer char)))

(defglextfun ("glActiveShaderProgramEXT" active-shader-program-ext) :void
  (pipeline uint)
  (program uint))

(defglextfun ("glBindProgramPipelineEXT" bind-program-pipeline-ext) :void
  (pipeline uint))

(defglextfun ("glCreateShaderProgramvEXT" create-shader-programv-ext) uint
  (type enum)
  (count sizei)
  (strings (:pointer (:pointer char))))

(defglextfun ("glDeleteProgramPipelinesEXT" delete-program-pipelines-ext) :void
  (n sizei)
  (pipelines (:pointer uint)))

(defglextfun ("glGenProgramPipelinesEXT" gen-program-pipelines-ext) :void
  (n sizei)
  (pipelines (:pointer uint)))

(defglextfun ("glGetProgramPipelineInfoLogEXT" get-program-pipeline-info-log-ext) :void
  (pipeline uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (infoLog (:pointer char)))

(defglextfun ("glGetProgramPipelineivEXT" get-program-pipeline-iv-ext) :void
  (pipeline uint)
  (pname GetProgramPipelineExtPname)
  (params int))

(defglextfun ("glIsProgramPipelineEXT" is-program-pipeline-ext) boolean
  (pipeline uint))

(defglextfun ("glUseProgramStagesEXT" use-program-stages-ext) :void
  (pipeline uint)
  (stages UseProgramStageMask)
  (program uint))

(defglextfun ("glValidateProgramPipelineEXT" validate-program-pipeline-ext) :void
  (pipeline uint))

(defglextfun ("glTexParameterIivEXT" tex-parameter-iiv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTexParameterIuivEXT" tex-parameter-iuiv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetTexParameterIivEXT" get-tex-parameter-iiv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetTexParameterIuivEXT" get-tex-parameter-iuiv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glTexBufferEXT" tex-buffer-ext) :void
  (target enum)
  (internalformat enum)
  (buffer uint))

(defglextfun ("glWindowRectanglesEXT" window-rectangles-ext) :void
  (mode enum)
  (count sizei)
  (box (:pointer int)))

(defglextfun ("glApplyFramebufferAttachmentCMAAINTEL" apply-framebuffer-attachment-cmaa-intel) :void)

(defglextfun ("glBeginPerfQueryINTEL" begin-perf-query-intel) :void
  (queryHandle uint))

(defglextfun ("glCreatePerfQueryINTEL" create-perf-query-intel) :void
  (queryId uint)
  (queryHandle (:pointer uint)))

(defglextfun ("glDeletePerfQueryINTEL" delete-perf-query-intel) :void
  (queryHandle uint))

(defglextfun ("glEndPerfQueryINTEL" end-perf-query-intel) :void
  (queryHandle uint))

(defglextfun ("glGetFirstPerfQueryIdINTEL" get-first-perf-query-id-intel) :void
  (queryId (:pointer uint)))

(defglextfun ("glGetNextPerfQueryIdINTEL" get-next-perf-query-id-intel) :void
  (queryId uint)
  (nextQueryId (:pointer uint)))

(defglextfun ("glGetPerfCounterInfoINTEL" get-perf-counter-info-intel) :void
  (queryId uint)
  (counterId uint)
  (counterNameLength uint)
  (counterName (:pointer char))
  (counterDescLength uint)
  (counterDesc (:pointer char))
  (counterOffset (:pointer uint))
  (counterDataSize (:pointer uint))
  (counterTypeEnum (:pointer uint))
  (counterDataTypeEnum (:pointer uint))
  (rawCounterMaxValue (:pointer uint64)))

(defglextfun ("glGetPerfQueryDataINTEL" get-perf-query-data-intel) :void
  (queryHandle uint)
  (flags uint)
  (dataSize sizei)
  (data (:pointer void))
  (bytesWritten (:pointer uint)))

(defglextfun ("glGetPerfQueryIdByNameINTEL" get-perf-query-id-by-name-intel) :void
  (queryName (:pointer char))
  (queryId (:pointer uint)))

(defglextfun ("glGetPerfQueryInfoINTEL" get-perf-query-info-intel) :void
  (queryId uint)
  (queryNameLength uint)
  (queryName (:pointer char))
  (dataSize (:pointer uint))
  (noCounters (:pointer uint))
  (noInstances (:pointer uint))
  (capsMask (:pointer uint)))

(defglextfun ("glBlendBarrierKHR" blend-barrier-khr) :void)

(defglextfun ("glGetTextureHandleNV" get-texture-handle-nv) uint64
  (texture uint))

(defglextfun ("glGetTextureSamplerHandleNV" get-texture-sampler-handle-nv) uint64
  (texture uint)
  (sampler uint))

(defglextfun ("glMakeTextureHandleResidentNV" make-texture-handle-resident-nv) :void
  (handle uint64))

(defglextfun ("glMakeTextureHandleNonResidentNV" make-texture-handle-non-resident-nv) :void
  (handle uint64))

(defglextfun ("glGetImageHandleNV" get-image-handle-nv) uint64
  (texture uint)
  (level int)
  (layered boolean)
  (layer int)
  (format enum))

(defglextfun ("glMakeImageHandleResidentNV" make-image-handle-resident-nv) :void
  (handle uint64)
  (access enum))

(defglextfun ("glMakeImageHandleNonResidentNV" make-image-handle-non-resident-nv) :void
  (handle uint64))

(defglextfun ("glUniformHandleui64NV" uniform-handle-ui64-nv) :void
  (location int)
  (value uint64))

(defglextfun ("glUniformHandleui64vNV" uniform-handle-ui64v-nv) :void
  (location int)
  (count sizei)
  (value (:pointer uint64)))

(defglextfun ("glProgramUniformHandleui64NV" program-uniform-handle-ui64-nv) :void
  (program uint)
  (location int)
  (value uint64))

(defglextfun ("glProgramUniformHandleui64vNV" program-uniform-handle-ui64v-nv) :void
  (program uint)
  (location int)
  (count sizei)
  (values (:pointer uint64)))

(defglextfun ("glIsTextureHandleResidentNV" is-texture-handle-resident-nv) boolean
  (handle uint64))

(defglextfun ("glIsImageHandleResidentNV" is-image-handle-resident-nv) boolean
  (handle uint64))

(defglextfun ("glBlendParameteriNV" blend-parameter-i-nv) :void
  (pname enum)
  (value int))

(defglextfun ("glBlendBarrierNV" blend-barrier-nv) :void)

(defglextfun ("glBeginConditionalRenderNV" begin-conditional-render-nv) :void
  (id uint)
  (mode enum))

(defglextfun ("glEndConditionalRenderNV" end-conditional-render-nv) :void)

(defglextfun ("glSubpixelPrecisionBiasNV" subpixel-precision-bias-nv) :void
  (xbits uint)
  (ybits uint))

(defglextfun ("glConservativeRasterParameteriNV" conservative-raster-parameter-i-nv) :void
  (pname enum)
  (param int))

(defglextfun ("glFragmentCoverageColorNV" fragment-coverage-color-nv) :void
  (color uint))

(defglextfun ("glCoverageModulationTableNV" coverage-modulation-table-nv) :void
  (n sizei)
  (v (:pointer float)))

(defglextfun ("glGetCoverageModulationTableNV" get-coverage-modulation-table-nv) :void
  (bufsize sizei)
  (v (:pointer float)))

(defglextfun ("glCoverageModulationNV" coverage-modulation-nv) :void
  (components enum))

(defglextfun ("glGetInternalformatSampleivNV" get-internal-format-sample-iv-nv) :void
  (target enum)
  (internalformat enum)
  (samples sizei)
  (pname enum)
  (bufSize sizei)
  (params (:pointer int)))

(defglextfun ("glGenPathsNV" gen-paths-nv) uint
  (range sizei))

(defglextfun ("glDeletePathsNV" delete-paths-nv) :void
  (path uint)
  (range sizei))

(defglextfun ("glIsPathNV" is-path-nv) boolean
  (path uint))

(defglextfun ("glPathCommandsNV" path-commands-nv) :void
  (path uint)
  (numCommands sizei)
  (commands (:pointer ubyte))
  (numCoords sizei)
  (coordType enum)
  (coords (:pointer :void)))

(defglextfun ("glPathCoordsNV" path-coords-nv) :void
  (path uint)
  (numCoords sizei)
  (coordType enum)
  (coords (:pointer :void)))

(defglextfun ("glPathSubCommandsNV" path-sub-commands-nv) :void
  (path uint)
  (commandStart sizei)
  (commandsToDelete sizei)
  (numCommands sizei)
  (commands (:pointer ubyte))
  (numCoords sizei)
  (coordType enum)
  (coords (:pointer :void)))

(defglextfun ("glPathSubCoordsNV" path-sub-coords-nv) :void
  (path uint)
  (coordStart sizei)
  (numCoords sizei)
  (coordType enum)
  (coords (:pointer :void)))

(defglextfun ("glPathStringNV" path-string-nv) :void
  (path uint)
  (format enum)
  (length sizei)
  (pathString (:pointer :void)))

(defglextfun ("glPathGlyphsNV" path-glyphs-nv) :void
  (firstPathName uint)
  (fontTarget enum)
  (fontName (:pointer :void))
  (fontStyle bitfield)
  (numGlyphs sizei)
  (type enum)
  (charcodes (:pointer :void))
  (handleMissingGlyphs enum)
  (pathParameterTemplate uint)
  (emScale float))

(defglextfun ("glPathGlyphRangeNV" path-glyph-range-nv) :void
  (firstPathName uint)
  (fontTarget enum)
  (fontName (:pointer :void))
  (fontStyle bitfield)
  (firstGlyph uint)
  (numGlyphs sizei)
  (handleMissingGlyphs enum)
  (pathParameterTemplate uint)
  (emScale float))

(defglextfun ("glWeightPathsNV" weight-paths-nv) :void
  (resultPath uint)
  (numPaths sizei)
  (paths (:pointer uint))
  (weights (:pointer float)))

(defglextfun ("glCopyPathNV" copy-path-nv) :void
  (resultPath uint)
  (srcPath uint))

(defglextfun ("glInterpolatePathsNV" interpolate-paths-nv) :void
  (resultPath uint)
  (pathA uint)
  (pathB uint)
  (weight float))

(defglextfun ("glTransformPathNV" transform-path-nv) :void
  (resultPath uint)
  (srcPath uint)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glPathParameterivNV" path-parameter-iv-nv) :void
  (path uint)
  (pname enum)
  (value (:pointer int)))

(defglextfun ("glPathParameteriNV" path-parameter-i-nv) :void
  (path uint)
  (pname enum)
  (value int))

(defglextfun ("glPathParameterfvNV" path-parameter-fv-nv) :void
  (path uint)
  (pname enum)
  (value (:pointer float)))

(defglextfun ("glPathParameterfNV" path-parameter-f-nv) :void
  (path uint)
  (pname enum)
  (value float))

(defglextfun ("glPathDashArrayNV" path-dash-array-nv) :void
  (path uint)
  (dashCount sizei)
  (dashArray (:pointer float)))

(defglextfun ("glPathStencilFuncNV" path-stencil-func-nv) :void
  (func enum)
  (ref int)
  (mask uint))

(defglextfun ("glPathStencilDepthOffsetNV" path-stencil-depth-offset-nv) :void
  (factor float)
  (units float))

(defglextfun ("glStencilFillPathNV" stencil-fill-path-nv) :void
  (path uint)
  (fillMode enum)
  (mask uint))

(defglextfun ("glStencilStrokePathNV" stencil-stroke-path-nv) :void
  (path uint)
  (reference int)
  (mask uint))

(defglextfun ("glStencilFillPathInstancedNV" stencil-fill-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (fillMode enum)
  (mask uint)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glStencilStrokePathInstancedNV" stencil-stroke-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (reference int)
  (mask uint)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glPathCoverDepthFuncNV" path-cover-depth-func-nv) :void
  (func enum))

(defglextfun ("glCoverFillPathNV" cover-fill-path-nv) :void
  (path uint)
  (coverMode enum))

(defglextfun ("glCoverStrokePathNV" cover-stroke-path-nv) :void
  (path uint)
  (coverMode enum))

(defglextfun ("glCoverFillPathInstancedNV" cover-fill-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (coverMode enum)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glCoverStrokePathInstancedNV" cover-stroke-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (coverMode enum)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glGetPathParameterivNV" get-path-parameter-iv-nv) :void
  (path uint)
  (pname enum)
  (value (:pointer int)))

(defglextfun ("glGetPathParameterfvNV" get-path-parameter-fv-nv) :void
  (path uint)
  (pname enum)
  (value (:pointer float)))

(defglextfun ("glGetPathCommandsNV" get-path-commands-nv) :void
  (path uint)
  (commands (:pointer ubyte)))

(defglextfun ("glGetPathCoordsNV" get-path-coords-nv) :void
  (path uint)
  (coords (:pointer float)))

(defglextfun ("glGetPathDashArrayNV" get-path-dash-array-nv) :void
  (path uint)
  (dashArray (:pointer float)))

(defglextfun ("glGetPathMetricsNV" get-path-metrics-nv) :void
  (metricQueryMask bitfield)
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (stride sizei)
  (metrics (:pointer float)))

(defglextfun ("glGetPathMetricRangeNV" get-path-metric-range-nv) :void
  (metricQueryMask bitfield)
  (firstPathName uint)
  (numPaths sizei)
  (stride sizei)
  (metrics (:pointer float)))

(defglextfun ("glGetPathSpacingNV" get-path-spacing-nv) :void
  (pathListMode enum)
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (advanceScale float)
  (kerningScale float)
  (transformType enum)
  (returnedSpacing (:pointer float)))

(defglextfun ("glIsPointInFillPathNV" is-point-in-fill-path-nv) boolean
  (path uint)
  (mask uint)
  (x float)
  (y float))

(defglextfun ("glIsPointInStrokePathNV" is-point-in-stroke-path-nv) boolean
  (path uint)
  (x float)
  (y float))

(defglextfun ("glGetPathLengthNV" get-path-length-nv) float
  (path uint)
  (startSegment sizei)
  (numSegments sizei))

(defglextfun ("glPointAlongPathNV" point-along-path-nv) boolean
  (path uint)
  (startSegment sizei)
  (numSegments sizei)
  (distance float)
  (x (:pointer float))
  (y (:pointer float))
  (tangentX (:pointer float))
  (tangentY (:pointer float)))

(defglextfun ("glMatrixLoad3x2fNV" matrix-load-3x2-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixLoad3x3fNV" matrix-load-3x3-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixLoadTranspose3x3fNV" matrix-load-transpose-3x3-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixMult3x2fNV" matrix-mult-3x2-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixMult3x3fNV" matrix-mult-3x3-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glMatrixMultTranspose3x3fNV" matrix-mult-transpose-3x3-f-nv) :void
  (matrixMode enum)
  (m (:pointer float)))

(defglextfun ("glStencilThenCoverFillPathNV" stencil-then-cover-fill-path-nv) :void
  (path uint)
  (fillMode enum)
  (mask uint)
  (coverMode enum))

(defglextfun ("glStencilThenCoverStrokePathNV" stencil-then-cover-stroke-path-nv) :void
  (path uint)
  (reference int)
  (mask uint)
  (coverMode enum))

(defglextfun ("glStencilThenCoverFillPathInstancedNV" stencil-then-cover-fill-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (fillMode enum)
  (mask uint)
  (coverMode enum)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glStencilThenCoverStrokePathInstancedNV" stencil-then-cover-stroke-path-instanced-nv) :void
  (numPaths sizei)
  (pathNameType enum)
  (paths (:pointer :void))
  (pathBase uint)
  (reference int)
  (mask uint)
  (coverMode enum)
  (transformType enum)
  (transformValues (:pointer float)))

(defglextfun ("glPathGlyphIndexRangeNV" path-glyph-index-range-nv) enum
  (fontTarget enum)
  (fontName (:pointer :void))
  (fontStyle bitfield)
  (pathParameterTemplate uint)
  (emScale float)
  (baseAndCount uint [2]))

(defglextfun ("glPathGlyphIndexArrayNV" path-glyph-index-array-nv) enum
  (firstPathName uint)
  (fontTarget enum)
  (fontName (:pointer :void))
  (fontStyle bitfield)
  (firstGlyphIndex uint)
  (numGlyphs sizei)
  (pathParameterTemplate uint)
  (emScale float))

(defglextfun ("glPathMemoryGlyphIndexArrayNV" path-memory-glyph-index-array-nv) enum
  (firstPathName uint)
  (fontTarget enum)
  (fontSize sizeiptr)
  (fontData (:pointer :void))
  (faceIndex sizei)
  (firstGlyphIndex uint)
  (numGlyphs sizei)
  (pathParameterTemplate uint)
  (emScale float))

(defglextfun ("glProgramPathFragmentInputGenNV" program-path-fragment-input-gen-nv) :void
  (program uint)
  (location int)
  (genMode enum)
  (components int)
  (coeffs (:pointer float)))

(defglextfun ("glGetProgramResourcefvNV" get-program-resource-fv-nv) :void
  (program uint)
  (programInterface enum)
  (index uint)
  (propCount sizei)
  (props (:pointer enum))
  (bufSize sizei)
  (length (:pointer sizei))
  (params (:pointer float)))

(defglextfun ("glPathColorGenNV" path-color-gen-nv) :void
  (color enum)
  (genMode enum)
  (colorFormat enum)
  (coeffs (:pointer float)))

(defglextfun ("glPathTexGenNV" path-tex-gen-nv) :void
  (texCoordSet enum)
  (genMode enum)
  (components int)
  (coeffs (:pointer float)))

(defglextfun ("glPathFogGenNV" path-fog-gen-nv) :void
  (genMode enum))

(defglextfun ("glGetPathColorGenivNV" get-path-color-gen-iv-nv) :void
  (color enum)
  (pname enum)
  (value (:pointer int)))

(defglextfun ("glGetPathColorGenfvNV" get-path-color-gen-fv-nv) :void
  (color enum)
  (pname enum)
  (value (:pointer float)))

(defglextfun ("glGetPathTexGenivNV" get-path-tex-gen-iv-nv) :void
  (texCoordSet enum)
  (pname enum)
  (value (:pointer int)))

(defglextfun ("glGetPathTexGenfvNV" get-path-tex-gen-fv-nv) :void
  (texCoordSet enum)
  (pname enum)
  (value (:pointer float)))

(defglextfun ("glFramebufferSampleLocationsfvNV" framebuffer-sample-locations-fv-nv) :void
  (target enum)
  (start uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glNamedFramebufferSampleLocationsfvNV" named-framebuffer-sample-locations-fv-nv) :void
  (framebuffer uint)
  (start uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glResolveDepthValuesNV" resolve-depth-values-nv) :void)

(defglextfun ("glViewportSwizzleNV" viewport-swizzle-nv) :void
  (index uint)
  (swizzlex enum)
  (swizzley enum)
  (swizzlez enum)
  (swizzlew enum))

(defglextfun ("glFramebufferTextureMultiviewOVR" framebuffer-texture-multiview-ovr) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int)
  (baseViewIndex int)
  (numViews sizei))


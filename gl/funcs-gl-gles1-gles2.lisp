;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright 2013-2020 The Khronos Group Inc.
;;; SPDX-License-Identifier: Apache-2.0

(in-package #:cl-opengl-bindings)

;;; generated 2023-12-17T01:10:58Z
;;; from gl.xml @ git sha bb9a7d9bd49408d709e7481e34b689db3b13317c, 2023-12-06T16:19:18Z

(defglfun ("glTexImage2D" tex-image-2d) :void
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (height sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglfun ("glReadPixels" read-pixels) :void
  (x int)
  (y int)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglfun ("glDrawElements" draw-elements) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices offset-or-pointer))

(defglfun ("glCopyTexImage2D" copy-tex-image-2d) :void
  (target enum)
  (level int)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (height sizei)
  (border int))

(defglfun ("glCopyTexSubImage2D" copy-tex-sub-image-2d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglfun ("glDeleteTextures" delete-textures) :void
  (n sizei)
  (textures (:pointer uint)))

(defglfun ("glIsTexture" is-texture) boolean
  (texture uint))

(defglextfun ("glCompressedTexImage2D" compressed-tex-image-2d) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (border int)
  (imageSize sizei)
  (data offset-or-pointer))

(defglextfun ("glDeleteBuffers" delete-buffers) :void
  (n sizei)
  (buffers (:pointer uint)))

(defglextfun ("glIsBuffer" is-buffer) boolean
  (buffer uint))

(defglextfun ("glBlendEquationEXT" blend-equation-ext) :void
  (mode enum))

(defglextfun ("glRenderbufferStorageMultisampleEXT" renderbuffer-storage-multisample-ext) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glMultiDrawArraysEXT" multi-draw-arrays-ext) :void
  (mode enum)
  (first (:pointer int))
  (count (:pointer sizei))
  (primcount sizei))

(defglextfun ("glMultiDrawElementsEXT" multi-draw-elements-ext) :void
  (mode enum)
  (count (:pointer sizei))
  (type enum)
  (indices (:pointer (:pointer :void)))
  (primcount sizei))

(defglextfun ("glDeleteFencesNV" delete-fences-nv) :void
  (n sizei)
  (fences (:pointer uint)))

(defglextfun ("glGenFencesNV" gen-fences-nv) :void
  (n sizei)
  (fences (:pointer uint)))

(defglextfun ("glIsFenceNV" is-fence-nv) boolean
  (fence uint))

(defglextfun ("glTestFenceNV" test-fence-nv) boolean
  (fence uint))

(defglextfun ("glGetFenceivNV" get-fence-iv-nv) :void
  (fence uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glFinishFenceNV" finish-fence-nv) :void
  (fence uint))

(defglextfun ("glSetFenceNV" set-fence-nv) :void
  (fence uint)
  (condition enum))


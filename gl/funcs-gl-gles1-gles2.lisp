;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2016 The Khronos Group Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a
;;; copy of this software and/or associated documentation files (the
;;; "Materials"), to deal in the Materials without restriction, including
;;; without limitation the rights to use, copy, modify, merge, publish,
;;; distribute, sublicense, and/or sell copies of the Materials, and to
;;; permit persons to whom the Materials are furnished to do so, subject to
;;; the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included
;;; in all copies or substantial portions of the Materials.
;;;
;;; THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;;; MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2016-11-02T03:17:18Z
;;; from gl.xml @ svn rev 33260, 2016-10-27T10:38:44.798295Z

(defglfun ("glTexImage2D" tex-image-2d) :void
  (target enum)
  (level int)
  (internalformat int)
  (width sizei)
  (height sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglfun ("glReadPixels" read-pixels) :void
  (x int)
  (y int)
  (width sizei)
  (height sizei)
  (format enum)
  (type enum)
  (pixels offset-or-pointer))

(defglfun ("glDrawElements" draw-elements) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices offset-or-pointer))

(defglfun ("glCopyTexImage2D" copy-tex-image-2d) :void
  (target enum)
  (level int)
  (internalformat enum)
  (x int)
  (y int)
  (width sizei)
  (height sizei)
  (border int))

(defglfun ("glCopyTexSubImage2D" copy-tex-sub-image-2d) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglfun ("glDeleteTextures" delete-textures) :void
  (n sizei)
  (textures (:pointer uint)))

(defglfun ("glIsTexture" is-texture) boolean
  (texture uint))

(defglextfun ("glCompressedTexImage2D" compressed-tex-image-2d) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (border int)
  (imageSize sizei)
  (data offset-or-pointer))

(defglextfun ("glDeleteBuffers" delete-buffers) :void
  (n sizei)
  (buffers (:pointer uint)))

(defglextfun ("glIsBuffer" is-buffer) boolean
  (buffer uint))

(defglextfun ("glBlendEquationEXT" blend-equation-ext) :void
  (mode enum))

(defglextfun ("glTextureStorage1DEXT" texture-storage-1d-ext) :void
  (texture uint)
  (target enum)
  (levels sizei)
  (internalformat enum)
  (width sizei))

(defglextfun ("glTextureStorage2DEXT" texture-storage-2d-ext) :void
  (texture uint)
  (target enum)
  (levels sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glTextureStorage3DEXT" texture-storage-3d-ext) :void
  (texture uint)
  (target enum)
  (levels sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei))

(defglextfun ("glRenderbufferStorageMultisampleEXT" renderbuffer-storage-multisample-ext) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glMultiDrawArraysEXT" multi-draw-arrays-ext) :void
  (mode enum)
  (first (:pointer int))
  (count (:pointer sizei))
  (primcount sizei))

(defglextfun ("glMultiDrawElementsEXT" multi-draw-elements-ext) :void
  (mode enum)
  (count (:pointer sizei))
  (type enum)
  (indices (:pointer (:pointer :void)))
  (primcount sizei))

(defglextfun ("glDeleteFencesNV" delete-fences-nv) :void
  (n sizei)
  (fences (:pointer uint)))

(defglextfun ("glGenFencesNV" gen-fences-nv) :void
  (n sizei)
  (fences (:pointer uint)))

(defglextfun ("glIsFenceNV" is-fence-nv) boolean
  (fence uint))

(defglextfun ("glTestFenceNV" test-fence-nv) boolean
  (fence uint))

(defglextfun ("glGetFenceivNV" get-fence-iv-nv) :void
  (fence uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glFinishFenceNV" finish-fence-nv) :void
  (fence uint))

(defglextfun ("glSetFenceNV" set-fence-nv) :void
  (fence uint)
  (condition enum))


;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright 2013-2020 The Khronos Group Inc.
;;; SPDX-License-Identifier: Apache-2.0

(in-package #:cl-opengl-bindings)

;;; generated 2024-08-16T20:46:56Z
;;; from gl.xml @ git sha 4f845dc97972c72cad684cc22c7bf96e6d5319a6, 2024-08-15T14:04:09Z

(defglextfun ("glBlendBarrier" blend-barrier 47) :void)

(defglextfun ("glPrimitiveBoundingBox" primitive-bounding-box 48) :void
  (minX float)
  (minY float)
  (minZ float)
  (minW float)
  (maxX float)
  (maxY float)
  (maxZ float)
  (maxW float))

(defglextfun ("glBlitFramebufferANGLE" blit-framebuffer-angle 49) :void
  (srcX0 int)
  (srcY0 int)
  (srcX1 int)
  (srcY1 int)
  (dstX0 int)
  (dstY0 int)
  (dstX1 int)
  (dstY1 int)
  (mask ClearBufferMask)
  (filter enum))

(defglextfun ("glRenderbufferStorageMultisampleANGLE" renderbuffer-storage-multisample-angle 50) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glDrawArraysInstancedANGLE" draw-arrays-instanced-angle 51) :void
  (mode enum)
  (first int)
  (count sizei)
  (primcount sizei))

(defglextfun ("glDrawElementsInstancedANGLE" draw-elements-instanced-angle 52) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (primcount sizei))

(defglextfun ("glVertexAttribDivisorANGLE" vertex-attrib-divisor-angle 53) :void
  (index uint)
  (divisor uint))

(defglextfun ("glGetTranslatedShaderSourceANGLE" get-translated-shader-source-angle 54) :void
  (shader uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (source (:pointer char)))

(defglextfun ("glMaxActiveShaderCoresARM" max-active-shader-cores-arm 55) :void
  (count uint))

(defglextfun ("glDrawArraysInstancedBaseInstanceEXT" draw-arrays-instanced-base-instance-ext 56) :void
  (mode enum)
  (first int)
  (count sizei)
  (instancecount sizei)
  (baseinstance uint))

(defglextfun ("glDrawElementsInstancedBaseInstanceEXT" draw-elements-instanced-base-instance-ext 57) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (instancecount sizei)
  (baseinstance uint))

(defglextfun ("glDrawElementsInstancedBaseVertexBaseInstanceEXT" draw-elements-instanced-base-vertex-base-instance-ext 58) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (instancecount sizei)
  (basevertex int)
  (baseinstance uint))

(defglextfun ("glBindFragDataLocationIndexedEXT" bind-frag-data-location-indexed-ext 59) :void
  (program uint)
  (colorNumber uint)
  (index uint)
  (name (:pointer char)))

(defglextfun ("glGetProgramResourceLocationIndexEXT" get-program-resource-location-index-ext 60) int
  (program uint)
  (programInterface enum)
  (name (:pointer char)))

(defglextfun ("glGetFragDataIndexEXT" get-frag-data-index-ext 61) int
  (program uint)
  (name (:pointer char)))

(defglextfun ("glBufferStorageEXT" buffer-storage-ext 62) :void
  (target enum)
  (size sizeiptr)
  (data (:pointer :void))
  (flags BufferStorageMask))

(defglextfun ("glClearTexImageEXT" clear-tex-image-ext 63) :void
  (texture uint)
  (level int)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glClearTexSubImageEXT" clear-tex-sub-image-ext 64) :void
  (texture uint)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (data (:pointer :void)))

(defglextfun ("glClipControlEXT" clip-control-ext 65) :void
  (origin enum)
  (depth enum))

(defglextfun ("glCopyImageSubDataEXT" copy-image-sub-data-ext 66) :void
  (srcName uint)
  (srcTarget enum)
  (srcLevel int)
  (srcX int)
  (srcY int)
  (srcZ int)
  (dstName uint)
  (dstTarget enum)
  (dstLevel int)
  (dstX int)
  (dstY int)
  (dstZ int)
  (srcWidth sizei)
  (srcHeight sizei)
  (srcDepth sizei))

(defglextfun ("glGenQueriesEXT" gen-queries-ext 67) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glDeleteQueriesEXT" delete-queries-ext 68) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glIsQueryEXT" is-query-ext 69) boolean
  (id uint))

(defglextfun ("glBeginQueryEXT" begin-query-ext 70) :void
  (target enum)
  (id uint))

(defglextfun ("glEndQueryEXT" end-query-ext 71) :void
  (target enum))

(defglextfun ("glQueryCounterEXT" query-counter-ext 72) :void
  (id uint)
  (target enum))

(defglextfun ("glGetQueryivEXT" get-query-iv-ext 73) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetQueryObjectivEXT" get-query-object-iv-ext 74) :void
  (id uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetQueryObjectuivEXT" get-query-object-uiv-ext 75) :void
  (id uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetInteger64vEXT" get-integer-64-v-ext 76) :void
  (pname enum)
  (data (:pointer int64)))

(defglextfun ("glDrawBuffersEXT" draw-buffers-ext 77) :void
  (n sizei)
  (bufs (:pointer enum)))

(defglextfun ("glEnableiEXT" enable-i-ext 78) :void
  (target enum)
  (index uint))

(defglextfun ("glDisableiEXT" disable-i-ext 79) :void
  (target enum)
  (index uint))

(defglextfun ("glBlendEquationiEXT" blend-equation-i-ext 80) :void
  (buf uint)
  (mode enum))

(defglextfun ("glBlendEquationSeparateiEXT" blend-equation-separate-i-ext 81) :void
  (buf uint)
  (modeRGB enum)
  (modeAlpha enum))

(defglextfun ("glBlendFunciEXT" blend-func-i-ext 82) :void
  (buf uint)
  (src enum)
  (dst enum))

(defglextfun ("glBlendFuncSeparateiEXT" blend-func-separate-i-ext 83) :void
  (buf uint)
  (srcRGB enum)
  (dstRGB enum)
  (srcAlpha enum)
  (dstAlpha enum))

(defglextfun ("glColorMaskiEXT" color-mask-i-ext 84) :void
  (index uint)
  (r boolean)
  (g boolean)
  (b boolean)
  (a boolean))

(defglextfun ("glIsEnablediEXT" is-enabled-i-ext 85) boolean
  (target enum)
  (index uint))

(defglextfun ("glDrawElementsBaseVertexEXT" draw-elements-base-vertex-ext 86) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (basevertex int))

(defglextfun ("glDrawRangeElementsBaseVertexEXT" draw-range-elements-base-vertex-ext 87) :void
  (mode enum)
  (start uint)
  (end uint)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (basevertex int))

(defglextfun ("glDrawElementsInstancedBaseVertexEXT" draw-elements-instanced-base-vertex-ext 88) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (instancecount sizei)
  (basevertex int))

(defglextfun ("glMultiDrawElementsBaseVertexEXT" multi-draw-elements-base-vertex-ext 89) :void
  (mode enum)
  (count (:pointer sizei))
  (type enum)
  (indices (:pointer (:pointer :void)))
  (drawcount sizei)
  (basevertex (:pointer int)))

(defglextfun ("glDrawTransformFeedbackEXT" draw-transform-feedback-ext 90) :void
  (mode enum)
  (id uint))

(defglextfun ("glDrawTransformFeedbackInstancedEXT" draw-transform-feedback-instanced-ext 91) :void
  (mode enum)
  (id uint)
  (instancecount sizei))

(defglextfun ("glGetFragmentShadingRatesEXT" get-fragment-shading-rates-ext 92) :void
  (samples sizei)
  (maxCount sizei)
  (count (:pointer sizei))
  (shadingRates (:pointer enum)))

(defglextfun ("glShadingRateEXT" shading-rate-ext 93) :void
  (rate enum))

(defglextfun ("glShadingRateCombinerOpsEXT" shading-rate-combiner-ops-ext 94) :void
  (combinerOp0 enum)
  (combinerOp1 enum))

(defglextfun ("glFramebufferShadingRateEXT" framebuffer-shading-rate-ext 95) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (baseLayer int)
  (numLayers sizei)
  (texelWidth sizei)
  (texelHeight sizei))

(defglextfun ("glVertexAttribDivisorEXT" vertex-attrib-divisor-ext 96) :void
  (index uint)
  (divisor uint))

(defglextfun ("glMultiDrawArraysIndirectEXT" multi-draw-arrays-indirect-ext 97) :void
  (mode enum)
  (indirect (:pointer :void))
  (drawcount sizei)
  (stride sizei))

(defglextfun ("glMultiDrawElementsIndirectEXT" multi-draw-elements-indirect-ext 98) :void
  (mode enum)
  (type enum)
  (indirect (:pointer :void))
  (drawcount sizei)
  (stride sizei))

(defglextfun ("glReadBufferIndexedEXT" read-buffer-indexed-ext 99) :void
  (src enum)
  (index int))

(defglextfun ("glDrawBuffersIndexedEXT" draw-buffers-indexed-ext 100) :void
  (n int)
  (location (:pointer enum))
  (indices (:pointer int)))

(defglextfun ("glGetIntegeri_vEXT" get-integer-i-v-ext 101) :void
  (target enum)
  (index uint)
  (data (:pointer int)))

(defglextfun ("glPrimitiveBoundingBoxEXT" primitive-bounding-box-ext 102) :void
  (minX float)
  (minY float)
  (minZ float)
  (minW float)
  (maxX float)
  (maxY float)
  (maxZ float)
  (maxW float))

(defglextfun ("glFramebufferPixelLocalStorageSizeEXT" framebuffer-pixel-local-storage-size-ext 103) :void
  (target uint)
  (size sizei))

(defglextfun ("glGetFramebufferPixelLocalStorageSizeEXT" get-framebuffer-pixel-local-storage-size-ext 104) sizei
  (target uint))

(defglextfun ("glClearPixelLocalStorageuiEXT" clear-pixel-local-storage-ui-ext 105) :void
  (offset sizei)
  (n sizei)
  (values (:pointer uint)))

(defglextfun ("glTexPageCommitmentEXT" tex-page-commitment-ext 106) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (commit boolean))

(defglextfun ("glPatchParameteriEXT" patch-parameter-i-ext 107) :void
  (pname enum)
  (value int))

(defglextfun ("glSamplerParameterIivEXT" sampler-parameter-iiv-ext 108) :void
  (sampler uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glSamplerParameterIuivEXT" sampler-parameter-iuiv-ext 109) :void
  (sampler uint)
  (pname enum)
  (param (:pointer uint)))

(defglextfun ("glGetSamplerParameterIivEXT" get-sampler-parameter-iiv-ext 110) :void
  (sampler uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetSamplerParameterIuivEXT" get-sampler-parameter-iuiv-ext 111) :void
  (sampler uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glTexBufferRangeEXT" tex-buffer-range-ext 112) :void
  (target enum)
  (internalformat enum)
  (buffer uint)
  (offset intptr)
  (size sizeiptr))

(defglextfun ("glTexStorageAttribs2DEXT" tex-storage-attribs-2d-ext 113) :void
  (target enum)
  (levels sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (attrib_list (:pointer int)))

(defglextfun ("glTexStorageAttribs3DEXT" tex-storage-attribs-3d-ext 114) :void
  (target enum)
  (levels sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (attrib_list (:pointer int)))

(defglextfun ("glTextureViewEXT" texture-view-ext 115) :void
  (texture uint)
  (target enum)
  (origtexture uint)
  (internalformat enum)
  (minlevel uint)
  (numlevels uint)
  (minlayer uint)
  (numlayers uint))

(defglextfun ("glGetTextureHandleIMG" get-texture-handle-img 116) uint64
  (texture uint))

(defglextfun ("glGetTextureSamplerHandleIMG" get-texture-sampler-handle-img 117) uint64
  (texture uint)
  (sampler uint))

(defglextfun ("glUniformHandleui64IMG" uniform-handleui64img 118) :void
  (location int)
  (value uint64))

(defglextfun ("glUniformHandleui64vIMG" uniform-handleui64v-img 119) :void
  (location int)
  (count sizei)
  (value (:pointer uint64)))

(defglextfun ("glProgramUniformHandleui64IMG" program-uniform-handleui64img 120) :void
  (program uint)
  (location int)
  (value uint64))

(defglextfun ("glProgramUniformHandleui64vIMG" program-uniform-handleui64v-img 121) :void
  (program uint)
  (location int)
  (count sizei)
  (values (:pointer uint64)))

(defglextfun ("glFramebufferTexture2DDownsampleIMG" framebuffer-texture-2d-downsample-img 122) :void
  (target enum)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int)
  (xscale int)
  (yscale int))

(defglextfun ("glFramebufferTextureLayerDownsampleIMG" framebuffer-texture-layer-downsample-img 123) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int)
  (layer int)
  (xscale int)
  (yscale int))

(defglextfun ("glCopyBufferSubDataNV" copy-buffer-sub-data-nv 124) :void
  (readTarget enum)
  (writeTarget enum)
  (readOffset intptr)
  (writeOffset intptr)
  (size sizeiptr))

(defglextfun ("glCoverageMaskNV" coverage-mask-nv 125) :void
  (mask boolean))

(defglextfun ("glCoverageOperationNV" coverage-operation-nv 126) :void
  (operation enum))

(defglextfun ("glDrawBuffersNV" draw-buffers-nv 127) :void
  (n sizei)
  (bufs (:pointer enum)))

(defglextfun ("glDrawArraysInstancedNV" draw-arrays-instanced-nv 128) :void
  (mode enum)
  (first int)
  (count sizei)
  (primcount sizei))

(defglextfun ("glDrawElementsInstancedNV" draw-elements-instanced-nv 129) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (primcount sizei))

(defglextfun ("glBlitFramebufferNV" blit-framebuffer-nv 130) :void
  (srcX0 int)
  (srcY0 int)
  (srcX1 int)
  (srcY1 int)
  (dstX0 int)
  (dstY0 int)
  (dstX1 int)
  (dstY1 int)
  (mask ClearBufferMask)
  (filter enum))

(defglextfun ("glRenderbufferStorageMultisampleNV" renderbuffer-storage-multisample-nv 131) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glVertexAttribDivisorNV" vertex-attrib-divisor-nv 132) :void
  (index uint)
  (divisor uint))

(defglextfun ("glUniformMatrix2x3fvNV" uniform-matrix-2x3-fv-nv 133) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix3x2fvNV" uniform-matrix-3x2-fv-nv 134) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix2x4fvNV" uniform-matrix-2x4-fv-nv 135) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix4x2fvNV" uniform-matrix-4x2-fv-nv 136) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix3x4fvNV" uniform-matrix-3x4-fv-nv 137) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix4x3fvNV" uniform-matrix-4x3-fv-nv 138) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glPolygonModeNV" polygon-mode-nv 139) :void
  (face enum)
  (mode enum))

(defglextfun ("glReadBufferNV" read-buffer-nv 140) :void
  (mode enum))

(defglextfun ("glViewportArrayvNV" viewport-array-v-nv 141) :void
  (first uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glViewportIndexedfNV" viewport-indexed-f-nv 142) :void
  (index uint)
  (x float)
  (y float)
  (w float)
  (h float))

(defglextfun ("glViewportIndexedfvNV" viewport-indexed-fv-nv 143) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glScissorArrayvNV" scissor-array-v-nv 144) :void
  (first uint)
  (count sizei)
  (v (:pointer int)))

(defglextfun ("glScissorIndexedNV" scissor-indexed-nv 145) :void
  (index uint)
  (left int)
  (bottom int)
  (width sizei)
  (height sizei))

(defglextfun ("glScissorIndexedvNV" scissor-indexed-v-nv 146) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glDepthRangeArrayfvNV" depth-range-array-fv-nv 147) :void
  (first uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glDepthRangeIndexedfNV" depth-range-indexed-f-nv 148) :void
  (index uint)
  (n float)
  (f float))

(defglextfun ("glGetFloati_vNV" get-float-i-v-nv 149) :void
  (target enum)
  (index uint)
  (data (:pointer float)))

(defglextfun ("glEnableiNV" enable-i-nv 150) :void
  (target enum)
  (index uint))

(defglextfun ("glDisableiNV" disable-i-nv 151) :void
  (target enum)
  (index uint))

(defglextfun ("glIsEnablediNV" is-enabled-i-nv 152) boolean
  (target enum)
  (index uint))

(defglextfun ("glCopyImageSubDataOES" copy-image-sub-data-oes 153) :void
  (srcName uint)
  (srcTarget enum)
  (srcLevel int)
  (srcX int)
  (srcY int)
  (srcZ int)
  (dstName uint)
  (dstTarget enum)
  (dstLevel int)
  (dstX int)
  (dstY int)
  (dstZ int)
  (srcWidth sizei)
  (srcHeight sizei)
  (srcDepth sizei))

(defglextfun ("glEnableiOES" enable-i-oes 154) :void
  (target enum)
  (index uint))

(defglextfun ("glDisableiOES" disable-i-oes 155) :void
  (target enum)
  (index uint))

(defglextfun ("glBlendEquationiOES" blend-equation-i-oes 156) :void
  (buf uint)
  (mode enum))

(defglextfun ("glBlendEquationSeparateiOES" blend-equation-separate-i-oes 157) :void
  (buf uint)
  (modeRGB enum)
  (modeAlpha enum))

(defglextfun ("glBlendFunciOES" blend-func-i-oes 158) :void
  (buf uint)
  (src enum)
  (dst enum))

(defglextfun ("glBlendFuncSeparateiOES" blend-func-separate-i-oes 159) :void
  (buf uint)
  (srcRGB enum)
  (dstRGB enum)
  (srcAlpha enum)
  (dstAlpha enum))

(defglextfun ("glColorMaskiOES" color-mask-i-oes 160) :void
  (index uint)
  (r boolean)
  (g boolean)
  (b boolean)
  (a boolean))

(defglextfun ("glIsEnablediOES" is-enabled-i-oes 161) boolean
  (target enum)
  (index uint))

(defglextfun ("glDrawElementsBaseVertexOES" draw-elements-base-vertex-oes 162) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (basevertex int))

(defglextfun ("glDrawRangeElementsBaseVertexOES" draw-range-elements-base-vertex-oes 163) :void
  (mode enum)
  (start uint)
  (end uint)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (basevertex int))

(defglextfun ("glDrawElementsInstancedBaseVertexOES" draw-elements-instanced-base-vertex-oes 164) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (instancecount sizei)
  (basevertex int))

(defglextfun ("glFramebufferTextureOES" framebuffer-texture-oes 165) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int))

(defglextfun ("glGetProgramBinaryOES" get-program-binary-oes 166) :void
  (program uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (binaryFormat (:pointer enum))
  (binary (:pointer :void)))

(defglextfun ("glProgramBinaryOES" program-binary-oes 167) :void
  (program uint)
  (binaryFormat enum)
  (binary (:pointer :void))
  (length int))

(defglextfun ("glPrimitiveBoundingBoxOES" primitive-bounding-box-oes 168) :void
  (minX float)
  (minY float)
  (minZ float)
  (minW float)
  (maxX float)
  (maxY float)
  (maxZ float)
  (maxW float))

(defglextfun ("glMinSampleShadingOES" min-sample-shading-oes 169) :void
  (value float))

(defglextfun ("glPatchParameteriOES" patch-parameter-i-oes 170) :void
  (pname enum)
  (value int))

(defglextfun ("glTexImage3DOES" tex-image-3d-oes 171) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTexSubImage3DOES" tex-sub-image-3d-oes 172) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glCopyTexSubImage3DOES" copy-tex-sub-image-3d-oes 173) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glCompressedTexImage3DOES" compressed-tex-image-3d-oes 174) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glCompressedTexSubImage3DOES" compressed-tex-sub-image-3d-oes 175) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glFramebufferTexture3DOES" framebuffer-texture-3d-oes 176) :void
  (target enum)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int)
  (zoffset int))

(defglextfun ("glTexParameterIivOES" tex-parameter-iiv-oes 177) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glTexParameterIuivOES" tex-parameter-iuiv-oes 178) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glGetTexParameterIivOES" get-tex-parameter-iiv-oes 179) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetTexParameterIuivOES" get-tex-parameter-iuiv-oes 180) :void
  (target enum)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glSamplerParameterIivOES" sampler-parameter-iiv-oes 181) :void
  (sampler uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glSamplerParameterIuivOES" sampler-parameter-iuiv-oes 182) :void
  (sampler uint)
  (pname enum)
  (param (:pointer uint)))

(defglextfun ("glGetSamplerParameterIivOES" get-sampler-parameter-iiv-oes 183) :void
  (sampler uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetSamplerParameterIuivOES" get-sampler-parameter-iuiv-oes 184) :void
  (sampler uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glTexBufferOES" tex-buffer-oes 185) :void
  (target enum)
  (internalformat enum)
  (buffer uint))

(defglextfun ("glTexBufferRangeOES" tex-buffer-range-oes 186) :void
  (target enum)
  (internalformat enum)
  (buffer uint)
  (offset intptr)
  (size sizeiptr))

(defglextfun ("glTexStorage3DMultisampleOES" tex-storage-3d-multisample-oes 187) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedsamplelocations boolean))

(defglextfun ("glTextureViewOES" texture-view-oes 188) :void
  (texture uint)
  (target enum)
  (origtexture uint)
  (internalformat enum)
  (minlevel uint)
  (numlevels uint)
  (minlayer uint)
  (numlayers uint))

(defglextfun ("glViewportArrayvOES" viewport-array-v-oes 189) :void
  (first uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glViewportIndexedfOES" viewport-indexed-f-oes 190) :void
  (index uint)
  (x float)
  (y float)
  (w float)
  (h float))

(defglextfun ("glViewportIndexedfvOES" viewport-indexed-fv-oes 191) :void
  (index uint)
  (v (:pointer float)))

(defglextfun ("glScissorArrayvOES" scissor-array-v-oes 192) :void
  (first uint)
  (count sizei)
  (v (:pointer int)))

(defglextfun ("glScissorIndexedOES" scissor-indexed-oes 193) :void
  (index uint)
  (left int)
  (bottom int)
  (width sizei)
  (height sizei))

(defglextfun ("glScissorIndexedvOES" scissor-indexed-v-oes 194) :void
  (index uint)
  (v (:pointer int)))

(defglextfun ("glDepthRangeArrayfvOES" depth-range-array-fv-oes 195) :void
  (first uint)
  (count sizei)
  (v (:pointer float)))

(defglextfun ("glDepthRangeIndexedfOES" depth-range-indexed-f-oes 196) :void
  (index uint)
  (n float)
  (f float))

(defglextfun ("glGetFloati_vOES" get-float-i-v-oes 197) :void
  (target enum)
  (index uint)
  (data (:pointer float)))

(defglextfun ("glFramebufferTextureMultisampleMultiviewOVR" framebuffer-texture-multisample-multiview-ovr 198) :void
  (target enum)
  (attachment enum)
  (texture uint)
  (level int)
  (samples sizei)
  (baseViewIndex int)
  (numViews sizei))

(defglextfun ("glAlphaFuncQCOM" alpha-func-qcom 199) :void
  (func enum)
  (ref clampf))

(defglextfun ("glFramebufferFoveationConfigQCOM" framebuffer-foveation-config-qcom 200) :void
  (framebuffer uint)
  (numLayers uint)
  (focalPointsPerLayer uint)
  (requestedFeatures uint)
  (providedFeatures (:pointer uint)))

(defglextfun ("glFramebufferFoveationParametersQCOM" framebuffer-foveation-parameters-qcom 201) :void
  (framebuffer uint)
  (layer uint)
  (focalPoint uint)
  (focalX float)
  (focalY float)
  (gainX float)
  (gainY float)
  (foveaArea float))

(defglextfun ("glTexEstimateMotionQCOM" tex-estimate-motion-qcom 202) :void
  (ref uint)
  (target uint)
  (output uint))

(defglextfun ("glTexEstimateMotionRegionsQCOM" tex-estimate-motion-regions-qcom 203) :void
  (ref uint)
  (target uint)
  (output uint)
  (mask uint))

(defglextfun ("glExtrapolateTex2DQCOM" extrapolate-tex-2d-qcom 204) :void
  (src1 uint)
  (src2 uint)
  (output uint)
  (scaleFactor float))

(defglextfun ("glTextureFoveationParametersQCOM" texture-foveation-parameters-qcom 205) :void
  (texture uint)
  (layer uint)
  (focalPoint uint)
  (focalX float)
  (focalY float)
  (gainX float)
  (gainY float)
  (foveaArea float))

(defglextfun ("glFramebufferFetchBarrierQCOM" framebuffer-fetch-barrier-qcom 206) :void)

(defglextfun ("glShadingRateQCOM" shading-rate-qcom 207) :void
  (rate enum))


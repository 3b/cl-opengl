;;; this file is automatically generated, do not edit
;;; generated from files with the following copyright:
;;;
;;; Copyright (c) 2013-2014 The Khronos Group Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person obtaining a
;;; copy of this software and/or associated documentation files (the
;;; "Materials"), to deal in the Materials without restriction, including
;;; without limitation the rights to use, copy, modify, merge, publish,
;;; distribute, sublicense, and/or sell copies of the Materials, and to
;;; permit persons to whom the Materials are furnished to do so, subject to
;;; the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be included
;;; in all copies or substantial portions of the Materials.
;;;
;;; THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;;; MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
;;;
;;; ------------------------------------------------------------------------

(in-package #:cl-opengl-bindings)

;;; generated 2014-09-28T21:05:19Z
;;; from gl.xml @ svn rev 28221, 2014-09-19T03:11:05.177262Z

(defglextfun ("glBlitFramebufferANGLE" blit-framebuffer-angle) :void
  (srcX0 int)
  (srcY0 int)
  (srcX1 int)
  (srcY1 int)
  (dstX0 int)
  (dstY0 int)
  (dstX1 int)
  (dstY1 int)
  (mask bitfield)
  (filter enum))

(defglextfun ("glRenderbufferStorageMultisampleANGLE" renderbuffer-storage-multisample-angle) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glDrawArraysInstancedANGLE" draw-arrays-instanced-angle) :void
  (mode enum)
  (first int)
  (count sizei)
  (primcount sizei))

(defglextfun ("glDrawElementsInstancedANGLE" draw-elements-instanced-angle) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (primcount sizei))

(defglextfun ("glVertexAttribDivisorANGLE" vertex-attrib-divisor-angle) :void
  (index uint)
  (divisor uint))

(defglextfun ("glGetTranslatedShaderSourceANGLE" get-translated-shader-source-angle) :void
  (shader uint)
  (bufsize sizei)
  (length (:pointer sizei))
  (source (:pointer char)))

(defglextfun ("glCopyImageSubDataEXT" copy-image-sub-data-ext) :void
  (srcName uint)
  (srcTarget enum)
  (srcLevel int)
  (srcX int)
  (srcY int)
  (srcZ int)
  (dstName uint)
  (dstTarget enum)
  (dstLevel int)
  (dstX int)
  (dstY int)
  (dstZ int)
  (srcWidth sizei)
  (srcHeight sizei)
  (srcDepth sizei))

(defglextfun ("glGenQueriesEXT" gen-queries-ext) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glDeleteQueriesEXT" delete-queries-ext) :void
  (n sizei)
  (ids (:pointer uint)))

(defglextfun ("glIsQueryEXT" is-query-ext) boolean
  (id uint))

(defglextfun ("glBeginQueryEXT" begin-query-ext) :void
  (target enum)
  (id uint))

(defglextfun ("glEndQueryEXT" end-query-ext) :void
  (target enum))

(defglextfun ("glQueryCounterEXT" query-counter-ext) :void
  (id uint)
  (target enum))

(defglextfun ("glGetQueryivEXT" get-query-iv-ext) :void
  (target enum)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetQueryObjectivEXT" get-query-object-iv-ext) :void
  (id uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetQueryObjectuivEXT" get-query-object-uiv-ext) :void
  (id uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glDrawBuffersEXT" draw-buffers-ext) :void
  (n sizei)
  (bufs (:pointer enum)))

(defglextfun ("glEnableiEXT" enable-i-ext) :void
  (target enum)
  (index uint))

(defglextfun ("glDisableiEXT" disable-i-ext) :void
  (target enum)
  (index uint))

(defglextfun ("glBlendEquationiEXT" blend-equation-i-ext) :void
  (buf uint)
  (mode enum))

(defglextfun ("glBlendEquationSeparateiEXT" blend-equation-separate-i-ext) :void
  (buf uint)
  (modeRGB enum)
  (modeAlpha enum))

(defglextfun ("glBlendFunciEXT" blend-func-i-ext) :void
  (buf uint)
  (src enum)
  (dst enum))

(defglextfun ("glBlendFuncSeparateiEXT" blend-func-separate-i-ext) :void
  (buf uint)
  (srcRGB enum)
  (dstRGB enum)
  (srcAlpha enum)
  (dstAlpha enum))

(defglextfun ("glColorMaskiEXT" color-mask-i-ext) :void
  (index uint)
  (r boolean)
  (g boolean)
  (b boolean)
  (a boolean))

(defglextfun ("glIsEnablediEXT" is-enabled-i-ext) boolean
  (target enum)
  (index uint))

(defglextfun ("glVertexAttribDivisorEXT" vertex-attrib-divisor-ext) :void
  (index uint)
  (divisor uint))

(defglextfun ("glReadBufferIndexedEXT" read-buffer-indexed-ext) :void
  (src enum)
  (index int))

(defglextfun ("glDrawBuffersIndexedEXT" draw-buffers-indexed-ext) :void
  (n int)
  (location (:pointer enum))
  (indices (:pointer int)))

(defglextfun ("glGetIntegeri_vEXT" get-integer-i-v-ext) :void
  (target enum)
  (index uint)
  (data (:pointer int)))

(defglextfun ("glPrimitiveBoundingBoxEXT" primitive-bounding-box-ext) :void
  (minX float)
  (minY float)
  (minZ float)
  (minW float)
  (maxX float)
  (maxY float)
  (maxZ float)
  (maxW float))

(defglextfun ("glPatchParameteriEXT" patch-parameter-i-ext) :void
  (pname enum)
  (value int))

(defglextfun ("glSamplerParameterIivEXT" sampler-parameter-iiv-ext) :void
  (sampler uint)
  (pname enum)
  (param (:pointer int)))

(defglextfun ("glSamplerParameterIuivEXT" sampler-parameter-iuiv-ext) :void
  (sampler uint)
  (pname enum)
  (param (:pointer uint)))

(defglextfun ("glGetSamplerParameterIivEXT" get-sampler-parameter-iiv-ext) :void
  (sampler uint)
  (pname enum)
  (params (:pointer int)))

(defglextfun ("glGetSamplerParameterIuivEXT" get-sampler-parameter-iuiv-ext) :void
  (sampler uint)
  (pname enum)
  (params (:pointer uint)))

(defglextfun ("glTexBufferRangeEXT" tex-buffer-range-ext) :void
  (target enum)
  (internalformat enum)
  (buffer uint)
  (offset intptr)
  (size sizeiptr))

(defglextfun ("glTextureViewEXT" texture-view-ext) :void
  (texture uint)
  (target enum)
  (origtexture uint)
  (internalformat enum)
  (minlevel uint)
  (numlevels uint)
  (minlayer uint)
  (numlayers uint))

(defglextfun ("glCopyBufferSubDataNV" copy-buffer-sub-data-nv) :void
  (readTarget enum)
  (writeTarget enum)
  (readOffset intptr)
  (writeOffset intptr)
  (size sizeiptr))

(defglextfun ("glCoverageMaskNV" coverage-mask-nv) :void
  (mask boolean))

(defglextfun ("glCoverageOperationNV" coverage-operation-nv) :void
  (operation enum))

(defglextfun ("glDrawBuffersNV" draw-buffers-nv) :void
  (n sizei)
  (bufs (:pointer enum)))

(defglextfun ("glDrawArraysInstancedNV" draw-arrays-instanced-nv) :void
  (mode enum)
  (first int)
  (count sizei)
  (primcount sizei))

(defglextfun ("glDrawElementsInstancedNV" draw-elements-instanced-nv) :void
  (mode enum)
  (count sizei)
  (type enum)
  (indices (:pointer :void))
  (primcount sizei))

(defglextfun ("glBlitFramebufferNV" blit-framebuffer-nv) :void
  (srcX0 int)
  (srcY0 int)
  (srcX1 int)
  (srcY1 int)
  (dstX0 int)
  (dstY0 int)
  (dstX1 int)
  (dstY1 int)
  (mask bitfield)
  (filter enum))

(defglextfun ("glRenderbufferStorageMultisampleNV" renderbuffer-storage-multisample-nv) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei))

(defglextfun ("glVertexAttribDivisorNV" vertex-attrib-divisor-nv) :void
  (index uint)
  (divisor uint))

(defglextfun ("glUniformMatrix2x3fvNV" uniform-matrix-2x3-fv-nv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix3x2fvNV" uniform-matrix-3x2-fv-nv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix2x4fvNV" uniform-matrix-2x4-fv-nv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix4x2fvNV" uniform-matrix-4x2-fv-nv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix3x4fvNV" uniform-matrix-3x4-fv-nv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glUniformMatrix4x3fvNV" uniform-matrix-4x3-fv-nv) :void
  (location int)
  (count sizei)
  (transpose boolean)
  (value (:pointer float)))

(defglextfun ("glReadBufferNV" read-buffer-nv) :void
  (mode enum))

(defglextfun ("glGetProgramBinaryOES" get-program-binary-oes) :void
  (program uint)
  (bufSize sizei)
  (length (:pointer sizei))
  (binaryFormat (:pointer enum))
  (binary (:pointer :void)))

(defglextfun ("glProgramBinaryOES" program-binary-oes) :void
  (program uint)
  (binaryFormat enum)
  (binary (:pointer :void))
  (length int))

(defglextfun ("glMinSampleShadingOES" min-sample-shading-oes) :void
  (value float))

(defglextfun ("glTexImage3DOES" tex-image-3d-oes) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glTexSubImage3DOES" tex-sub-image-3d-oes) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (type enum)
  (pixels (:pointer :void)))

(defglextfun ("glCopyTexSubImage3DOES" copy-tex-sub-image-3d-oes) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (x int)
  (y int)
  (width sizei)
  (height sizei))

(defglextfun ("glCompressedTexImage3DOES" compressed-tex-image-3d-oes) :void
  (target enum)
  (level int)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (border int)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glCompressedTexSubImage3DOES" compressed-tex-sub-image-3d-oes) :void
  (target enum)
  (level int)
  (xoffset int)
  (yoffset int)
  (zoffset int)
  (width sizei)
  (height sizei)
  (depth sizei)
  (format enum)
  (imageSize sizei)
  (data (:pointer :void)))

(defglextfun ("glFramebufferTexture3DOES" framebuffer-texture-3d-oes) :void
  (target enum)
  (attachment enum)
  (textarget enum)
  (texture uint)
  (level int)
  (zoffset int))

(defglextfun ("glTexStorage3DMultisampleOES" tex-storage-3d-multisample-oes) :void
  (target enum)
  (samples sizei)
  (internalformat enum)
  (width sizei)
  (height sizei)
  (depth sizei)
  (fixedsamplelocations boolean))

(defglextfun ("glAlphaFuncQCOM" alpha-func-qcom) :void
  (func enum)
  (ref clampf))

